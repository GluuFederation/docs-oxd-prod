{
    "docs": [
        {
            "location": "/",
            "text": "oxd 3.0.1 Documentation\n#\n\n\nTo make integrating applications with the Gluu Server (or any standard OpenID Connect Provider, like Google) fast, easy, and secure, Gluu offers commercial OAuth 2.0 client software called \noxd\n. Your application(s) can use any client software that implements the open standards the Gluu Server supports, however you may want to consider using oxd because:\n\n\n\n\noxd is super-easy to use;      \n\n\nWe keep updating oxd to address the latest OAuth 2.0 security knowledge;      \n\n\nWe can provide more complete end-to-end support if we know both the client and server software;      \n\n\noxd subscriptions help support this project so you can see more enhancements faster;      \n\n\nThere are oxd libraries for Php, Python, Java, Node, Ruby, C#, .Net, Perl and Go. If your application is programmed in another language, oxd has a simple JSON/REST API;      \n\n\nThere are oxd plugins for many popular applications like: Wordpress, Drupal, Magento, OpenCart, SugarCRM, SuiteCRM, Roundcube, Shopify, and Kong. More are being added too. Next on the list are: MatterMost, RocketChat, NextCloud, and Liferay.      \n\n\n\n\nTo learn more about oxd review the docs and \ncode on Github\n. When you're ready to deploy oxd, head over to the website to \nget your oxd license\n. \n\n\nOverview\n#\n\n\nThe oxd Server is designed to work as a standalone service demon. oxd is a web server, running in an embedded \nJetty\n server. Start it and stop it like you would any other unix service.\n\n\nBy default, oxd is restricted to \nlocalhost\n, which means these APIs cannot be reached from another server on the network--only by services running locally on the server. oxd should be deployed on each server that has web applications.\n\n\noxd APIs can be called by any application that can make REST calls. Gluu also provides several native libraries that wrap the\noxd APIs, currently available for Php, Java, Python, Node, Ruby C#, and .Net.\n\n\nTechnical Architecture\n#\n\n\n\n\nPlugins\n#\n\n\nGluu currently publishes oxd plugins, modules, and extensions for the following open source applications (more coming!):    \n\n- \nWordpress\n    \n\n- \nMagento\n     \n\n- \nDrupal\n     \n\n- \nOpenCart\n     \n\n- \nSuiteCRM\n     \n\n- \nSugarCRM\n     \n\n- \nRoundcube\n\n- \nNextCloud\n \n\n\nLibraries\n#\n\n\noxd client libraries provide simple, flexible, powerful access to the oxd OpenID Connect and UMA authentication and authorization APIs.   \n\n- \nPython\n     \n\n- \nJava\n     \n\n- \nPhp\n     \n\n- \nNode\n     \n\n- \nRuby\n     \n\n- \nC#\n     \n\n- \nPerl\n       \n\n\nLicense\n#\n\n\noxd is commercial software licensed by Gluu. Learn more on the \noxd website\n.\n\n\nFAQ's\n#\n\n\nWhat is oxd?\n     \n\noxd is a mediator: it provides API's that can be called by a web application that are easier than directly calling the API's of an OpenID Connect Provider (OP) or an UMA Authorization Server (AS).\n\n\nWhere do I deploy oxd?\n  \n\noxd is deployed on the same server as the web application(s) you want to protect.\n\n\nWhy should I use oxd?\n   \n\noxd offers a few key improvements over the traditional model of embedding OAuth 2.0 code in your applications:\n\n\n\n\n\n\nIf new vulnerabilities are discovered in OAuth2/OpenID Connect, oxd is the only component that needs to be updated. The oxd APIs remain the same, so you don't have to change and regression test your applications;     \n\n\n\n\n\n\noxd is written, maintained, and supported by developers who specialize in application security. Because of the complexity of the standards--and the liability associated with poor implementations--it makes sense to rely on professionals who have read the specifications in their entirety and understand how to properly implement the protocols;     \n\n\n\n\n\n\nCentralization reduces costs. By using oxd across your IT infrastructure for application security (as opposed to a handful of homegrown and third party OAuth2 client implementations), the surface area for vulnerabilities, issue resolution, and support is significantly reduced. Plus you who have someone to call when something goes wrong!     \n\n\n\n\n\n\nHow is oxd licensed?\n      \n\noxd is commercially licensed. Each time you install oxd you will need to use your license. Active installations are billed $0.33 per day (roughly $10 USD per month per active installation). \nGet your oxd license today\n.  \n\n\nWhich programming languages and frameworks does oxd have libraries for?\n      \n\nCurrently there are oxd libraries for the following languages and frameworks:    \n\n\n\n\nPhp   \n\n\nJava    \n\n\nPython    \n\n\nRuby    \n\n\nC#     \n\n\nNode.js    \n\n\nSpring    \n\n\nLua     \n\n\n\n\nHow do I get SSO across several websites?\n              \n\nYou\u2019ll need two things:     \n\n\n\n\n\n\nA central OpenID Connect Provider that holds the passwords and user information;     \n\n\n\n\n\n\nWebsites that use the OpenID Connect protocol to authenticate users.     \n\n\n\n\n\n\nAn easy way to accomplish the first--utilize \nGoogle as your OP\n, or install and configure the \nfree open source Gluu Server\n using the Linux packages for CentOS, Ubuntu, Debian or Red Hat. \n\n\nThe second is accomplished by \ninstalling the oxd service\n on each web server that needs SSO. This provides easy to use local API\u2019s that can be called by your web applications, and enables you to use a number of plugins for popular open source software packages.\n\n\nCan I use oxd plugins for social login?\n  \n\nSince oxd simply makes it easy to send users to an OpenID Connect Provider (OP) for login, social login needs to be implemented at the OP. If you are using the Gluu Server, you can use \nPassport.js\n to configure and offer  social login to your users. \n\n\nCan I use oxd for two-factor authentication (2FA)?\n  \n\nAgain, since oxd simply makes it easy to send users to an OpenID Connect Provider (OP) for login, two-factor authentication needs to be enforced at the OP. If your OP supports two-factor authentication, your application can request it by specifying an \nacr_value\n in the oxd configuration file. To see which types of authentication mechanisms your OP supports navigate to \nhttps://hostname/.well-known/openid-configuration\n and look for \nacr_values\n. For instance, you can see that Google does not allow a client to request a specific type of authentication: \nGoogle OpenID Configuration\n. The Gluu Server ships with several built in two-factor authentication mechanisms. Two that are very easy to use are FIDO U2F tokens (like Yubikey) and Duo Security. Check out the default \nacr values for supported authentication mechanisms\n in the Gluu Server.\n\n\nCan I use Google or Microsoft Azure Active Directory as my OpenID Connect Provider?\n  \n\nProbably, but Google and Microsoft do not support dynamic client registration. If you are successful with this, please let us know! It should work.\n\n\nCan I purchase support for the Gluu Server or oxd?\n  \n\nYes, for information on paid support, \nvisit our website\n.",
            "title": "Home"
        },
        {
            "location": "/#oxd-301-documentation",
            "text": "To make integrating applications with the Gluu Server (or any standard OpenID Connect Provider, like Google) fast, easy, and secure, Gluu offers commercial OAuth 2.0 client software called  oxd . Your application(s) can use any client software that implements the open standards the Gluu Server supports, however you may want to consider using oxd because:   oxd is super-easy to use;        We keep updating oxd to address the latest OAuth 2.0 security knowledge;        We can provide more complete end-to-end support if we know both the client and server software;        oxd subscriptions help support this project so you can see more enhancements faster;        There are oxd libraries for Php, Python, Java, Node, Ruby, C#, .Net, Perl and Go. If your application is programmed in another language, oxd has a simple JSON/REST API;        There are oxd plugins for many popular applications like: Wordpress, Drupal, Magento, OpenCart, SugarCRM, SuiteCRM, Roundcube, Shopify, and Kong. More are being added too. Next on the list are: MatterMost, RocketChat, NextCloud, and Liferay.         To learn more about oxd review the docs and  code on Github . When you're ready to deploy oxd, head over to the website to  get your oxd license .",
            "title": "oxd 3.0.1 Documentation"
        },
        {
            "location": "/#overview",
            "text": "The oxd Server is designed to work as a standalone service demon. oxd is a web server, running in an embedded  Jetty  server. Start it and stop it like you would any other unix service.  By default, oxd is restricted to  localhost , which means these APIs cannot be reached from another server on the network--only by services running locally on the server. oxd should be deployed on each server that has web applications.  oxd APIs can be called by any application that can make REST calls. Gluu also provides several native libraries that wrap the\noxd APIs, currently available for Php, Java, Python, Node, Ruby C#, and .Net.",
            "title": "Overview"
        },
        {
            "location": "/#technical-architecture",
            "text": "",
            "title": "Technical Architecture"
        },
        {
            "location": "/#plugins",
            "text": "Gluu currently publishes oxd plugins, modules, and extensions for the following open source applications (more coming!):     \n-  Wordpress      \n-  Magento       \n-  Drupal       \n-  OpenCart       \n-  SuiteCRM       \n-  SugarCRM       \n-  Roundcube \n-  NextCloud",
            "title": "Plugins"
        },
        {
            "location": "/#libraries",
            "text": "oxd client libraries provide simple, flexible, powerful access to the oxd OpenID Connect and UMA authentication and authorization APIs.    \n-  Python       \n-  Java       \n-  Php       \n-  Node       \n-  Ruby       \n-  C#       \n-  Perl",
            "title": "Libraries"
        },
        {
            "location": "/#license",
            "text": "oxd is commercial software licensed by Gluu. Learn more on the  oxd website .",
            "title": "License"
        },
        {
            "location": "/#faqs",
            "text": "What is oxd?       \noxd is a mediator: it provides API's that can be called by a web application that are easier than directly calling the API's of an OpenID Connect Provider (OP) or an UMA Authorization Server (AS).  Where do I deploy oxd?    \noxd is deployed on the same server as the web application(s) you want to protect.  Why should I use oxd?     \noxd offers a few key improvements over the traditional model of embedding OAuth 2.0 code in your applications:    If new vulnerabilities are discovered in OAuth2/OpenID Connect, oxd is the only component that needs to be updated. The oxd APIs remain the same, so you don't have to change and regression test your applications;         oxd is written, maintained, and supported by developers who specialize in application security. Because of the complexity of the standards--and the liability associated with poor implementations--it makes sense to rely on professionals who have read the specifications in their entirety and understand how to properly implement the protocols;         Centralization reduces costs. By using oxd across your IT infrastructure for application security (as opposed to a handful of homegrown and third party OAuth2 client implementations), the surface area for vulnerabilities, issue resolution, and support is significantly reduced. Plus you who have someone to call when something goes wrong!         How is oxd licensed?        \noxd is commercially licensed. Each time you install oxd you will need to use your license. Active installations are billed $0.33 per day (roughly $10 USD per month per active installation).  Get your oxd license today .    Which programming languages and frameworks does oxd have libraries for?        \nCurrently there are oxd libraries for the following languages and frameworks:       Php     Java      Python      Ruby      C#       Node.js      Spring      Lua        How do I get SSO across several websites?                \nYou\u2019ll need two things:         A central OpenID Connect Provider that holds the passwords and user information;         Websites that use the OpenID Connect protocol to authenticate users.         An easy way to accomplish the first--utilize  Google as your OP , or install and configure the  free open source Gluu Server  using the Linux packages for CentOS, Ubuntu, Debian or Red Hat.   The second is accomplished by  installing the oxd service  on each web server that needs SSO. This provides easy to use local API\u2019s that can be called by your web applications, and enables you to use a number of plugins for popular open source software packages.  Can I use oxd plugins for social login?    \nSince oxd simply makes it easy to send users to an OpenID Connect Provider (OP) for login, social login needs to be implemented at the OP. If you are using the Gluu Server, you can use  Passport.js  to configure and offer  social login to your users.   Can I use oxd for two-factor authentication (2FA)?    \nAgain, since oxd simply makes it easy to send users to an OpenID Connect Provider (OP) for login, two-factor authentication needs to be enforced at the OP. If your OP supports two-factor authentication, your application can request it by specifying an  acr_value  in the oxd configuration file. To see which types of authentication mechanisms your OP supports navigate to  https://hostname/.well-known/openid-configuration  and look for  acr_values . For instance, you can see that Google does not allow a client to request a specific type of authentication:  Google OpenID Configuration . The Gluu Server ships with several built in two-factor authentication mechanisms. Two that are very easy to use are FIDO U2F tokens (like Yubikey) and Duo Security. Check out the default  acr values for supported authentication mechanisms  in the Gluu Server.  Can I use Google or Microsoft Azure Active Directory as my OpenID Connect Provider?    \nProbably, but Google and Microsoft do not support dynamic client registration. If you are successful with this, please let us know! It should work.  Can I purchase support for the Gluu Server or oxd?    \nYes, for information on paid support,  visit our website .",
            "title": "FAQ's"
        },
        {
            "location": "/protocol/",
            "text": "OpenID Connect Authentication Overview\n#\n\n\nOpenID Connect is one of the most popular API's for an application \nto identify a person. Technically it is not an authentication protocol--\nit enables a person to authorize the release of information to \nan application from a remote \"identity provider\". In the\nprocess of authorizing this release of information, the person is authenticated (if \nno previous session exists). If you are familiar with Google \nauthentication, you've used OpenID Connect. \n\n\n\n\nNote\n\n\nIf you need to launch an OpenID Connect Provider for your organization, \nyou should consider \ndeploying the Gluu Server\n. \nThe Gluu Server will enable your organization to consolidate authentication in one place, \nand to enable Single Sign-on (SSO) to many applications. \n\n\n\n\nAuthentication Flow\n#\n\n\noxd uses the \nAuthorization Code Flow\n \nfor authentication. Future versions of oxd may support the Hybrid Flow. \nImplicit Flow is not supported because it is intended for Javascript client-side \napplications where the client does not authenticate.\n\n\nLearn more about authentication flows in the \n\nOpenID Connect spec\n. \n\n\noxd APIs\n#\n\n\noxd provides six API's for OpenID Connect authentication. In general,\nyou can think of the Authorization Code Flow as a three step process: \n\n\n\n\nRedirect person to the authorization URL and obtain a code\n\n\nUse code to obtain tokens (access, id_token, refresh)\n\n\nUse access token to obtain user claims\n\n\n\n\nThe other three oxd API's are:\n\n\n\n\nRegister site (called once--the first time your application uses oxd)\n\n\nUpdate site registration (not used often)\n\n\nLogout\n\n\n\n\nRegister site\n#\n\n\nFirst of all, the web site must register itself with oxd server. If \nregistration is successful, ox will return an identifier for the \napplication, which must be presented in subsequent API calls. This\nis the \noxd-id\n, not to be confused with the OpenID Connect client id.\n\n\nDuring the registration operation, oxd will dynamically register an \nOpenID Connect client and save its configuration.\n\n\nAll parameters to \nregister_site\n are optional except the \n\nauthorization_redirect_uri\n. This is the URL on your website that the \nOpenID Connect Provider (OP) will redirect the person to after \nsuccessful authorization.\n\n\nregister_site\n has many parameters, but you can ignore most of them!\nDefault configuration values are taken from\n\nconf/oxd-default-site-config.json\n.\nEven most of these options may be blank, with one exception: if the \n\nop_host\n is missing from the \nregister_site\n command parameters, \nit must be present in this file--we need to know which OpenID Provider\nwill be used! \n\n\nThe \nregister_site\n command returns \noxd_id\n. Several applications may \nshare an instance of oxd, and this identifier is used by oxd to \ndistinguish differences in configuration between them.\n\n\nop_host\n must point to a valid OpenID Connect Provider that supports \n\nclient registration\n, \nfor example, a \nGluu Server CE installation\n. \nSample: \n\"op_host\":\"https://idp.example.org\"\n\n\nRequest:\n\n\n{\n    \"command\":\"register_site\",\n    \"params\": {\n        \"authorization_redirect_uri\": \"https://client.example.org/cb\", <- REQUIRED\n        \"op_host\":\"https://ce-dev.gluu.org\"                            <- OPTIONAL (But if missing, must be present in defaults)\n        \"post_logout_redirect_uri\": \"https://client.example.org/cb\",   <- OPTIONAL \n        \"application_type\": \"web\",                                     <- OPTIONAL\n        \"response_types\": [\"code\"],                                    <- OPTIONAL\n        \"grant_types\": [\"authorization_code\"],                         <- OPTIONAL \n        \"scope\": [\"openid\"],                                           <- OPTIONAL\n        \"acr_values\": [\"basic\"],                                       <- OPTIONAL\n        \"client_name\": \"\",                                             <- OPTIONAL (But if missing, oxd will generate its own non-human readable name)\n        \"client_jwks_uri\": \"\",                                         <- OPTIONAL\n        \"client_token_endpoint_auth_method\": \"\",                       <- OPTIONAL\n        \"client_request_uris\": [],                                     <- OPTIONAL\n        \"client_logout_uris\": [],                                      <- OPTIONAL\n        \"client_sector_identifier_uri\": [],                            <- OPTIONAL\n        \"contacts\": [\"foo_bar@spam.org\"],                              <- OPTIONAL\n        \"ui_locales\": [],                                              <- OPTIONAL\n        \"claims_locales\": [],                                          <- OPTIONAL\n        \"client_id\": \"<client id of existing client>\",                 <- OPTIONAL ignores all other parameters and skips new client registration forcing to use existing client (client_secret is required if this parameter is set)\n        \"client_secret\": \"<client secret of existing client>\"          <- OPTIONAL must be used together with client_secret.\n    }\n}\n\n\n\n\nResponse:\n\n\n{\n    \"status\":\"ok\",\n    \"data\":{\n        \"oxd_id\":\"6F9619FF-8B86-D011-B42D-00CF4FC964FF\"\n    }\n}\n\n\n\n\nUpdate site registration\n#\n\n\nAPI used to update a current registration.\n\n\nRequest:\n\n\n{\n    \"command\":\"update_site_registration\",\n    \"params\": {\n        \"oxd_id\":\"6F9619FF-8B86-D011-B42D-00CF4FC964FF\",              <- REQUIRED\n        \"authorization_redirect_uri\": \"https://client.example.org/cb\",<- OPTIONAL \n        \"post_logout_redirect_uri\": \"https://client.example.org/cb\",  <- OPTIONAL \n        \"client_logout_uris\":[\"https://client.example.org/logout\"],   <- OPTIONAL\n        \"response_type\":[\"code\"],                                     <- OPTIONAL\n        \"grant_types\":[],                                             <- OPTIONAL\n        \"scope\": [\"opeind\", \"profile\"],                               <- OPTIONAL\n        \"acr_values\": [\"duo\"],                                        <- OPTIONAL\n        \"client_name\": \"\",                                            <- OPTIONAL\n        \"client_secret_expires_at\":1335205592410,                     <- OPTIONAL can be used to extends client lifetime (milliseconds since 1970)\n        \"client_jwks_uri\": \"\",                                        <- OPTIONAL\n        \"client_token_endpoint_auth_method\": \"\",                      <- OPTIONAL\n        \"client_request_uris\":[],                                     <- OPTIONAL\n        \"client_logout_uris\":[],                                      <- OPTIONAL\n        \"client_sector_identifier_uri\":\"\",                            <- OPTIONAL\n        \"contacts\":[\"foo_bar@spam.org\"],                              <- OPTIONAL\n        \"ui_locales\":[],                                              <- OPTIONAL\n        \"claims_locales\":[],                                          <- OPTIONAL\n    }\n}\n\n\n\n\nResponse:\n\n\n{\n    \"status\":\"ok\"\n}\n\n\n\n\nGet authorization url\n#\n\n\nReturns the URL at the OpenID Provider (OP) to which your application \nmust redirect the person to authorize the release of personal data (and\nperhaps be authenticated in the process if no previous session exists).\nThe Response from the OP will include the code and state \nvalues, which should be used to subsequently obtain tokens.\n\n\nRequest:\n\n\n{\n    \"command\":\"get_authorization_url\",\n    \"params\": {\n        \"oxd_id\": \"6F9619FF-8B86-D011-B42D-00CF4FC964FF\", <- required, obtained after registration\n        \"scope\": [\"openid\"],                              <- optional, may be skipped (by default takes scopes that was registered during register_site command)\n        \"acr_values\": [\"duo\"],                            <- optional, may be skipped (default is basic)\n        \"prompt\": \"login\"                                 <- optional, skipped if no value specified or missed. prompt=login is required if you want to force alter current user session (in case user is already logged in from site1 and site2 construsts authorization request and want to force alter current user session)\n    }\n}\n\n\n\n\nResponse:\n\n\n{\n    \"status\":\"ok\",\n    \"data\":{\n        \"authorization_url\":\"  https://server.example.com/authorize?response_type=code\n    &client_id=s6BhdRkqt3\n    &redirect_uri=https%3A%2F%2Fclient.example.org%2Fcb\n    &scope=openid%20profile\n    &acr_values=duo\n    &state=af0ifjsldkj\n    &nonce=n-0S6_WzA2Mj\"\n    }\n}\n\n\n\n\nAfter redirecting to the above URL, the OpenID Provider will return a \nresponse that looks like this to the URL your application registered as \nthe redirect URI (parse out the code and state):\n\n\nHTTP/1.1 302 Found\nLocation: https://client.example.org/cb?code=SplxlOBeZQQYbYS6WxSbIA&state=af0ifjsldkj&scopes=openid%20profile\n\n\n\n\nGet Tokens (ID & Access) by Code\n#\n\n\nUse the code and state obtained in the previous step to call this API to retrieve tokens.\n\n\nRequest:\n\n\n{\n    \"command\":\"get_tokens_by_code\",\n    \"params\": {\n        \"oxd_id\":\"6F9619FF-8B86-D011-B42D-00CF4FC964FF\", <- Required\n        \"code\":\"I6IjIifX0\",                              <- Required, code from OP redirect url (see example above)\n        \"state\":\"af0ifjsldkj\"                            <- Required\n    }\n}\n\n\n\n\nResponse:\n\n\n{\n    \"status\":\"ok\",\n    \"data\":{\n        \"access_token\":\"SlAV32hkKG\",\n        \"expires_in\":3600,\n        \"refresh_token\":\"aaAV32hkKG1\"\n        \"id_token\":\"eyJ0 ... NiJ9.eyJ1c ... I6IjIifX0.DeWt4Qu ... ZXso\",\n        \"id_token_claims\": {\n             \"iss\": \"https://server.example.com\",\n             \"sub\": \"24400320\",\n             \"aud\": \"s6BhdRkqt3\",\n             \"nonce\": \"n-0S6_WzA2Mj\",\n             \"exp\": 1311281970,\n             \"iat\": 1311280970,\n             \"at_hash\": \"MTIzNDU2Nzg5MDEyMzQ1Ng\"\n        }\n    }\n}\n\n\n\n\nGet User Info\n#\n\n\nUse the access token from the step above to retrieve a JSON object \nwith the user claims.\n\n\nRequest:\n\n\n{\n    \"command\":\"get_user_info\",\n    \"params\": {\n        \"oxd_id\":\"6F9619FF-8B86-D011-B42D-00CF4FC964FF\",\n        \"access_token\":\"SlAV32hkKG\"\n    }\n}\n\n\n\n\nResponse:\n\n\n{\n    \"status\":\"ok\",\n    \"data\":{\n        \"claims\":{\n            \"sub\": [\"248289761001\"],\n            \"name\": [\"Jane Doe\"],\n            \"given_name\": [\"Jane\"],\n            \"family_name\": [\"Doe\"],\n            \"preferred_username\": [\"j.doe\"],\n            \"email\": [\"janedoe@example.com\"],\n            \"picture\": [\"http://example.com/janedoe/me.jpg\"]\n        }\n    }\n}\n\n\n\n\nLog out URI\n#\n\n\nUses front channel logout--a page is returned with iFrames, each of \nwhich contains the logout URL of the applications that have a session \nin that browser. These iFrames should be loaded automatically--enabling \neach application to get a notification of logout, and to hopefully clean \nup any cookies in the person's browser. If the person blocks \n\nthird-party cookies\n\nin their browser, logout will not work.\n\n\nRequest:\n\n\n{\n    \"command\":\"get_logout_uri\",\n    \"params\": {\n        \"oxd_id\":\"6F9619FF-8B86-D011-B42D-00CF4FC964FF\",\n        \"id_token_hint\": \"eyJ0 ... NiJ9.eyJ1c ... I6IjIifX0.DeWt4Qu ... ZXso\",<-- OPTIONAL (oxd server will use last used ID Token)\n        \"post_logout_redirect_uri\": \"<post logout redirect uri here>\",        <-- OPTIONAL\n        \"state\": \"<site state>\",                                              <-- OPTIONAL\n        \"session_state\": \"<session state>\"                                    <-- OPTIONAL\n    }\n}\n\n\n\n\nResponse:\n\n\n{\n    \"status\":\"ok\",\n    \"data\":{\n        \"uri\":\"https://<server>/end_session?id_token_hint=<id token>&state=<state>&post_logout_redirect_uri=<...>\"\n    }\n}\n\n\n\n\nUMA Resource Server API's\n#\n\n\nA client, acting as an \nOAuth2 Resource Server\n,\nMUST:\n\n\n\n\nRegister a protection document (with uma_rs_protect command)\n\n\nIntercept HTTP call (before actual REST resource call) and check whether it's allowed to proceed with call or reject it according to uma_rs_check_access command response:\n\n\nAllow access - if response from uma_rs_check_access is \"allowed\" or \"not_protected\" error is returned.\n\n\numa_rs_check_access returned \"denied\" with ticket then return back HTTP response\n\n\n\n\n\n\n\n\nHTTP/1.1 401 Unauthorized\nWWW-Authenticate: UMA realm=\"example\",\n      as_uri=\"https://as.example.com\",\n      ticket=\"016f84e8-f9b9-11e0-bd6f-0021cc6004de\"\n\n\n\n\n- uma_rs_check_access returned \"denied\" without ticket then return back HTTP response\n\n\n\nHTTP/1.1 403 Forbidden\nWarning: 199 - \"UMA Authorization Server Unreachable\"\n\n\n\n\nUMA RS Protect resources\n#\n\n\nRequest:\n\n\n{\n    \"command\":\"uma_rs_protect\",\n    \"params\": {\n        \"oxd_id\":\"6F9619FF-8B86-D011-B42D-00CF4FC964FF\",   <- REQUIRED\n        \"resources\":[        <-  REQUIRED as parameter here we have protection json that describes resources on RS\n            {\n                \"path\":\"/photo\",\n                \"conditions\":[\n                    {\n                        \"httpMethods\":[\"GET\"],\n                        \"scopes\":[\n                            \"http://photoz.example.com/dev/actions/view\"\n                        ]\n                    },\n                    {\n                        \"httpMethods\":[\"PUT\", \"POST\"],\n                        \"scopes\":[\n                            \"http://photoz.example.com/dev/actions/all\",\n                            \"http://photoz.example.com/dev/actions/add\"\n                        ],\n                        \"ticketScopes\":[\n                            \"http://photoz.example.com/dev/actions/add\"\n                        ]\n                    }\n                ]\n            },\n            {\n                \"path\":\"/document\",\n                \"conditions\":[\n                    {\n                        \"httpMethods\":[\"GET\"],\n                        \"scopes\":[\n                            \"http://photoz.example.com/dev/actions/view\"\n                        ]\n                    }\n                ]\n            }\n        ]\n    }\n}\n\n\n\n\nResponse:\n\n\n{\n    \"status\":\"ok\"\n}\n\n\n\n\nUMA RS Check Access\n#\n\n\nRequest:\n\n\n{\n    \"command\":\"uma_rs_check_access\",\n    \"params\": {\n        \"oxd_id\":\"6F9619FF-8B86-D011-B42D-00CF4FC964FF\",\n        \"rpt\":\"eyJ0 ... NiJ9.eyJ1c ... I6IjIifX0.DeWt4Qu ... ZXso\",    <-- REQUIRED RPT or blank value if absent (not send by RP)\n        \"path\":\"<path of resource>\",                                   <-- REQUIRED Path of resource (e.g. http://rs.com/phones), /phones should be passed\n        \"http_method\":\"<http method of RP request>\"                    <-- REQUIRED Http method of RP request (GET, POST, PUT, DELETE)\n    }\n}\n\n\n\n\nSample of RP request:\n\n\nGET /users/alice/album/photo HTTP/1.1\nAuthorization: Bearer vF9dft4qmT\nHost: photoz.example.com\n\n\n\n\nParams:\n\n\nrpt: 'vF9dft4qmT'\npath: /users/alice/album/photo\nhttp_method: GET\n\n\n\n\nAccess Granted response:\n\n\n{\n    \"status\":\"ok\",\n    \"data\":{\n        \"access\":\"granted\"\n    }\n}\n\n\n\n\nAccess Denied with ticket response:\n\n\n{\n    \"status\":\"ok\",\n    \"data\":{\n        \"access\":\"denied\"\n        \"www-authenticate_header\":\"UMA realm=\\\"example\\\",\n                                   as_uri=\\\"https://as.example.com\\\",\n                                   error=\\\"insufficient_scope\\\",\n                                   ticket=\\\"016f84e8-f9b9-11e0-bd6f-0021cc6004de\\\"\",\n        \"ticket\":\"016f84e8-f9b9-11e0-bd6f-0021cc6004de\"\n    }\n}\n\n\n\n\nAccess Denied without ticket response:\n\n\n{\n    \"status\":\"ok\",\n    \"data\":{\n        \"access\":\"denied\"\n    }\n}\n\n\n\n\nErrors:\n\n\nResource is not protected\n\n\n{\n    \"status\":\"error\",\n    \"data\":{\n        \"error\":\"invalid_request\",\n        \"error_description\":\"Resource is not protected. Please protect your resource first with uma_rs_protect command.\"\n    }\n}\n\n\n\n\nUMA Client API's\n#\n\n\nIf your appliation is calling UMA protected resources, use these API's to obtain an RPT token.\n\n\nUMA RP - Get RPT\n#\n\n\nFor latest and most up to date parameters of command please check \nlatest successful \njenkins build\n\n\nRequest:\n\n\n{\n    \"command\":\"uma_rp_get_rpt\",\n    \"params\": {\n         \"oxd_id\":\"6F9619FF-8B86-D011-B42D-00CF4FC964FF\",  <- REQUIRED\n         \"force_new\": false                                <- REQUIRED indicates whether return new RPT, in general should be false, so oxd server can cache/reuse same RPT\n    }\n}\n\n\n\n\nResponse:\n\n\n{\n     \"status\":\"ok\",\n     \"data\":{\n         \"rpt\":\"vF9dft4qmT\"\n     }\n}\n\n\n\n\nUMA RP - Authorize RPT\n#\n\n\nRequest:\n\n\n{\n    \"command\":\"uma_rp_authorize_rpt\",\n    \"params\": {\n         \"oxd_id\":\"6F9619FF-8B86-D011-B42D-00CF4FC964FF\",  <- REQUIRED\n         \"rpt\": \"vF9dft4qmT\",                              <- REQUIRED\n         \"ticket\": \"016f84e8-f9b9-11e0-bd6f-0021cc6004de\"  <- REQUIRED\n    }\n}\n\n\n\n\nAuthorized Response (Success):\n\n\n{\n     \"status\":\"ok\",\n}\n\n\n\n\nNot authorized error:\n\n\n{\n    \"status\":\"error\",\n    \"data\":{\n        \"code\":\"not_authorized\",\n        \"description\":\"RPT is not authorized.\"\n    }\n}\n\n\n\n\nInvalid ticket error:\n\n\n{\n    \"status\":\"error\",\n    \"data\":{\n        \"code\":\"invalid_ticket\",\n        \"description\":\"Ticket is not valid (outdated or not present on Authorization Server).\"\n    }\n}\n\n\n\n\nInvalid rpt error:\n\n\n{\n    \"status\":\"error\",\n    \"data\":{\n        \"code\":\"invalid_rpt\",\n        \"description\":\"RPT is not valid (outdated or not present on Authorization Server).\"\n    }\n}\n\n\n\n\nGluu OAuth2 Access Management API's\n#\n\n\nGAT stands for Gluu Access Token. It is invented by Gluu and is described here: \nhttps://ox.gluu.org/doku.php?id=uma:oauth2_access_management.\n\n\nRequest:\n\n\n{\n    \"command\":\"uma_rp_get_gat\",\n    \"params\": {\n         \"oxd_id\":\"6F9619FF-8B86-D011-B42D-00CF4FC964FF\",  <- REQUIRED\n         \"scopes\": [                                       <- REQUIRED RP should know required scopes in advance\n             \"http://photoz.example.com/dev/actions/add\",\n             \"http://photoz.example.com/dev/actions/view\",\n             \"http://photoz.example.com/dev/actions/edit\"\n         ]\n    }\n}\n\n\n\n\nResponse:\n\n\n{\n     \"status\":\"ok\",\n     \"data\":{\n         \"rpt\":\"fg6vF9dft4qmT\"\n     }\n}\n\n\n\n\nReferences\n#\n\n\n\n\nUMA 1.0.1 Specification\n\n\nSample RS of Java Resteasy HTTP interceptor of uma-rs",
            "title": "Protocol"
        },
        {
            "location": "/protocol/#openid-connect-authentication-overview",
            "text": "OpenID Connect is one of the most popular API's for an application \nto identify a person. Technically it is not an authentication protocol--\nit enables a person to authorize the release of information to \nan application from a remote \"identity provider\". In the\nprocess of authorizing this release of information, the person is authenticated (if \nno previous session exists). If you are familiar with Google \nauthentication, you've used OpenID Connect.    Note  If you need to launch an OpenID Connect Provider for your organization, \nyou should consider  deploying the Gluu Server . \nThe Gluu Server will enable your organization to consolidate authentication in one place, \nand to enable Single Sign-on (SSO) to many applications.",
            "title": "OpenID Connect Authentication Overview"
        },
        {
            "location": "/protocol/#authentication-flow",
            "text": "oxd uses the  Authorization Code Flow  \nfor authentication. Future versions of oxd may support the Hybrid Flow. \nImplicit Flow is not supported because it is intended for Javascript client-side \napplications where the client does not authenticate.  Learn more about authentication flows in the  OpenID Connect spec .",
            "title": "Authentication Flow"
        },
        {
            "location": "/protocol/#oxd-apis",
            "text": "oxd provides six API's for OpenID Connect authentication. In general,\nyou can think of the Authorization Code Flow as a three step process:    Redirect person to the authorization URL and obtain a code  Use code to obtain tokens (access, id_token, refresh)  Use access token to obtain user claims   The other three oxd API's are:   Register site (called once--the first time your application uses oxd)  Update site registration (not used often)  Logout",
            "title": "oxd APIs"
        },
        {
            "location": "/protocol/#register-site",
            "text": "First of all, the web site must register itself with oxd server. If \nregistration is successful, ox will return an identifier for the \napplication, which must be presented in subsequent API calls. This\nis the  oxd-id , not to be confused with the OpenID Connect client id.  During the registration operation, oxd will dynamically register an \nOpenID Connect client and save its configuration.  All parameters to  register_site  are optional except the  authorization_redirect_uri . This is the URL on your website that the \nOpenID Connect Provider (OP) will redirect the person to after \nsuccessful authorization.  register_site  has many parameters, but you can ignore most of them!\nDefault configuration values are taken from conf/oxd-default-site-config.json .\nEven most of these options may be blank, with one exception: if the  op_host  is missing from the  register_site  command parameters, \nit must be present in this file--we need to know which OpenID Provider\nwill be used!   The  register_site  command returns  oxd_id . Several applications may \nshare an instance of oxd, and this identifier is used by oxd to \ndistinguish differences in configuration between them.  op_host  must point to a valid OpenID Connect Provider that supports  client registration , \nfor example, a  Gluu Server CE installation . \nSample:  \"op_host\":\"https://idp.example.org\"  Request:  {\n    \"command\":\"register_site\",\n    \"params\": {\n        \"authorization_redirect_uri\": \"https://client.example.org/cb\", <- REQUIRED\n        \"op_host\":\"https://ce-dev.gluu.org\"                            <- OPTIONAL (But if missing, must be present in defaults)\n        \"post_logout_redirect_uri\": \"https://client.example.org/cb\",   <- OPTIONAL \n        \"application_type\": \"web\",                                     <- OPTIONAL\n        \"response_types\": [\"code\"],                                    <- OPTIONAL\n        \"grant_types\": [\"authorization_code\"],                         <- OPTIONAL \n        \"scope\": [\"openid\"],                                           <- OPTIONAL\n        \"acr_values\": [\"basic\"],                                       <- OPTIONAL\n        \"client_name\": \"\",                                             <- OPTIONAL (But if missing, oxd will generate its own non-human readable name)\n        \"client_jwks_uri\": \"\",                                         <- OPTIONAL\n        \"client_token_endpoint_auth_method\": \"\",                       <- OPTIONAL\n        \"client_request_uris\": [],                                     <- OPTIONAL\n        \"client_logout_uris\": [],                                      <- OPTIONAL\n        \"client_sector_identifier_uri\": [],                            <- OPTIONAL\n        \"contacts\": [\"foo_bar@spam.org\"],                              <- OPTIONAL\n        \"ui_locales\": [],                                              <- OPTIONAL\n        \"claims_locales\": [],                                          <- OPTIONAL\n        \"client_id\": \"<client id of existing client>\",                 <- OPTIONAL ignores all other parameters and skips new client registration forcing to use existing client (client_secret is required if this parameter is set)\n        \"client_secret\": \"<client secret of existing client>\"          <- OPTIONAL must be used together with client_secret.\n    }\n}  Response:  {\n    \"status\":\"ok\",\n    \"data\":{\n        \"oxd_id\":\"6F9619FF-8B86-D011-B42D-00CF4FC964FF\"\n    }\n}",
            "title": "Register site"
        },
        {
            "location": "/protocol/#update-site-registration",
            "text": "API used to update a current registration.  Request:  {\n    \"command\":\"update_site_registration\",\n    \"params\": {\n        \"oxd_id\":\"6F9619FF-8B86-D011-B42D-00CF4FC964FF\",              <- REQUIRED\n        \"authorization_redirect_uri\": \"https://client.example.org/cb\",<- OPTIONAL \n        \"post_logout_redirect_uri\": \"https://client.example.org/cb\",  <- OPTIONAL \n        \"client_logout_uris\":[\"https://client.example.org/logout\"],   <- OPTIONAL\n        \"response_type\":[\"code\"],                                     <- OPTIONAL\n        \"grant_types\":[],                                             <- OPTIONAL\n        \"scope\": [\"opeind\", \"profile\"],                               <- OPTIONAL\n        \"acr_values\": [\"duo\"],                                        <- OPTIONAL\n        \"client_name\": \"\",                                            <- OPTIONAL\n        \"client_secret_expires_at\":1335205592410,                     <- OPTIONAL can be used to extends client lifetime (milliseconds since 1970)\n        \"client_jwks_uri\": \"\",                                        <- OPTIONAL\n        \"client_token_endpoint_auth_method\": \"\",                      <- OPTIONAL\n        \"client_request_uris\":[],                                     <- OPTIONAL\n        \"client_logout_uris\":[],                                      <- OPTIONAL\n        \"client_sector_identifier_uri\":\"\",                            <- OPTIONAL\n        \"contacts\":[\"foo_bar@spam.org\"],                              <- OPTIONAL\n        \"ui_locales\":[],                                              <- OPTIONAL\n        \"claims_locales\":[],                                          <- OPTIONAL\n    }\n}  Response:  {\n    \"status\":\"ok\"\n}",
            "title": "Update site registration"
        },
        {
            "location": "/protocol/#get-authorization-url",
            "text": "Returns the URL at the OpenID Provider (OP) to which your application \nmust redirect the person to authorize the release of personal data (and\nperhaps be authenticated in the process if no previous session exists).\nThe Response from the OP will include the code and state \nvalues, which should be used to subsequently obtain tokens.  Request:  {\n    \"command\":\"get_authorization_url\",\n    \"params\": {\n        \"oxd_id\": \"6F9619FF-8B86-D011-B42D-00CF4FC964FF\", <- required, obtained after registration\n        \"scope\": [\"openid\"],                              <- optional, may be skipped (by default takes scopes that was registered during register_site command)\n        \"acr_values\": [\"duo\"],                            <- optional, may be skipped (default is basic)\n        \"prompt\": \"login\"                                 <- optional, skipped if no value specified or missed. prompt=login is required if you want to force alter current user session (in case user is already logged in from site1 and site2 construsts authorization request and want to force alter current user session)\n    }\n}  Response:  {\n    \"status\":\"ok\",\n    \"data\":{\n        \"authorization_url\":\"  https://server.example.com/authorize?response_type=code\n    &client_id=s6BhdRkqt3\n    &redirect_uri=https%3A%2F%2Fclient.example.org%2Fcb\n    &scope=openid%20profile\n    &acr_values=duo\n    &state=af0ifjsldkj\n    &nonce=n-0S6_WzA2Mj\"\n    }\n}  After redirecting to the above URL, the OpenID Provider will return a \nresponse that looks like this to the URL your application registered as \nthe redirect URI (parse out the code and state):  HTTP/1.1 302 Found\nLocation: https://client.example.org/cb?code=SplxlOBeZQQYbYS6WxSbIA&state=af0ifjsldkj&scopes=openid%20profile",
            "title": "Get authorization url"
        },
        {
            "location": "/protocol/#get-tokens-id-access-by-code",
            "text": "Use the code and state obtained in the previous step to call this API to retrieve tokens.  Request:  {\n    \"command\":\"get_tokens_by_code\",\n    \"params\": {\n        \"oxd_id\":\"6F9619FF-8B86-D011-B42D-00CF4FC964FF\", <- Required\n        \"code\":\"I6IjIifX0\",                              <- Required, code from OP redirect url (see example above)\n        \"state\":\"af0ifjsldkj\"                            <- Required\n    }\n}  Response:  {\n    \"status\":\"ok\",\n    \"data\":{\n        \"access_token\":\"SlAV32hkKG\",\n        \"expires_in\":3600,\n        \"refresh_token\":\"aaAV32hkKG1\"\n        \"id_token\":\"eyJ0 ... NiJ9.eyJ1c ... I6IjIifX0.DeWt4Qu ... ZXso\",\n        \"id_token_claims\": {\n             \"iss\": \"https://server.example.com\",\n             \"sub\": \"24400320\",\n             \"aud\": \"s6BhdRkqt3\",\n             \"nonce\": \"n-0S6_WzA2Mj\",\n             \"exp\": 1311281970,\n             \"iat\": 1311280970,\n             \"at_hash\": \"MTIzNDU2Nzg5MDEyMzQ1Ng\"\n        }\n    }\n}",
            "title": "Get Tokens (ID &amp; Access) by Code"
        },
        {
            "location": "/protocol/#get-user-info",
            "text": "Use the access token from the step above to retrieve a JSON object \nwith the user claims.  Request:  {\n    \"command\":\"get_user_info\",\n    \"params\": {\n        \"oxd_id\":\"6F9619FF-8B86-D011-B42D-00CF4FC964FF\",\n        \"access_token\":\"SlAV32hkKG\"\n    }\n}  Response:  {\n    \"status\":\"ok\",\n    \"data\":{\n        \"claims\":{\n            \"sub\": [\"248289761001\"],\n            \"name\": [\"Jane Doe\"],\n            \"given_name\": [\"Jane\"],\n            \"family_name\": [\"Doe\"],\n            \"preferred_username\": [\"j.doe\"],\n            \"email\": [\"janedoe@example.com\"],\n            \"picture\": [\"http://example.com/janedoe/me.jpg\"]\n        }\n    }\n}",
            "title": "Get User Info"
        },
        {
            "location": "/protocol/#log-out-uri",
            "text": "Uses front channel logout--a page is returned with iFrames, each of \nwhich contains the logout URL of the applications that have a session \nin that browser. These iFrames should be loaded automatically--enabling \neach application to get a notification of logout, and to hopefully clean \nup any cookies in the person's browser. If the person blocks  third-party cookies \nin their browser, logout will not work.  Request:  {\n    \"command\":\"get_logout_uri\",\n    \"params\": {\n        \"oxd_id\":\"6F9619FF-8B86-D011-B42D-00CF4FC964FF\",\n        \"id_token_hint\": \"eyJ0 ... NiJ9.eyJ1c ... I6IjIifX0.DeWt4Qu ... ZXso\",<-- OPTIONAL (oxd server will use last used ID Token)\n        \"post_logout_redirect_uri\": \"<post logout redirect uri here>\",        <-- OPTIONAL\n        \"state\": \"<site state>\",                                              <-- OPTIONAL\n        \"session_state\": \"<session state>\"                                    <-- OPTIONAL\n    }\n}  Response:  {\n    \"status\":\"ok\",\n    \"data\":{\n        \"uri\":\"https://<server>/end_session?id_token_hint=<id token>&state=<state>&post_logout_redirect_uri=<...>\"\n    }\n}",
            "title": "Log out URI"
        },
        {
            "location": "/protocol/#uma-resource-server-apis",
            "text": "A client, acting as an  OAuth2 Resource Server ,\nMUST:   Register a protection document (with uma_rs_protect command)  Intercept HTTP call (before actual REST resource call) and check whether it's allowed to proceed with call or reject it according to uma_rs_check_access command response:  Allow access - if response from uma_rs_check_access is \"allowed\" or \"not_protected\" error is returned.  uma_rs_check_access returned \"denied\" with ticket then return back HTTP response     HTTP/1.1 401 Unauthorized\nWWW-Authenticate: UMA realm=\"example\",\n      as_uri=\"https://as.example.com\",\n      ticket=\"016f84e8-f9b9-11e0-bd6f-0021cc6004de\"  - uma_rs_check_access returned \"denied\" without ticket then return back HTTP response  HTTP/1.1 403 Forbidden\nWarning: 199 - \"UMA Authorization Server Unreachable\"",
            "title": "UMA Resource Server API's"
        },
        {
            "location": "/protocol/#uma-rs-protect-resources",
            "text": "Request:  {\n    \"command\":\"uma_rs_protect\",\n    \"params\": {\n        \"oxd_id\":\"6F9619FF-8B86-D011-B42D-00CF4FC964FF\",   <- REQUIRED\n        \"resources\":[        <-  REQUIRED as parameter here we have protection json that describes resources on RS\n            {\n                \"path\":\"/photo\",\n                \"conditions\":[\n                    {\n                        \"httpMethods\":[\"GET\"],\n                        \"scopes\":[\n                            \"http://photoz.example.com/dev/actions/view\"\n                        ]\n                    },\n                    {\n                        \"httpMethods\":[\"PUT\", \"POST\"],\n                        \"scopes\":[\n                            \"http://photoz.example.com/dev/actions/all\",\n                            \"http://photoz.example.com/dev/actions/add\"\n                        ],\n                        \"ticketScopes\":[\n                            \"http://photoz.example.com/dev/actions/add\"\n                        ]\n                    }\n                ]\n            },\n            {\n                \"path\":\"/document\",\n                \"conditions\":[\n                    {\n                        \"httpMethods\":[\"GET\"],\n                        \"scopes\":[\n                            \"http://photoz.example.com/dev/actions/view\"\n                        ]\n                    }\n                ]\n            }\n        ]\n    }\n}  Response:  {\n    \"status\":\"ok\"\n}",
            "title": "UMA RS Protect resources"
        },
        {
            "location": "/protocol/#uma-rs-check-access",
            "text": "Request:  {\n    \"command\":\"uma_rs_check_access\",\n    \"params\": {\n        \"oxd_id\":\"6F9619FF-8B86-D011-B42D-00CF4FC964FF\",\n        \"rpt\":\"eyJ0 ... NiJ9.eyJ1c ... I6IjIifX0.DeWt4Qu ... ZXso\",    <-- REQUIRED RPT or blank value if absent (not send by RP)\n        \"path\":\"<path of resource>\",                                   <-- REQUIRED Path of resource (e.g. http://rs.com/phones), /phones should be passed\n        \"http_method\":\"<http method of RP request>\"                    <-- REQUIRED Http method of RP request (GET, POST, PUT, DELETE)\n    }\n}  Sample of RP request:  GET /users/alice/album/photo HTTP/1.1\nAuthorization: Bearer vF9dft4qmT\nHost: photoz.example.com  Params:  rpt: 'vF9dft4qmT'\npath: /users/alice/album/photo\nhttp_method: GET  Access Granted response:  {\n    \"status\":\"ok\",\n    \"data\":{\n        \"access\":\"granted\"\n    }\n}  Access Denied with ticket response:  {\n    \"status\":\"ok\",\n    \"data\":{\n        \"access\":\"denied\"\n        \"www-authenticate_header\":\"UMA realm=\\\"example\\\",\n                                   as_uri=\\\"https://as.example.com\\\",\n                                   error=\\\"insufficient_scope\\\",\n                                   ticket=\\\"016f84e8-f9b9-11e0-bd6f-0021cc6004de\\\"\",\n        \"ticket\":\"016f84e8-f9b9-11e0-bd6f-0021cc6004de\"\n    }\n}  Access Denied without ticket response:  {\n    \"status\":\"ok\",\n    \"data\":{\n        \"access\":\"denied\"\n    }\n}  Errors:  Resource is not protected  {\n    \"status\":\"error\",\n    \"data\":{\n        \"error\":\"invalid_request\",\n        \"error_description\":\"Resource is not protected. Please protect your resource first with uma_rs_protect command.\"\n    }\n}",
            "title": "UMA RS Check Access"
        },
        {
            "location": "/protocol/#uma-client-apis",
            "text": "If your appliation is calling UMA protected resources, use these API's to obtain an RPT token.",
            "title": "UMA Client API's"
        },
        {
            "location": "/protocol/#uma-rp-get-rpt",
            "text": "For latest and most up to date parameters of command please check \nlatest successful  jenkins build  Request:  {\n    \"command\":\"uma_rp_get_rpt\",\n    \"params\": {\n         \"oxd_id\":\"6F9619FF-8B86-D011-B42D-00CF4FC964FF\",  <- REQUIRED\n         \"force_new\": false                                <- REQUIRED indicates whether return new RPT, in general should be false, so oxd server can cache/reuse same RPT\n    }\n}  Response:  {\n     \"status\":\"ok\",\n     \"data\":{\n         \"rpt\":\"vF9dft4qmT\"\n     }\n}",
            "title": "UMA RP - Get RPT"
        },
        {
            "location": "/protocol/#uma-rp-authorize-rpt",
            "text": "Request:  {\n    \"command\":\"uma_rp_authorize_rpt\",\n    \"params\": {\n         \"oxd_id\":\"6F9619FF-8B86-D011-B42D-00CF4FC964FF\",  <- REQUIRED\n         \"rpt\": \"vF9dft4qmT\",                              <- REQUIRED\n         \"ticket\": \"016f84e8-f9b9-11e0-bd6f-0021cc6004de\"  <- REQUIRED\n    }\n}  Authorized Response (Success):  {\n     \"status\":\"ok\",\n}  Not authorized error:  {\n    \"status\":\"error\",\n    \"data\":{\n        \"code\":\"not_authorized\",\n        \"description\":\"RPT is not authorized.\"\n    }\n}  Invalid ticket error:  {\n    \"status\":\"error\",\n    \"data\":{\n        \"code\":\"invalid_ticket\",\n        \"description\":\"Ticket is not valid (outdated or not present on Authorization Server).\"\n    }\n}  Invalid rpt error:  {\n    \"status\":\"error\",\n    \"data\":{\n        \"code\":\"invalid_rpt\",\n        \"description\":\"RPT is not valid (outdated or not present on Authorization Server).\"\n    }\n}",
            "title": "UMA RP - Authorize RPT"
        },
        {
            "location": "/protocol/#gluu-oauth2-access-management-apis",
            "text": "GAT stands for Gluu Access Token. It is invented by Gluu and is described here: \nhttps://ox.gluu.org/doku.php?id=uma:oauth2_access_management.  Request:  {\n    \"command\":\"uma_rp_get_gat\",\n    \"params\": {\n         \"oxd_id\":\"6F9619FF-8B86-D011-B42D-00CF4FC964FF\",  <- REQUIRED\n         \"scopes\": [                                       <- REQUIRED RP should know required scopes in advance\n             \"http://photoz.example.com/dev/actions/add\",\n             \"http://photoz.example.com/dev/actions/view\",\n             \"http://photoz.example.com/dev/actions/edit\"\n         ]\n    }\n}  Response:  {\n     \"status\":\"ok\",\n     \"data\":{\n         \"rpt\":\"fg6vF9dft4qmT\"\n     }\n}",
            "title": "Gluu OAuth2 Access Management API's"
        },
        {
            "location": "/protocol/#references",
            "text": "UMA 1.0.1 Specification  Sample RS of Java Resteasy HTTP interceptor of uma-rs",
            "title": "References"
        },
        {
            "location": "/install/",
            "text": "oxd Server Installation/Configuration\n#\n\n\nThe easiest way to install oxd is to use one of the Linux packages.\n\n\nUbuntu 14.04(trusty)\n#\n\n\n# echo \"deb https://repo.gluu.org/ubuntu/ trusty main\" > /etc/apt/sources.list.d/gluu-repo.list\n# curl https://repo.gluu.org/ubuntu/gluu-apt.key | apt-key add -\n# apt-get update\n# apt-get install gluu-oxd-server\n# service gluu-oxd-server start\n\n\n\n\nUbuntu 16.04(xenial)\n#\n\n\necho \"deb https://repo.gluu.org/ubuntu/ xenial main\" > /etc/apt/sources.list.d/gluu-repo.list\ncurl https://repo.gluu.org/ubuntu/gluu-apt.key | apt-key add -\napt-get update\napt-get install gluu-oxd-server\nservice gluu-oxd-server start\n\n\n\n\nDebian 8 (Jessie)\n#\n\n\necho \"deb https://repo.gluu.org/debian/ jessie main\" > /etc/apt/sources.list.d/gluu-repo.list\ncurl https://repo.gluu.org/debian/gluu-apt.key | apt-key add -\napt-get update\napt-get install gluu-oxd-server\nservice gluu-oxd-server start\n\n\n\n\nCentOS 6\n#\n\n\n# wget https://repo.gluu.org/centos/Gluu-centos6.repo -O /etc/yum.repos.d/Gluu.repo\n# wget https://repo.gluu.org/centos/RPM-GPG-KEY-GLUU -O /etc/pki/rpm-gpg/RPM-GPG-KEY-GLUU\n# rpm --import /etc/pki/rpm-gpg/RPM-GPG-KEY-GLUU\n# yum clean all\n# yum install gluu-oxd-server\n# service gluu-oxd-server start\n\n\n\n\nCentOS 7\n#\n\n\n# wget https://repo.gluu.org/centos/Gluu-centos7.repo -O /etc/yum.repos.d/Gluu.repo\n# wget https://repo.gluu.org/centos/RPM-GPG-KEY-GLUU -O /etc/pki/rpm-gpg/RPM-GPG-KEY-GLUU\n# rpm --import /etc/pki/rpm-gpg/RPM-GPG-KEY-GLUU\n# yum clean all\n# yum install gluu-oxd-server\n# service gluu-oxd-server start\n\n\n\n\nRHEL 6\n#\n\n\n# wget https://repo.gluu.org/rhel/Gluu-rhel6.repo -O /etc/yum.repos.d/Gluu.repo\n# wget https://repo.gluu.org/rhel/RPM-GPG-KEY-GLUU -O /etc/pki/rpm-gpg/RPM-GPG-KEY-GLUU\n# rpm --import /etc/pki/rpm-gpg/RPM-GPG-KEY-GLUU\n# yum clean all\n# yum install gluu-oxd-server\n# service gluu-oxd-server start\n\n\n\n\nRHEL 7\n#\n\n\nwget https://repo.gluu.org/rhel/Gluu-rhel7.repo -O /etc/yum.repos.d/Gluu.repo\nwget https://repo.gluu.org/rhel/RPM-GPG-KEY-GLUU -O /etc/pki/rpm-gpg/RPM-GPG-KEY-GLUU\nrpm --import /etc/pki/rpm-gpg/RPM-GPG-KEY-GLUU\nyum clean all\nyum install gluu-oxd-server\nservice gluu-oxd-server start\n\n\n\n\nManual installation\n#\n\n\nIf you don't want to use one of the Unix packages, oxd is pretty easy to install. It requires\nJava version 1.7 or higher. But otherwise it's self-contained, and you can just unzip the folder \nand run it.\n\n\nIt is not necessary to install oxd in Windows, it can be downloaded and run. The \noxd Server\n is \navailable for download from \nmaven repository\n.\n\n\nWindows\n#\n\n\n\n\n\n\nMake a folder called \noxd-server\n (or whatever you like)\n\n\n\n\n\n\nUnzip the \nzip distribution\n\nin the above folder you just created.\n\n\n\n\n\n\nRun \noxd-server/bin/oxd-start.bat\n\n\n\n\n\n\nUnix\n#\n\n\n\n\n\n\nMake a folder called \noxd-server\n (or whatever you like), and \ncd\n to this folder\n\n\n\n\n\n\n$ wget http://ox.gluu.org/maven/org/xdi/oxd-server/3.0.1/oxd-server-3.0.1-distribution.zip\n\n\n\n\n\n\n$ unzip oxd-server-3.0.1-distribution.zip\n\n\n\n\n\n\n$ nohup bin/oxd-start.sh &\n\n\n\n\n\n\nManual Build oxd Server\n#\n\n\nIf you're a Java geek, oxd server can be built using \nMaven\n.\n\n\nThe code is available in \nGithub\n. A zip file can be \ndownloaded directly from \nthis link\n. \n\n\nThe following command can be run inside the oxd folder to run the build:\n\n\n  $ mvn clean package",
            "title": "Installation"
        },
        {
            "location": "/install/#oxd-server-installationconfiguration",
            "text": "The easiest way to install oxd is to use one of the Linux packages.",
            "title": "oxd Server Installation/Configuration"
        },
        {
            "location": "/install/#ubuntu-1404trusty",
            "text": "# echo \"deb https://repo.gluu.org/ubuntu/ trusty main\" > /etc/apt/sources.list.d/gluu-repo.list\n# curl https://repo.gluu.org/ubuntu/gluu-apt.key | apt-key add -\n# apt-get update\n# apt-get install gluu-oxd-server\n# service gluu-oxd-server start",
            "title": "Ubuntu 14.04(trusty)"
        },
        {
            "location": "/install/#ubuntu-1604xenial",
            "text": "echo \"deb https://repo.gluu.org/ubuntu/ xenial main\" > /etc/apt/sources.list.d/gluu-repo.list\ncurl https://repo.gluu.org/ubuntu/gluu-apt.key | apt-key add -\napt-get update\napt-get install gluu-oxd-server\nservice gluu-oxd-server start",
            "title": "Ubuntu 16.04(xenial)"
        },
        {
            "location": "/install/#debian-8-jessie",
            "text": "echo \"deb https://repo.gluu.org/debian/ jessie main\" > /etc/apt/sources.list.d/gluu-repo.list\ncurl https://repo.gluu.org/debian/gluu-apt.key | apt-key add -\napt-get update\napt-get install gluu-oxd-server\nservice gluu-oxd-server start",
            "title": "Debian 8 (Jessie)"
        },
        {
            "location": "/install/#centos-6",
            "text": "# wget https://repo.gluu.org/centos/Gluu-centos6.repo -O /etc/yum.repos.d/Gluu.repo\n# wget https://repo.gluu.org/centos/RPM-GPG-KEY-GLUU -O /etc/pki/rpm-gpg/RPM-GPG-KEY-GLUU\n# rpm --import /etc/pki/rpm-gpg/RPM-GPG-KEY-GLUU\n# yum clean all\n# yum install gluu-oxd-server\n# service gluu-oxd-server start",
            "title": "CentOS 6"
        },
        {
            "location": "/install/#centos-7",
            "text": "# wget https://repo.gluu.org/centos/Gluu-centos7.repo -O /etc/yum.repos.d/Gluu.repo\n# wget https://repo.gluu.org/centos/RPM-GPG-KEY-GLUU -O /etc/pki/rpm-gpg/RPM-GPG-KEY-GLUU\n# rpm --import /etc/pki/rpm-gpg/RPM-GPG-KEY-GLUU\n# yum clean all\n# yum install gluu-oxd-server\n# service gluu-oxd-server start",
            "title": "CentOS 7"
        },
        {
            "location": "/install/#rhel-6",
            "text": "# wget https://repo.gluu.org/rhel/Gluu-rhel6.repo -O /etc/yum.repos.d/Gluu.repo\n# wget https://repo.gluu.org/rhel/RPM-GPG-KEY-GLUU -O /etc/pki/rpm-gpg/RPM-GPG-KEY-GLUU\n# rpm --import /etc/pki/rpm-gpg/RPM-GPG-KEY-GLUU\n# yum clean all\n# yum install gluu-oxd-server\n# service gluu-oxd-server start",
            "title": "RHEL 6"
        },
        {
            "location": "/install/#rhel-7",
            "text": "wget https://repo.gluu.org/rhel/Gluu-rhel7.repo -O /etc/yum.repos.d/Gluu.repo\nwget https://repo.gluu.org/rhel/RPM-GPG-KEY-GLUU -O /etc/pki/rpm-gpg/RPM-GPG-KEY-GLUU\nrpm --import /etc/pki/rpm-gpg/RPM-GPG-KEY-GLUU\nyum clean all\nyum install gluu-oxd-server\nservice gluu-oxd-server start",
            "title": "RHEL 7"
        },
        {
            "location": "/install/#manual-installation",
            "text": "If you don't want to use one of the Unix packages, oxd is pretty easy to install. It requires\nJava version 1.7 or higher. But otherwise it's self-contained, and you can just unzip the folder \nand run it.  It is not necessary to install oxd in Windows, it can be downloaded and run. The  oxd Server  is \navailable for download from  maven repository .",
            "title": "Manual installation"
        },
        {
            "location": "/install/#windows",
            "text": "Make a folder called  oxd-server  (or whatever you like)    Unzip the  zip distribution \nin the above folder you just created.    Run  oxd-server/bin/oxd-start.bat",
            "title": "Windows"
        },
        {
            "location": "/install/#unix",
            "text": "Make a folder called  oxd-server  (or whatever you like), and  cd  to this folder    $ wget http://ox.gluu.org/maven/org/xdi/oxd-server/3.0.1/oxd-server-3.0.1-distribution.zip    $ unzip oxd-server-3.0.1-distribution.zip    $ nohup bin/oxd-start.sh &",
            "title": "Unix"
        },
        {
            "location": "/install/#manual-build-oxd-server",
            "text": "If you're a Java geek, oxd server can be built using  Maven .  The code is available in  Github . A zip file can be \ndownloaded directly from  this link .   The following command can be run inside the oxd folder to run the build:    $ mvn clean package",
            "title": "Manual Build oxd Server"
        },
        {
            "location": "/conf/",
            "text": "Configuration\n#\n\n\noxD configuration consists of two files :\n\n\n\n\nconf/oxd-conf.json\n - general configuration\n\n\nconf/oxd-default-site-config.json\n - fallback configuration for \"Register site\" command, see details on \n\nProtocol page\n\n\n\n\noxd-conf.json\n#\n\n\nThe contents of the configuration file is as follows:\n\n\noxd-conf.json\n{\n    \"port\":8099,\n    \"localhost_only\":true,\n    \"time_out_in_seconds\":0,\n    \"use_client_authentication_for_pat\":true,\n    \"use_client_authentication_for_aat\":true,\n    \"trust_all_certs\":true,\n    \"trust_store_path\":\"\",\n    \"trust_store_password\":\"\",\n    \"license_id\":\"\",\n    \"public_key\":\"\",\n    \"public_password\":\"\",\n    \"license_password\":\"\"\n}\n\n\n\n\n\n\nport - oxD socket port\n\n\nlocalhost_only - flag to restrict communication\n\n\ntime_out_in_seconds - time out for oxd socket in seconds. oxd closes sockets automatically after this time out (stops listen commands). Zero means listen indefinitely.\n\n\nuse_client_authentication_for_pat - true if client authentication is required, if false than user authentication is performed which require user_id and user_secret specified during register_site command.\n\n\nuse_client_authentication_for_aat - true if client authentication is required, if false than user authentication is performed which require user_id and user_secret specified during register_site command.\n\n\ntrust_all_certs - true to trust all certificates, if false then trust_store_path must be specified to store with valid certificates\n\n\ntrust_store_path - Path to Java .jks trust store to be used for an SSL connection.\n\n\ntrust_store_password - password of trust store\n\n\nlicense_id - Will be supplied when you order a license.\n\n\npublic_key - Will be supplied when you order a license. It's very big--make sure you it's one line with no spaces (if your mail client added line breaks).\n\n\npublic_password - Will be supplied when you order a license.\n\n\nlicense_password - Will be supplied when you order a license.\n\n\n\n\noxd-default-site-config.json\n#\n\n\nconf/oxd-default-site-config.json\n{\n    \"op_host\":\"\",\n    \"authorization_redirect_uri\":\"\",\n    \"post_logout_redirect_uri\":\"\",\n    \"response_types\":[\"code\"],\n    \"grant_type\":[\"authorization_code\"],\n    \"acr_values\":[\"basic\"],\n    \"scope\":[\"openid\", \"profile\"],\n    \"ui_locales\":[\"en\"],\n    \"claims_locales\":[\"en\"],\n    \"client_jwks_uri\":\"\",\n    \"contacts\":[]\n}\n\n\n\n\n\n\nop_host - must point to a valid \n\nGluu Server CE installation\n. (Sample : \"op_host\":\"https://idp.example.org\")\n\n\nauthorization_redirect_uri - URL that the OpenID Connect Provider (OP) will redirect the person to after  successful authentication\n\n\npost_logout_redirect_uri - URL to which the RP is requesting that the End-User's User Agent be redirected after a logout has been performed\n\n\nresponse_types - JSON array containing a list of the OAuth 2.0 response_type values that the site is declaring that it will restrict itself to using\n\n\ngrant_type - JSON array containing a list of the OAuth 2.0 Grant Types that the Client is declaring that it will restrict itself to using\n\n\nacr_values - specified authentication method (basic, duo, u2f)\n\n\nscope - JSON array containing a list of the scopes that the Client is declaring that it will restrict itself to using\n\n\nui_locales - End-User's preferred languages and scripts for the user interface, represented as a space-separated list of BCP47 [RFC5646] language tag values, ordered by preference\n\n\nclaims_locales - End-User's preferred languages and scripts for Claims being returned, represented as a space-separated list of BCP47 [RFC5646] language tag values, ordered by preference\n\n\ncontacts - array of e-mail addresses of people responsible for this Client",
            "title": "Configuration"
        },
        {
            "location": "/conf/#configuration",
            "text": "oxD configuration consists of two files :   conf/oxd-conf.json  - general configuration  conf/oxd-default-site-config.json  - fallback configuration for \"Register site\" command, see details on  Protocol page",
            "title": "Configuration"
        },
        {
            "location": "/conf/#oxd-confjson",
            "text": "The contents of the configuration file is as follows:  oxd-conf.json\n{\n    \"port\":8099,\n    \"localhost_only\":true,\n    \"time_out_in_seconds\":0,\n    \"use_client_authentication_for_pat\":true,\n    \"use_client_authentication_for_aat\":true,\n    \"trust_all_certs\":true,\n    \"trust_store_path\":\"\",\n    \"trust_store_password\":\"\",\n    \"license_id\":\"\",\n    \"public_key\":\"\",\n    \"public_password\":\"\",\n    \"license_password\":\"\"\n}   port - oxD socket port  localhost_only - flag to restrict communication  time_out_in_seconds - time out for oxd socket in seconds. oxd closes sockets automatically after this time out (stops listen commands). Zero means listen indefinitely.  use_client_authentication_for_pat - true if client authentication is required, if false than user authentication is performed which require user_id and user_secret specified during register_site command.  use_client_authentication_for_aat - true if client authentication is required, if false than user authentication is performed which require user_id and user_secret specified during register_site command.  trust_all_certs - true to trust all certificates, if false then trust_store_path must be specified to store with valid certificates  trust_store_path - Path to Java .jks trust store to be used for an SSL connection.  trust_store_password - password of trust store  license_id - Will be supplied when you order a license.  public_key - Will be supplied when you order a license. It's very big--make sure you it's one line with no spaces (if your mail client added line breaks).  public_password - Will be supplied when you order a license.  license_password - Will be supplied when you order a license.",
            "title": "oxd-conf.json"
        },
        {
            "location": "/conf/#oxd-default-site-configjson",
            "text": "conf/oxd-default-site-config.json\n{\n    \"op_host\":\"\",\n    \"authorization_redirect_uri\":\"\",\n    \"post_logout_redirect_uri\":\"\",\n    \"response_types\":[\"code\"],\n    \"grant_type\":[\"authorization_code\"],\n    \"acr_values\":[\"basic\"],\n    \"scope\":[\"openid\", \"profile\"],\n    \"ui_locales\":[\"en\"],\n    \"claims_locales\":[\"en\"],\n    \"client_jwks_uri\":\"\",\n    \"contacts\":[]\n}   op_host - must point to a valid  Gluu Server CE installation . (Sample : \"op_host\":\"https://idp.example.org\")  authorization_redirect_uri - URL that the OpenID Connect Provider (OP) will redirect the person to after  successful authentication  post_logout_redirect_uri - URL to which the RP is requesting that the End-User's User Agent be redirected after a logout has been performed  response_types - JSON array containing a list of the OAuth 2.0 response_type values that the site is declaring that it will restrict itself to using  grant_type - JSON array containing a list of the OAuth 2.0 Grant Types that the Client is declaring that it will restrict itself to using  acr_values - specified authentication method (basic, duo, u2f)  scope - JSON array containing a list of the scopes that the Client is declaring that it will restrict itself to using  ui_locales - End-User's preferred languages and scripts for the user interface, represented as a space-separated list of BCP47 [RFC5646] language tag values, ordered by preference  claims_locales - End-User's preferred languages and scripts for Claims being returned, represented as a space-separated list of BCP47 [RFC5646] language tag values, ordered by preference  contacts - array of e-mail addresses of people responsible for this Client",
            "title": "oxd-default-site-config.json"
        },
        {
            "location": "/logs/",
            "text": "Logs\n#\n\n\nLogs are written into the working directory in \noxd Server\n by default. \nCustom log locations can be specified in \nlog4j.xml.\n The file is \nloaded using the \nlog4j.configuration\n system property. The following \nis an example for running the \noxd Server\n with \nlog4j\n with the file \nlocated in \nC:\\tmp\\test\\log4j.xml\n.\n\n\n# java -cp resteasy-jaxrs-2.3.4.Final.jar;oxd-server-1.0-SNAPSHOT-jar-with-dependencies.jar org.xdi.oxd.server.ServerLauncher -Doxd.server.config=C:\\tmp\\oxd.json -Dlog4j.configuration=C:\\tmp\\test\\log4j.xml\n\n\n\n\nThe following is an example of \nlog4j.xml\n file:\n\n\n<?xml version=\"1.0\" encoding=\"UTF-8\"?><!DOCTYPE log4j:configuration SYSTEM \"log4j.dtd\">\n\n<log4j:configuration xmlns:log4j=\"http://jakarta.apache.org/log4j/\" debug=\"false\">\n\n    <appender name=\"CONSOLE\" class=\"org.apache.log4j.ConsoleAppender\">\n        <layout class=\"org.apache.log4j.PatternLayout\">\n            <!-- The default pattern: Date Priority [Category] Message\\n -->\n            <param name=\"ConversionPattern\" value=\"%d %-5p [%c] %m%n\"/>\n        </layout>\n    </appender>\n\n    <appender name=\"FILE\" class=\"org.apache.log4j.DailyRollingFileAppender\">\n        <param name=\"File\" value=\"C:\\\\tmp\\\\test\\\\oxd-server.log\"/>\n        <param name=\"DatePattern\" value=\"'.'yyyy-MM-dd\"/>\n        <param name=\"BufferSize\" value=\"1000\"/>\n        <layout class=\"org.apache.log4j.PatternLayout\">\n            <!-- The default pattern: Date Priority [Category] Message\\n -->\n            <param name=\"ConversionPattern\" value=\"%d %-5p [%c] %m%n\"/>\n        </layout>\n    </appender>\n\n    <category name=\"org.xdi\">\n        <priority value=\"TRACE\"/>\n    </category>\n\n    <root>\n        <priority value=\"INFO\"/>\n        <appender-ref ref=\"FILE\"/>\n        <appender-ref ref=\"CONSOLE\"/>\n    </root>\n\n</log4j:configuration>",
            "title": "Logs"
        },
        {
            "location": "/logs/#logs",
            "text": "Logs are written into the working directory in  oxd Server  by default. \nCustom log locations can be specified in  log4j.xml.  The file is \nloaded using the  log4j.configuration  system property. The following \nis an example for running the  oxd Server  with  log4j  with the file \nlocated in  C:\\tmp\\test\\log4j.xml .  # java -cp resteasy-jaxrs-2.3.4.Final.jar;oxd-server-1.0-SNAPSHOT-jar-with-dependencies.jar org.xdi.oxd.server.ServerLauncher -Doxd.server.config=C:\\tmp\\oxd.json -Dlog4j.configuration=C:\\tmp\\test\\log4j.xml  The following is an example of  log4j.xml  file:  <?xml version=\"1.0\" encoding=\"UTF-8\"?><!DOCTYPE log4j:configuration SYSTEM \"log4j.dtd\">\n\n<log4j:configuration xmlns:log4j=\"http://jakarta.apache.org/log4j/\" debug=\"false\">\n\n    <appender name=\"CONSOLE\" class=\"org.apache.log4j.ConsoleAppender\">\n        <layout class=\"org.apache.log4j.PatternLayout\">\n            <!-- The default pattern: Date Priority [Category] Message\\n -->\n            <param name=\"ConversionPattern\" value=\"%d %-5p [%c] %m%n\"/>\n        </layout>\n    </appender>\n\n    <appender name=\"FILE\" class=\"org.apache.log4j.DailyRollingFileAppender\">\n        <param name=\"File\" value=\"C:\\\\tmp\\\\test\\\\oxd-server.log\"/>\n        <param name=\"DatePattern\" value=\"'.'yyyy-MM-dd\"/>\n        <param name=\"BufferSize\" value=\"1000\"/>\n        <layout class=\"org.apache.log4j.PatternLayout\">\n            <!-- The default pattern: Date Priority [Category] Message\\n -->\n            <param name=\"ConversionPattern\" value=\"%d %-5p [%c] %m%n\"/>\n        </layout>\n    </appender>\n\n    <category name=\"org.xdi\">\n        <priority value=\"TRACE\"/>\n    </category>\n\n    <root>\n        <priority value=\"INFO\"/>\n        <appender-ref ref=\"FILE\"/>\n        <appender-ref ref=\"CONSOLE\"/>\n    </root>\n\n</log4j:configuration>",
            "title": "Logs"
        },
        {
            "location": "/libraries/api-client-libraries/",
            "text": "oxd API Client Libraries\n#\n\n\nWritten for client-application developers, the oxd client libraries provide simple, flexible, powerful access to the oxd OpenID Connect and UMA authentication and authorization APIs.\n\n\nProgramming Languages\n#\n\n\n\n\nPython\n\n\nJava\n\n\nPhp\n\n\nNode\n\n\nRuby\n\n\nC#\n\n\nPerl\n\n\nGo\n\n\n\n\nProgramming Frameworks\n#\n\n\n\n\nspring\n\n\nJava Play\n\n\nRails\n\n\nFlask\n\n\nNode/Express\n\n\n.net",
            "title": "Overview-oxd API Client Libraries"
        },
        {
            "location": "/libraries/api-client-libraries/#oxd-api-client-libraries",
            "text": "Written for client-application developers, the oxd client libraries provide simple, flexible, powerful access to the oxd OpenID Connect and UMA authentication and authorization APIs.",
            "title": "oxd API Client Libraries"
        },
        {
            "location": "/libraries/api-client-libraries/#programming-languages",
            "text": "Python  Java  Php  Node  Ruby  C#  Perl  Go",
            "title": "Programming Languages"
        },
        {
            "location": "/libraries/api-client-libraries/#programming-frameworks",
            "text": "spring  Java Play  Rails  Flask  Node/Express  .net",
            "title": "Programming Frameworks"
        },
        {
            "location": "/libraries/python/",
            "text": "oxd Python\n#\n\n\nOverview\n#\n\n\nThe following documentation demonstrates \nhow to use Gluu's commercial OAuth 2.0 client software, \noxd\n, \nto send users from a Python app to an OpenID Connect Provider (OP) for login. You can \nsecurely send users to any standard OP for login, including Google and \nthe \nfree open source Gluu Server\n.\n\n\nInstallation\n#\n\n\nPrerequisites\n#\n\n\n\n\nPython 2.7\n\n\nGluu oxd Server - \nInstallation docs\n\n\n\n\nLibrary\n#\n\n\n\n\nInstall via pip\n\n\n\n\npip install oxdpython\n\n\n\n\n\n\nSource from Github\n -  Download the zip of the oxD Python Library from \n\nhere\n and unzip to your location of choice\n\n\n\n\ncd oxdpython-version\npython setup.py install\n\n\n\n\nImportant Links\n#\n\n\n\n\nSee the \nAPI docs\n for in-depth information about \nthe various functions and their parameters.\n\n\nSee the code of a \nsample Flask app\n built using oxd-python.\n\n\nBrowse the source code is hosted in Github \nhere\n.\n\n\n\n\nConfiguration\n#\n\n\nThis library uses a configuration file to specify information needed\nby OpenID Connect dynamic client registration, and to save information \nthat is returned, like the client id. So the config file needs to be \n\nwritable by the app\n.\n\n\nThe minimal configuration required to get oxd-python working:\n\n\n[oxd]\nhost = localhost\nport = 8099\n\n[client]\nauthorization_redirect_uri=https://your.site.org/callback\n\n\n\n\n!!!\nNote:\n \n    The \nsample.cfg\n\nfile contains detailed documentation about the configuration values.\n\n\nSample Code\n#\n\n\nWebsite Registration\n#\n\n\nfrom oxdpython import Client\n\nconfig = \"/var/www/demosite/demosite.cfg\"  # This should be writable by the server\nclient = Client(config)\nclient.register_site()\n\n\n\n\n!!!\nNote:\n \n    \nregister_site()\n can be skipped as any \nget_authorization_url()\n\nautomatically registers the site.\n\n\nGet Authorization URL\n#\n\n\nauth_url = client.get_authorization_url()\n\n\n\n\nGet Tokens\n#\n\n\n# code = parse_callback_url_querystring()  # Refer your web framework\ntokens = client.get_tokens_by_code(code)\n\n\n\n\nGet User Claims\n#\n\n\nuser = oxc.get_user_info(tokens.access_token)\n\n# The claims can be accessed using the dot notation.\nprint user.username\nprint user.website\n\nprint user._fields  # to print all the fields\n\n# to check for a particular field and get the information\nif 'website' in user._fields:\n    print user.website\n\n\n\n\nLogout\n#\n\n\nlogout_uri = oxc.get_logout_uri()\n\n\n\n\nUpdate Site\n#\n\n\nclient.config.set('client', 'post_logout_uri', 'https://client.example.org/post_logout')\n\n# ensure lists are converted to comma sperated string\nscopes = ','.join(['openid','profile','uma_protection'])\nclient.config.set('client', 'scope', scopes)\n\nclient.update_site_registration()\n\n\n\n\nUMA RS Protect\n#\n\n\n# define the resource\nresources = [{\"path\": \"/photo\",\n              \"conditions\": [\n                {\n                    \"httpMethods\": [\"GET\"],\n                    \"scopes\": [\"http://photoz.example.com/dev/actions/view\"]\n                 }]\n            }]\n\nresult = client.uma_rs_protect(resources)\n\n\n\n\nUMA RS Check Access\n#\n\n\nrpt = 'lsjdfa-sfas234s'\npath = '/photo'\nhttp_method = 'GET'\n\nresponse = client.uma_rs_check_access(rpt, path, http_method)\n\n\n\n\nUMA RP Get RPT\n#\n\n\nrpt = client.uma_rp_get_rpt()\n\n# To force a new RPT\nrpt = client.uma_rp_get_rpt(True)\n\n\n\n\nUMA RP Authorize RPT\n#\n\n\nrpt = 'rpt-token-string'\nticket = 'ticket-value-as-string'\n\nresponse = client.uma_rp_authorize_rpt(rpt, ticket)\n\n\n\n\nUMA RP Get GAT\n#\n\n\nscopes = [\"http://photoz.example.com/dev/actions/add\",\n          \"http://photoz.example.com/dev/actions/view\"\n          ]\n\ngat = client.uma_rp_get_gat(scopes)",
            "title": "Python"
        },
        {
            "location": "/libraries/python/#oxd-python",
            "text": "",
            "title": "oxd Python"
        },
        {
            "location": "/libraries/python/#overview",
            "text": "The following documentation demonstrates \nhow to use Gluu's commercial OAuth 2.0 client software,  oxd , \nto send users from a Python app to an OpenID Connect Provider (OP) for login. You can \nsecurely send users to any standard OP for login, including Google and \nthe  free open source Gluu Server .",
            "title": "Overview"
        },
        {
            "location": "/libraries/python/#installation",
            "text": "",
            "title": "Installation"
        },
        {
            "location": "/libraries/python/#prerequisites",
            "text": "Python 2.7  Gluu oxd Server -  Installation docs",
            "title": "Prerequisites"
        },
        {
            "location": "/libraries/python/#library",
            "text": "Install via pip   pip install oxdpython   Source from Github  -  Download the zip of the oxD Python Library from  here  and unzip to your location of choice   cd oxdpython-version\npython setup.py install",
            "title": "Library"
        },
        {
            "location": "/libraries/python/#important-links",
            "text": "See the  API docs  for in-depth information about \nthe various functions and their parameters.  See the code of a  sample Flask app  built using oxd-python.  Browse the source code is hosted in Github  here .",
            "title": "Important Links"
        },
        {
            "location": "/libraries/python/#configuration",
            "text": "This library uses a configuration file to specify information needed\nby OpenID Connect dynamic client registration, and to save information \nthat is returned, like the client id. So the config file needs to be  writable by the app .  The minimal configuration required to get oxd-python working:  [oxd]\nhost = localhost\nport = 8099\n\n[client]\nauthorization_redirect_uri=https://your.site.org/callback  !!! Note:  \n    The  sample.cfg \nfile contains detailed documentation about the configuration values.",
            "title": "Configuration"
        },
        {
            "location": "/libraries/python/#sample-code",
            "text": "",
            "title": "Sample Code"
        },
        {
            "location": "/libraries/python/#website-registration",
            "text": "from oxdpython import Client\n\nconfig = \"/var/www/demosite/demosite.cfg\"  # This should be writable by the server\nclient = Client(config)\nclient.register_site()  !!! Note:  \n     register_site()  can be skipped as any  get_authorization_url() \nautomatically registers the site.",
            "title": "Website Registration"
        },
        {
            "location": "/libraries/python/#get-authorization-url",
            "text": "auth_url = client.get_authorization_url()",
            "title": "Get Authorization URL"
        },
        {
            "location": "/libraries/python/#get-tokens",
            "text": "# code = parse_callback_url_querystring()  # Refer your web framework\ntokens = client.get_tokens_by_code(code)",
            "title": "Get Tokens"
        },
        {
            "location": "/libraries/python/#get-user-claims",
            "text": "user = oxc.get_user_info(tokens.access_token)\n\n# The claims can be accessed using the dot notation.\nprint user.username\nprint user.website\n\nprint user._fields  # to print all the fields\n\n# to check for a particular field and get the information\nif 'website' in user._fields:\n    print user.website",
            "title": "Get User Claims"
        },
        {
            "location": "/libraries/python/#logout",
            "text": "logout_uri = oxc.get_logout_uri()",
            "title": "Logout"
        },
        {
            "location": "/libraries/python/#update-site",
            "text": "client.config.set('client', 'post_logout_uri', 'https://client.example.org/post_logout')\n\n# ensure lists are converted to comma sperated string\nscopes = ','.join(['openid','profile','uma_protection'])\nclient.config.set('client', 'scope', scopes)\n\nclient.update_site_registration()",
            "title": "Update Site"
        },
        {
            "location": "/libraries/python/#uma-rs-protect",
            "text": "# define the resource\nresources = [{\"path\": \"/photo\",\n              \"conditions\": [\n                {\n                    \"httpMethods\": [\"GET\"],\n                    \"scopes\": [\"http://photoz.example.com/dev/actions/view\"]\n                 }]\n            }]\n\nresult = client.uma_rs_protect(resources)",
            "title": "UMA RS Protect"
        },
        {
            "location": "/libraries/python/#uma-rs-check-access",
            "text": "rpt = 'lsjdfa-sfas234s'\npath = '/photo'\nhttp_method = 'GET'\n\nresponse = client.uma_rs_check_access(rpt, path, http_method)",
            "title": "UMA RS Check Access"
        },
        {
            "location": "/libraries/python/#uma-rp-get-rpt",
            "text": "rpt = client.uma_rp_get_rpt()\n\n# To force a new RPT\nrpt = client.uma_rp_get_rpt(True)",
            "title": "UMA RP Get RPT"
        },
        {
            "location": "/libraries/python/#uma-rp-authorize-rpt",
            "text": "rpt = 'rpt-token-string'\nticket = 'ticket-value-as-string'\n\nresponse = client.uma_rp_authorize_rpt(rpt, ticket)",
            "title": "UMA RP Authorize RPT"
        },
        {
            "location": "/libraries/python/#uma-rp-get-gat",
            "text": "scopes = [\"http://photoz.example.com/dev/actions/add\",\n          \"http://photoz.example.com/dev/actions/view\"\n          ]\n\ngat = client.uma_rp_get_gat(scopes)",
            "title": "UMA RP Get GAT"
        },
        {
            "location": "/libraries/java/",
            "text": "oxd Java\n#\n\n\nOverview\n#\n\n\nThe following documentation demonstrates how to use Gluu's commercial OAuth 2.0 client software, \noxd\n, to send users from a Java app to an OpenID Connect Provider (OP) for login. You can securely send users to any standard OP for login, including Google and the \nfree open source Gluu Server\n.\n\n\nInstallation\n#\n\n\n\n\nGithub sources\n\n\nJar files are available on the \nMaven repo\n\n\nJenkins build server\n\n\nTests on github\n\n\nAPI Documentation (Javadocs)\n\n\n\n\nConfiguration\n#\n\n\nThere are no configuration files for oxd-java. Redirect URI and\nother information is set in the code.\n\n\nSample code\n#\n\n\nRegister\n#\n\n\n CommandClient client = null;\n try {\n     client = new CommandClient(host, port);\n\n     final RegisterSiteParams commandParams = new RegisterSiteParams();\n     commandParams.setOpHost(opHost);\n     commandParams.setAuthorizationRedirectUri(redirectUrl);\n     commandParams.setPostLogoutRedirectUri(postLogoutRedirectUrl);\n     commandParams.setClientLogoutUri(Lists.newArrayList(logoutUri));\n     commandParams.setScope(Lists.newArrayList(\"openid\", \"uma_protection\", \"uma_authorization\"));\n\n     final Command command = new Command(CommandType.REGISTER_SITE);\n     command.setParamsObject(commandParams);\n\n     final RegisterSiteResponse site = client.send(command).dataAsResponse(RegisterSiteResponse.class);\n\n     // more code here\n } finally {\n     CommandClient.closeQuietly(client);\n }\n\n\n\n\nGet Authorization URL\n#\n\n\nfinal GetAuthorizationUrlParams commandParams = new GetAuthorizationUrlParams();\ncommandParams.setOxdId(site.getOxdId());\n\nfinal Command command = new Command(CommandType.GET_AUTHORIZATION_URL);\ncommand.setParamsObject(commandParams);\n\nfinal GetAuthorizationUrlResponse resp = client.send(command).dataAsResponse(GetAuthorizationUrlResponse.class);\nString authorizationUrl = resp.getAuthorizationUrl());\n\n\n\n\nGet Tokens\n#\n\n\n\n// after login to Authorization Server (authorizationUrl) it redirects back to redirect_uri (registered by register_site command)\n// and returns back code. This code must be used to obtain tokens\n\nfinal GetTokensByCodeParams commandParams = new GetTokensByCodeParams();\ncommandParams.setOxdId(site.getOxdId());\ncommandParams.setCode(code);\n\nfinal Command command = new Command(CommandType.GET_TOKENS_BY_CODE).setParamsObject(commandParams);\n\nfinal GetTokensByCodeResponse resp = client.send(command).dataAsResponse(GetTokensByCodeResponse.class);\nString accessToken = resp.getAccessToken();\nString idToken = resp.getIdToken();\n\n\n\n\n\nGet User Info\n#\n\n\nCommandClient client = null;\ntry {\n    client = new CommandClient(host, port);\n\n    final RegisterSiteResponse site = RegisterSiteTest.registerSite(client, opHost, redirectUrl);\n    final GetTokensByCodeResponse tokens = requestTokens(client, site, userId, userSecret);\n\n    GetUserInfoParams params = new GetUserInfoParams();\n    params.setOxdId(site.getOxdId());\n    params.setAccessToken(tokens.getAccessToken());\n\n    final GetUserInfoResponse resp = client.send(new Command(CommandType.GET_USER_INFO).setParamsObject(params)).dataAsResponse(GetUserInfoResponse.class);\n} finally {\n    CommandClient.closeQuietly(client);\n}\n\n\n\n\n\nLogout\n#\n\n\n CommandClient client = null;\n try {\n     client = new CommandClient(host, port);\n\n     final RegisterSiteResponse site = RegisterSiteTest.registerSite(client, opHost, redirectUrl, postLogoutRedirectUrl, \"\");\n\n     final GetLogoutUrlParams commandParams = new GetLogoutUrlParams();\n     commandParams.setOxdId(site.getOxdId());\n     commandParams.setIdTokenHint(\"dummy_token\");\n     commandParams.setPostLogoutRedirectUri(postLogoutRedirectUrl);\n     commandParams.setState(UUID.randomUUID().toString());\n     commandParams.setSessionState(UUID.randomUUID().toString()); // here must be real session instead of dummy UUID\n\n     final Command command = new Command(CommandType.GET_LOGOUT_URI).setParamsObject(commandParams);\n\n     final LogoutResponse resp = client.send(command).dataAsResponse(LogoutResponse.class);\n } finally {\n     CommandClient.closeQuietly(client);\n }\n\n\n\n\n\nUpdate Site\n#\n\n\nCommandClient client = null;\ntry {\n     client = new CommandClient(host, port);\n\n     Calendar calendar = Calendar.getInstance();\n     calendar.add(Calendar.DAY_OF_YEAR, 1);\n\n     // more specific site registration\n     final UpdateSiteParams commandParams = new UpdateSiteParams();\n     commandParams.setOxdId(oxdId);\n     commandParams.setClientSecretExpiresAt(calendar.getTime());\n     commandParams.setScope(Lists.newArrayList(\"profile\"));\n\n     final Command command = new Command(CommandType.UPDATE_SITE);\n     command.setParamsObject(commandParams);\n\n     UpdateSiteResponse resp = client.send(command).dataAsResponse(UpdateSiteResponse.class);\n     assertNotNull(resp);\n} finally {\n     CommandClient.closeQuietly(client);\n}\n\n\n\n\nUMA RS Resource protection\n#\n\n\nfinal RsProtectParams commandParams = new RsProtectParams();\ncommandParams.setOxdId(site.getOxdId());\ncommandParams.setResources(UmaFullTest.resourceList(rsProtect).getResources());\n\nfinal Command command = new Command(CommandType.RS_PROTECT).setParamsObject(commandParams);\n\nfinal RsProtectResponse resp = client.send(command).dataAsResponse(RsProtectResponse.class);\n\n\n\n\nUMA RS Check access\n#\n\n\nfinal RsCheckAccessParams params = new RsCheckAccessParams();\nparams.setOxdId(site.getOxdId());\nparams.setHttpMethod(\"GET\");\nparams.setPath(\"/rest/photo\");\nparams.setRpt(\"d6s-54asr-vfgm6-388dsl\");\n\nfinal Command command = new Command(CommandType.RS_CHECK_ACCESS).setParamsObject(commandParams);\n\nfinal RsCheckAccessResponse resp = client.send(command).dataAsResponse(RsCheckAccessResponse.class);\n\n\n\n\nUMA Get RPT\n#\n\n\nfinal RpGetRptParams params = new RpGetRptParams();\nparams.setOxdId(site.getOxdId());\n\nfinal Command command = new Command(CommandType.RP_GET_RPT);\ncommand.setParamsObject(params);\nfinal CommandResponse response = client.send(command);\n\nfinal RpGetRptResponse rptResponse = response.dataAsResponse(RpGetRptResponse.class);\n\n\n\n\nUMA Get GAT\n#\n\n\nfinal RpGetGatParams params = new RpGetGatParams();\nparams.setOxdId(site.getOxdId());\nparams.setScopes(Lists.newArrayList(\"http://photoz.example.com/dev/actions/all\"));\n\nfinal Command command = new Command(CommandType.RP_GET_GAT);\ncommand.setParamsObject(params);\nfinal CommandResponse response = client.send(command);\n\nfinal RpGetRptResponse rptResponse = response.dataAsResponse(RpGetRptResponse.class);",
            "title": "Java"
        },
        {
            "location": "/libraries/java/#oxd-java",
            "text": "",
            "title": "oxd Java"
        },
        {
            "location": "/libraries/java/#overview",
            "text": "The following documentation demonstrates how to use Gluu's commercial OAuth 2.0 client software,  oxd , to send users from a Java app to an OpenID Connect Provider (OP) for login. You can securely send users to any standard OP for login, including Google and the  free open source Gluu Server .",
            "title": "Overview"
        },
        {
            "location": "/libraries/java/#installation",
            "text": "Github sources  Jar files are available on the  Maven repo  Jenkins build server  Tests on github  API Documentation (Javadocs)",
            "title": "Installation"
        },
        {
            "location": "/libraries/java/#configuration",
            "text": "There are no configuration files for oxd-java. Redirect URI and\nother information is set in the code.",
            "title": "Configuration"
        },
        {
            "location": "/libraries/java/#sample-code",
            "text": "",
            "title": "Sample code"
        },
        {
            "location": "/libraries/java/#register",
            "text": "CommandClient client = null;\n try {\n     client = new CommandClient(host, port);\n\n     final RegisterSiteParams commandParams = new RegisterSiteParams();\n     commandParams.setOpHost(opHost);\n     commandParams.setAuthorizationRedirectUri(redirectUrl);\n     commandParams.setPostLogoutRedirectUri(postLogoutRedirectUrl);\n     commandParams.setClientLogoutUri(Lists.newArrayList(logoutUri));\n     commandParams.setScope(Lists.newArrayList(\"openid\", \"uma_protection\", \"uma_authorization\"));\n\n     final Command command = new Command(CommandType.REGISTER_SITE);\n     command.setParamsObject(commandParams);\n\n     final RegisterSiteResponse site = client.send(command).dataAsResponse(RegisterSiteResponse.class);\n\n     // more code here\n } finally {\n     CommandClient.closeQuietly(client);\n }",
            "title": "Register"
        },
        {
            "location": "/libraries/java/#get-authorization-url",
            "text": "final GetAuthorizationUrlParams commandParams = new GetAuthorizationUrlParams();\ncommandParams.setOxdId(site.getOxdId());\n\nfinal Command command = new Command(CommandType.GET_AUTHORIZATION_URL);\ncommand.setParamsObject(commandParams);\n\nfinal GetAuthorizationUrlResponse resp = client.send(command).dataAsResponse(GetAuthorizationUrlResponse.class);\nString authorizationUrl = resp.getAuthorizationUrl());",
            "title": "Get Authorization URL"
        },
        {
            "location": "/libraries/java/#get-tokens",
            "text": "// after login to Authorization Server (authorizationUrl) it redirects back to redirect_uri (registered by register_site command)\n// and returns back code. This code must be used to obtain tokens\n\nfinal GetTokensByCodeParams commandParams = new GetTokensByCodeParams();\ncommandParams.setOxdId(site.getOxdId());\ncommandParams.setCode(code);\n\nfinal Command command = new Command(CommandType.GET_TOKENS_BY_CODE).setParamsObject(commandParams);\n\nfinal GetTokensByCodeResponse resp = client.send(command).dataAsResponse(GetTokensByCodeResponse.class);\nString accessToken = resp.getAccessToken();\nString idToken = resp.getIdToken();",
            "title": "Get Tokens"
        },
        {
            "location": "/libraries/java/#get-user-info",
            "text": "CommandClient client = null;\ntry {\n    client = new CommandClient(host, port);\n\n    final RegisterSiteResponse site = RegisterSiteTest.registerSite(client, opHost, redirectUrl);\n    final GetTokensByCodeResponse tokens = requestTokens(client, site, userId, userSecret);\n\n    GetUserInfoParams params = new GetUserInfoParams();\n    params.setOxdId(site.getOxdId());\n    params.setAccessToken(tokens.getAccessToken());\n\n    final GetUserInfoResponse resp = client.send(new Command(CommandType.GET_USER_INFO).setParamsObject(params)).dataAsResponse(GetUserInfoResponse.class);\n} finally {\n    CommandClient.closeQuietly(client);\n}",
            "title": "Get User Info"
        },
        {
            "location": "/libraries/java/#logout",
            "text": "CommandClient client = null;\n try {\n     client = new CommandClient(host, port);\n\n     final RegisterSiteResponse site = RegisterSiteTest.registerSite(client, opHost, redirectUrl, postLogoutRedirectUrl, \"\");\n\n     final GetLogoutUrlParams commandParams = new GetLogoutUrlParams();\n     commandParams.setOxdId(site.getOxdId());\n     commandParams.setIdTokenHint(\"dummy_token\");\n     commandParams.setPostLogoutRedirectUri(postLogoutRedirectUrl);\n     commandParams.setState(UUID.randomUUID().toString());\n     commandParams.setSessionState(UUID.randomUUID().toString()); // here must be real session instead of dummy UUID\n\n     final Command command = new Command(CommandType.GET_LOGOUT_URI).setParamsObject(commandParams);\n\n     final LogoutResponse resp = client.send(command).dataAsResponse(LogoutResponse.class);\n } finally {\n     CommandClient.closeQuietly(client);\n }",
            "title": "Logout"
        },
        {
            "location": "/libraries/java/#update-site",
            "text": "CommandClient client = null;\ntry {\n     client = new CommandClient(host, port);\n\n     Calendar calendar = Calendar.getInstance();\n     calendar.add(Calendar.DAY_OF_YEAR, 1);\n\n     // more specific site registration\n     final UpdateSiteParams commandParams = new UpdateSiteParams();\n     commandParams.setOxdId(oxdId);\n     commandParams.setClientSecretExpiresAt(calendar.getTime());\n     commandParams.setScope(Lists.newArrayList(\"profile\"));\n\n     final Command command = new Command(CommandType.UPDATE_SITE);\n     command.setParamsObject(commandParams);\n\n     UpdateSiteResponse resp = client.send(command).dataAsResponse(UpdateSiteResponse.class);\n     assertNotNull(resp);\n} finally {\n     CommandClient.closeQuietly(client);\n}",
            "title": "Update Site"
        },
        {
            "location": "/libraries/java/#uma-rs-resource-protection",
            "text": "final RsProtectParams commandParams = new RsProtectParams();\ncommandParams.setOxdId(site.getOxdId());\ncommandParams.setResources(UmaFullTest.resourceList(rsProtect).getResources());\n\nfinal Command command = new Command(CommandType.RS_PROTECT).setParamsObject(commandParams);\n\nfinal RsProtectResponse resp = client.send(command).dataAsResponse(RsProtectResponse.class);",
            "title": "UMA RS Resource protection"
        },
        {
            "location": "/libraries/java/#uma-rs-check-access",
            "text": "final RsCheckAccessParams params = new RsCheckAccessParams();\nparams.setOxdId(site.getOxdId());\nparams.setHttpMethod(\"GET\");\nparams.setPath(\"/rest/photo\");\nparams.setRpt(\"d6s-54asr-vfgm6-388dsl\");\n\nfinal Command command = new Command(CommandType.RS_CHECK_ACCESS).setParamsObject(commandParams);\n\nfinal RsCheckAccessResponse resp = client.send(command).dataAsResponse(RsCheckAccessResponse.class);",
            "title": "UMA RS Check access"
        },
        {
            "location": "/libraries/java/#uma-get-rpt",
            "text": "final RpGetRptParams params = new RpGetRptParams();\nparams.setOxdId(site.getOxdId());\n\nfinal Command command = new Command(CommandType.RP_GET_RPT);\ncommand.setParamsObject(params);\nfinal CommandResponse response = client.send(command);\n\nfinal RpGetRptResponse rptResponse = response.dataAsResponse(RpGetRptResponse.class);",
            "title": "UMA Get RPT"
        },
        {
            "location": "/libraries/java/#uma-get-gat",
            "text": "final RpGetGatParams params = new RpGetGatParams();\nparams.setOxdId(site.getOxdId());\nparams.setScopes(Lists.newArrayList(\"http://photoz.example.com/dev/actions/all\"));\n\nfinal Command command = new Command(CommandType.RP_GET_GAT);\ncommand.setParamsObject(params);\nfinal CommandResponse response = client.send(command);\n\nfinal RpGetRptResponse rptResponse = response.dataAsResponse(RpGetRptResponse.class);",
            "title": "UMA Get GAT"
        },
        {
            "location": "/libraries/php/",
            "text": "oxd Php\n#\n\n\nOverview\n#\n\n\nThe following documentation demonstrates \nhow to use Gluu's commercial OAuth 2.0 client software,\n \noxd\n, to send users from a Php app to an \n OpenID Connect Provider (OP) for login. You can securely send users \n to any standard OP for login, including Google and \n the \nfree open source Gluu Server\n.\n\n\nInstallation\n#\n\n\nSource\n#\n\n\noxd-php-library source is available on Github:\n\n\n\n\nGithub sources\n\n\n\n\nComposer: oxd-php-api\n#\n\n\n\n\nCompose API source\n\n\nLibrary version 2.4.4\n\n\n\n\nThis is the preferred method. See the \ncomposer\n \nwebsite for \n\ninstallation instructions\n if \nyou do not already have it installed. \n\n\nTo install oxd-php-api via Composer, execute the following command \nin your project root:\n\n\n$ composer install `composer require \"gluufederation/oxd-php-api\": \"2.4.4\"`\n\n\n\n\n\n!!!\nNote\n: \n    OpenID Connect requires \nhttps.\n This library will not \nwork if your website uses \nhttp\n only.\n\n\nConfiguration\n#\n\n\nThe oxd-php-library configuration file is located in \n'oxd-rp-settings.json'. The values here are used during \nregistration. For a full list of supported\noxd configuration parameters, see the \n\noxd documentation\n\nBelow is a typical configuration data set for registration:\n\n\n{\n    \"oxd_host_port\":8099,\n    \"authorization_redirect_uri\" : [\"https://www.myapplication.com/welcome\" ],\n    \"post_logout_redirect_uri\" : \"https://www.myapplication.com/logout\",\n    \"scope\" : [\"openid\", \"profile\"],\n    \"acr_values\" : [\"u2f\"]\n}\n\n\n\n\n\n\n\noxd_host_port - oxd port or socket\n\n\n\n\nSample code\n#\n\n\nRegister_site.php\n#\n\n\n\n\nRegister_site protocol description\n.\n\n\n\n\nExample\n\n\nRegister_site_test:\n\nsession_start();\nsession_destroy();\ninclude_once '../Register_site.php';\n\n$register_site = new Register_site();\n$register_site->setRequestOpHost(Oxd_RP_config::$op_host);\n$register_site->setRequestAcrValues(Oxd_RP_config::$acr_values);\n$register_site->setRequestAuthorizationRedirectUri(Oxd_RP_config::$authorization_redirect_uri);\n$register_site->setRequestPostLogoutRedirectUri(Oxd_RP_config::$post_logout_redirect_uri);\n$register_site->setRequestContacts([\"test@test.test\"]);\n$register_site->setRequestGrantTypes(Oxd_RP_config::$grant_types);\n$register_site->setRequestResponseTypes(Oxd_RP_config::$response_types);\n$register_site->setRequestScope(Oxd_RP_config::$scope);\n\n$register_site->request();\n$_SESSION['oxd_id'] = $register_site->getResponseOxdId();\n\n\n\n\n\n\nUpdate_site_registration.php\n#\n\n\n\n\nUpdate_site_registration protocol description\n.\n\n\n\n\nExample\n\n\nUpdate_site_registration_test:\n\nsession_start();\ninclude_once '../Update_site_registration.php';\n\n$update_site_registration = new Update_site_registration();\n$update_site_registration->setRequestAcrValues(Oxd_RP_config::$acr_values);\n$update_site_registration->setRequestOxdId($_SESSION['oxd_id']);\n$update_site_registration->setRequestAuthorizationRedirectUri(Oxd_RP_config::$authorization_redirect_uri);\n$update_site_registration->setRequestPostLogoutRedirectUri(Oxd_RP_config::$post_logout_redirect_uri);\n$update_site_registration->setRequestContacts([\"test@test.test\"]);\n$update_site_registration->setRequestGrantTypes(Oxd_RP_config::$grant_types);\n$update_site_registration->setRequestResponseTypes(Oxd_RP_config::$response_types);\n$update_site_registration->setRequestScope(Oxd_RP_config::$scope);\n$update_site_registration->request();\nprint_r($update_site_registration->getResponseObject());\n\n\n\n\n\n\nGet_authorization_url.php\n#\n\n\n\n\nGet_authorization_url protocol description\n.\n\n\n\n\nExample\n\n\nGet_authorization_url_test:\nsession_start();\nrequire_once '../Get_authorization_url.php';\n\n$get_authorization_url = new Get_authorization_url();\n$get_authorization_url->setRequestOxdId($_SESSION['oxd_id']);\n$get_authorization_url->setRequestAcrValues(Oxd_RP_config::$acr_values);\n$get_authorization_url->setRequestScope(Oxd_RP_config::$scope);\n$get_authorization_url->request();\necho $get_authorization_url->getResponseAuthorizationUrl();\n\n\n\n\n\nGet_tokens_by_code.php\n#\n\n\n\n\nGet_tokens_by_code protocol description\n.\n\n\n\n\nExample\n\n\nGet_tokens_by_code_test:\nsession_start();\nrequire_once '../Get_tokens_by_code.php';\n\n$get_tokens_by_code = new Get_tokens_by_code();\n$get_tokens_by_code->setRequestOxdId($_SESSION['oxd_id']);\n//getting code from redirecting url, when user allowed.\n$get_tokens_by_code->setRequestCode($_GET['code']);\n$get_tokens_by_code->setRequestState($_GET['state']);\n$get_tokens_by_code->request();\n$_SESSION['id_token'] = $get_tokens_by_code->getResponseIdToken();\n$_SESSION['access_token'] = $get_tokens_by_code->getResponseAccessToken();\nprint_r($get_tokens_by_code->getResponseObject());\n\n\n\n\n\nGet_user_info.php\n#\n\n\n\n\nGet_user_info protocol description\n.\n\n\n\n\nExample\n\n\nGet_user_info_test:\n\nsession_start();\nrequire_once '../Get_user_info.php';\necho '<br/>Get_user_info <br/>';\n$get_user_info = new Get_user_info();\n$get_user_info->setRequestOxdId($_SESSION['oxd_id']);\n$get_user_info->setRequestAccessToken($_SESSION['access_token']);\n$get_user_info->request();\nprint_r($get_user_info->getResponseObject());\n\n\n\n\n\nLogout.php\n#\n\n\n\n\nGet_logout_uri protocol description\n.\n\n\n\n\nExample\n\n\nLogout_test:\nsession_start();\nrequire_once '../Logout.php';\n\n$logout = new Logout();\n$logout->setRequestOxdId($_SESSION['oxd_id']);\n$logout->setRequestPostLogoutRedirectUri(Oxd_RP_config::$logout_redirect_uri);\n$logout->setRequestIdToken($_SESSION['user_oxd_access_token']);\n$logout->setRequestSessionState($_SESSION['session_states']);\n$logout->setRequestState($_SESSION['states']);\n$logout->request();\n\necho $logout->getResponseHtml();\n\n\n\n\n\nUma_rs_protect.php\n#\n\n\n\n\nUma_rs_protect protocol description\n.\n\n\n\n\nExample\n\n\nUma_rs_protect_test:\n\n$uma_rs_protect = new Uma_rs_protect();\n$uma_rs_protect->setRequestOxdId($register_site->getResponseOxdId());\n\n$uma_rs_protect->addConditionForPath([\"GET\"],[\"http://vlad.umatest.com/dev/actions/view\"], [\"http://vlad.umatest.com/dev/actions/view\"]);\n$uma_rs_protect->addConditionForPath([\"POST\"],[ \"http://vlad.umatest.com/dev/actions/add\"],[ \"http://vlad.umatest.com/dev/actions/add\"]);\n$uma_rs_protect->addConditionForPath([\"DELETE\"],[\"http://vlad.umatest.com/dev/actions/remove\"], [\"http://vlad.umatest.com/dev/actions/remove\"]);\n$uma_rs_protect->addResource('/uma/testresource');\n\n$uma_rs_protect->request();\nvar_dump($uma_rs_protect->getResponseObject());\n\n\n\n\n\nUma_rs_check_access.php\n#\n\n\n\n\nUma_rs_check_access protocol description\n.\n\n\n\n\nExample\n\n\nUma_rs_check_access_test:\n\nsession_start();\nrequire_once '../Uma_rs_check_access.php';\n\n$uma_rs_authorize_rpt = new Uma_rs_check_access();\n$uma_rs_authorize_rpt->setRequestOxdId($_SESSION['oxd_id']);\n$uma_rs_authorize_rpt->setRequestRpt($_SESSION['uma_rpt']);\n$uma_rs_authorize_rpt->setRequestPath(\"/uma/testresource\");\n$uma_rs_authorize_rpt->setRequestHttpMethod(\"GET\");\n$uma_rs_authorize_rpt->request();\n\nvar_dump($uma_rs_authorize_rpt->getResponseObject());\n\n$_SESSION['uma_ticket'] = $uma_rs_authorize_rpt->getResponseTicket();\n\n\n\n\n\nUma_rp_get_rpt.php\n#\n\n\n\n\nUma_rp_get_rpt protocol description\n.\n\n\n\n\nExample\n\n\nUma_rp_get_rpt_test:\n\n$uma_rp_get_rpt = new Uma_rp_get_rpt();\n$uma_rp_get_rpt->0setRequestOxdId($_SESSION['oxd_id']);\n$uma_rp_get_rpt->request();\n\nvar_dump($uma_rp_get_rpt->getResponseObject());\n\n$_SESSION['uma_rpt']= $uma_rp_get_rpt->getResponseRpt();\necho $uma_rp_get_rpt->getResponseRpt();\n\n\n\n\n\nUma_rp_authorize_rpt.php\n#\n\n\n\n\nUma_rp_authorize_rpt protocol description\n.\n\n\n\n\nExample\n\n\nUma_rp_authorize_rpt_test:\n\nsession_start();\nrequire_once '../Uma_rp_authorize_rpt.php';\n\n$uma_rp_authorize_rpt = new Uma_rp_authorize_rpt();\n$uma_rp_authorize_rpt->setRequestOxdId($_SESSION['oxd_id']);\n$uma_rp_authorize_rpt->setRequestRpt($_SESSION['uma_rpt']);\n$uma_rp_authorize_rpt->setRequestTicket($_SESSION['uma_ticket']);\n$uma_rp_authorize_rpt->request();\n\nvar_dump($uma_rp_authorize_rpt->getResponseObject());\n\n\n\n\n\nUma_rp_get_gat.php\n#\n\n\n\n\nUma_rp_get_gat protocol description\n.\n\n\n\n\nExample\n\n\nUma_rp_get_gat_test:\n\n$uma_rp_get_gat = new Uma_rp_get_gat();\n$uma_rp_get_gat->setRequestOxdId($_SESSION['oxd_id']);\n$uma_rp_get_gat->setRequestScopes([\"http://photoz.example.com/dev/actions/add\",\"http://photoz.example.com/dev/actions/view\", \"http://photoz.example.com/dev/actions/edit\"]);\n$uma_rp_get_gat->request();\n\nvar_dump($uma_rp_get_gat->getResponseObject());\n\n$_SESSION['uma_gat']= $uma_rp_get_gat->getResponseGat();\necho $uma_rp_get_gat->getResponseGat();\n\n\n\n\n\nSample App\n#\n\n\nView the sample app",
            "title": "PHP"
        },
        {
            "location": "/libraries/php/#oxd-php",
            "text": "",
            "title": "oxd Php"
        },
        {
            "location": "/libraries/php/#overview",
            "text": "The following documentation demonstrates \nhow to use Gluu's commercial OAuth 2.0 client software,\n  oxd , to send users from a Php app to an \n OpenID Connect Provider (OP) for login. You can securely send users \n to any standard OP for login, including Google and \n the  free open source Gluu Server .",
            "title": "Overview"
        },
        {
            "location": "/libraries/php/#installation",
            "text": "",
            "title": "Installation"
        },
        {
            "location": "/libraries/php/#source",
            "text": "oxd-php-library source is available on Github:   Github sources",
            "title": "Source"
        },
        {
            "location": "/libraries/php/#composer-oxd-php-api",
            "text": "Compose API source  Library version 2.4.4   This is the preferred method. See the  composer  \nwebsite for  installation instructions  if \nyou do not already have it installed.   To install oxd-php-api via Composer, execute the following command \nin your project root:  $ composer install `composer require \"gluufederation/oxd-php-api\": \"2.4.4\"`  !!! Note : \n    OpenID Connect requires  https.  This library will not \nwork if your website uses  http  only.",
            "title": "Composer: oxd-php-api"
        },
        {
            "location": "/libraries/php/#configuration",
            "text": "The oxd-php-library configuration file is located in \n'oxd-rp-settings.json'. The values here are used during \nregistration. For a full list of supported\noxd configuration parameters, see the  oxd documentation \nBelow is a typical configuration data set for registration:  {\n    \"oxd_host_port\":8099,\n    \"authorization_redirect_uri\" : [\"https://www.myapplication.com/welcome\" ],\n    \"post_logout_redirect_uri\" : \"https://www.myapplication.com/logout\",\n    \"scope\" : [\"openid\", \"profile\"],\n    \"acr_values\" : [\"u2f\"]\n}   oxd_host_port - oxd port or socket",
            "title": "Configuration"
        },
        {
            "location": "/libraries/php/#sample-code",
            "text": "",
            "title": "Sample code"
        },
        {
            "location": "/libraries/php/#register95sitephp",
            "text": "Register_site protocol description .   Example  Register_site_test:\n\nsession_start();\nsession_destroy();\ninclude_once '../Register_site.php';\n\n$register_site = new Register_site();\n$register_site->setRequestOpHost(Oxd_RP_config::$op_host);\n$register_site->setRequestAcrValues(Oxd_RP_config::$acr_values);\n$register_site->setRequestAuthorizationRedirectUri(Oxd_RP_config::$authorization_redirect_uri);\n$register_site->setRequestPostLogoutRedirectUri(Oxd_RP_config::$post_logout_redirect_uri);\n$register_site->setRequestContacts([\"test@test.test\"]);\n$register_site->setRequestGrantTypes(Oxd_RP_config::$grant_types);\n$register_site->setRequestResponseTypes(Oxd_RP_config::$response_types);\n$register_site->setRequestScope(Oxd_RP_config::$scope);\n\n$register_site->request();\n$_SESSION['oxd_id'] = $register_site->getResponseOxdId();",
            "title": "Register_site.php"
        },
        {
            "location": "/libraries/php/#update95site95registrationphp",
            "text": "Update_site_registration protocol description .   Example  Update_site_registration_test:\n\nsession_start();\ninclude_once '../Update_site_registration.php';\n\n$update_site_registration = new Update_site_registration();\n$update_site_registration->setRequestAcrValues(Oxd_RP_config::$acr_values);\n$update_site_registration->setRequestOxdId($_SESSION['oxd_id']);\n$update_site_registration->setRequestAuthorizationRedirectUri(Oxd_RP_config::$authorization_redirect_uri);\n$update_site_registration->setRequestPostLogoutRedirectUri(Oxd_RP_config::$post_logout_redirect_uri);\n$update_site_registration->setRequestContacts([\"test@test.test\"]);\n$update_site_registration->setRequestGrantTypes(Oxd_RP_config::$grant_types);\n$update_site_registration->setRequestResponseTypes(Oxd_RP_config::$response_types);\n$update_site_registration->setRequestScope(Oxd_RP_config::$scope);\n$update_site_registration->request();\nprint_r($update_site_registration->getResponseObject());",
            "title": "Update_site_registration.php"
        },
        {
            "location": "/libraries/php/#get95authorization95urlphp",
            "text": "Get_authorization_url protocol description .   Example  Get_authorization_url_test:\nsession_start();\nrequire_once '../Get_authorization_url.php';\n\n$get_authorization_url = new Get_authorization_url();\n$get_authorization_url->setRequestOxdId($_SESSION['oxd_id']);\n$get_authorization_url->setRequestAcrValues(Oxd_RP_config::$acr_values);\n$get_authorization_url->setRequestScope(Oxd_RP_config::$scope);\n$get_authorization_url->request();\necho $get_authorization_url->getResponseAuthorizationUrl();",
            "title": "Get_authorization_url.php"
        },
        {
            "location": "/libraries/php/#get95tokens95by95codephp",
            "text": "Get_tokens_by_code protocol description .   Example  Get_tokens_by_code_test:\nsession_start();\nrequire_once '../Get_tokens_by_code.php';\n\n$get_tokens_by_code = new Get_tokens_by_code();\n$get_tokens_by_code->setRequestOxdId($_SESSION['oxd_id']);\n//getting code from redirecting url, when user allowed.\n$get_tokens_by_code->setRequestCode($_GET['code']);\n$get_tokens_by_code->setRequestState($_GET['state']);\n$get_tokens_by_code->request();\n$_SESSION['id_token'] = $get_tokens_by_code->getResponseIdToken();\n$_SESSION['access_token'] = $get_tokens_by_code->getResponseAccessToken();\nprint_r($get_tokens_by_code->getResponseObject());",
            "title": "Get_tokens_by_code.php"
        },
        {
            "location": "/libraries/php/#get95user95infophp",
            "text": "Get_user_info protocol description .   Example  Get_user_info_test:\n\nsession_start();\nrequire_once '../Get_user_info.php';\necho '<br/>Get_user_info <br/>';\n$get_user_info = new Get_user_info();\n$get_user_info->setRequestOxdId($_SESSION['oxd_id']);\n$get_user_info->setRequestAccessToken($_SESSION['access_token']);\n$get_user_info->request();\nprint_r($get_user_info->getResponseObject());",
            "title": "Get_user_info.php"
        },
        {
            "location": "/libraries/php/#logoutphp",
            "text": "Get_logout_uri protocol description .   Example  Logout_test:\nsession_start();\nrequire_once '../Logout.php';\n\n$logout = new Logout();\n$logout->setRequestOxdId($_SESSION['oxd_id']);\n$logout->setRequestPostLogoutRedirectUri(Oxd_RP_config::$logout_redirect_uri);\n$logout->setRequestIdToken($_SESSION['user_oxd_access_token']);\n$logout->setRequestSessionState($_SESSION['session_states']);\n$logout->setRequestState($_SESSION['states']);\n$logout->request();\n\necho $logout->getResponseHtml();",
            "title": "Logout.php"
        },
        {
            "location": "/libraries/php/#uma95rs95protectphp",
            "text": "Uma_rs_protect protocol description .   Example  Uma_rs_protect_test:\n\n$uma_rs_protect = new Uma_rs_protect();\n$uma_rs_protect->setRequestOxdId($register_site->getResponseOxdId());\n\n$uma_rs_protect->addConditionForPath([\"GET\"],[\"http://vlad.umatest.com/dev/actions/view\"], [\"http://vlad.umatest.com/dev/actions/view\"]);\n$uma_rs_protect->addConditionForPath([\"POST\"],[ \"http://vlad.umatest.com/dev/actions/add\"],[ \"http://vlad.umatest.com/dev/actions/add\"]);\n$uma_rs_protect->addConditionForPath([\"DELETE\"],[\"http://vlad.umatest.com/dev/actions/remove\"], [\"http://vlad.umatest.com/dev/actions/remove\"]);\n$uma_rs_protect->addResource('/uma/testresource');\n\n$uma_rs_protect->request();\nvar_dump($uma_rs_protect->getResponseObject());",
            "title": "Uma_rs_protect.php"
        },
        {
            "location": "/libraries/php/#uma95rs95check95accessphp",
            "text": "Uma_rs_check_access protocol description .   Example  Uma_rs_check_access_test:\n\nsession_start();\nrequire_once '../Uma_rs_check_access.php';\n\n$uma_rs_authorize_rpt = new Uma_rs_check_access();\n$uma_rs_authorize_rpt->setRequestOxdId($_SESSION['oxd_id']);\n$uma_rs_authorize_rpt->setRequestRpt($_SESSION['uma_rpt']);\n$uma_rs_authorize_rpt->setRequestPath(\"/uma/testresource\");\n$uma_rs_authorize_rpt->setRequestHttpMethod(\"GET\");\n$uma_rs_authorize_rpt->request();\n\nvar_dump($uma_rs_authorize_rpt->getResponseObject());\n\n$_SESSION['uma_ticket'] = $uma_rs_authorize_rpt->getResponseTicket();",
            "title": "Uma_rs_check_access.php"
        },
        {
            "location": "/libraries/php/#uma95rp95get95rptphp",
            "text": "Uma_rp_get_rpt protocol description .   Example  Uma_rp_get_rpt_test:\n\n$uma_rp_get_rpt = new Uma_rp_get_rpt();\n$uma_rp_get_rpt->0setRequestOxdId($_SESSION['oxd_id']);\n$uma_rp_get_rpt->request();\n\nvar_dump($uma_rp_get_rpt->getResponseObject());\n\n$_SESSION['uma_rpt']= $uma_rp_get_rpt->getResponseRpt();\necho $uma_rp_get_rpt->getResponseRpt();",
            "title": "Uma_rp_get_rpt.php"
        },
        {
            "location": "/libraries/php/#uma95rp95authorize95rptphp",
            "text": "Uma_rp_authorize_rpt protocol description .   Example  Uma_rp_authorize_rpt_test:\n\nsession_start();\nrequire_once '../Uma_rp_authorize_rpt.php';\n\n$uma_rp_authorize_rpt = new Uma_rp_authorize_rpt();\n$uma_rp_authorize_rpt->setRequestOxdId($_SESSION['oxd_id']);\n$uma_rp_authorize_rpt->setRequestRpt($_SESSION['uma_rpt']);\n$uma_rp_authorize_rpt->setRequestTicket($_SESSION['uma_ticket']);\n$uma_rp_authorize_rpt->request();\n\nvar_dump($uma_rp_authorize_rpt->getResponseObject());",
            "title": "Uma_rp_authorize_rpt.php"
        },
        {
            "location": "/libraries/php/#uma95rp95get95gatphp",
            "text": "Uma_rp_get_gat protocol description .   Example  Uma_rp_get_gat_test:\n\n$uma_rp_get_gat = new Uma_rp_get_gat();\n$uma_rp_get_gat->setRequestOxdId($_SESSION['oxd_id']);\n$uma_rp_get_gat->setRequestScopes([\"http://photoz.example.com/dev/actions/add\",\"http://photoz.example.com/dev/actions/view\", \"http://photoz.example.com/dev/actions/edit\"]);\n$uma_rp_get_gat->request();\n\nvar_dump($uma_rp_get_gat->getResponseObject());\n\n$_SESSION['uma_gat']= $uma_rp_get_gat->getResponseGat();\necho $uma_rp_get_gat->getResponseGat();",
            "title": "Uma_rp_get_gat.php"
        },
        {
            "location": "/libraries/php/#sample-app",
            "text": "View the sample app",
            "title": "Sample App"
        },
        {
            "location": "/libraries/node/",
            "text": "oxd Node\n#\n\n\noverview\n#\n\n\nThe following documentation demonstrates \nhow to use Gluu's commercial OAuth 2.0 client software, \n\noxd\n, to send users from a Node app to an \nOpenID Connect Provider (OP) for login. You can securely send users \nto any standard OP for login, including Google and \nthe \nfree open source Gluu Server\n.\n\n\nInstallation\n#\n\n\n\n\nGithub sources\n\n\nGluu Server\n\n\noxd server\n\n\n\n\nInstall oxd-node using following command:\n\n\n$ npm install oxd-node\n\n\n\n\nPrerequisite\n#\n\n\n1) You have to install gluu server and oxd-server in your hosting server to use oxd-node\n   library with your application.\n2) Application will not be working if your host does not have https://.\n\n\n\n\n\nConfiguration\n#\n\n\nOnce the library is installed, create a copy of the sample configuration file for your website in a server \nwritable\n location and edit the configuration. For example\n\n\nConfigure oxd port\n\n\nGo to model/request_param.js,\nfind exports.oxd_port=null and enter oxd port no inplace of \"null\" which ever is free on your server.\n\n\n\n\n!!!\nNote:\n \n    The website is registered with the OP and its ID is stored in this config file, also are the other peristant information about the website. So the config file needs to be \nwritable\n for the server. The \noxd-node\n contains complete documentation about itself.\n\n\nSample Code\n#\n\n\nregister_site\n#\n\n\nRequest:\n\n\ntry {\nvar oxd = require(\"oxd-node\");\noxd.Request.authorization_redirect_uri= \"https://rp.example.com/callback\";  //REQUIRED\noxd.register_site(oxd.Request,function(response){\n});\n} catch (err) {\n    console.log(\"error:\" + err);\n}\n\n\n\n\nResponse:\n\n\n{\n    \"status\":\"ok\",\n    \"data\":{\n        \"oxd_id\":\"6F9619FF-8B86-D011-B42D-00CF4FC964FF\"\n    }\n}\n\n\n\n\nupdate_site_registration\n#\n\n\nRequest:\n\n\ntry {\nvar oxd = require(\"oxd-node\");\noxd.Request.oxd_id = \"your site id\";                                       //REQUIRED\noxd.Request.authorization_redirect_uri= \"https://rp.example.com/callback\"; //OPTIONAL\noxd.update_site_registration(oxd.Request,function(response){\n});\n} catch (err) {\n    console.log(\"error:\" + err);\n}\n\n\n\n\nResponse:\n\n\n{\n    \"status\":\"ok\"\n}\n\n\n\n\nget_authorization_url\n#\n\n\nRequest:\n\n\ntry {\nvar oxd = require(\"oxd-node\");\noxd.Request.oxd_id = \"your site id\";                                  //REQUIRED\noxd.Request.acr_values = [\"basic\"];                                   //OPTIONAL\noxd.get_authorization_url(oxd.Request,function(response){\n});\n} catch (err) {\n    console.log(\"error:\" + err);\n}\n\n\n\n\nResponse:\n\n\n{\n    \"status\":\"ok\",\n    \"data\":{\n        \"authorization_url\":\"https://server.example.com/authorize?response_type=code&client_id=s6BhdRkqt3&redirect_uri=https%3A%2F%2Fclient.example.org%2Fcb&scope=openid%20profile&acr_values=duo&state=af0ifjsldkj&nonce=n-0S6_WzA2Mj\"\n    }\n}\n\n\n\n\n!!!\nNote:\n \n    After redirecting to the above URL, the OpenID Provider will return a response that looks like this to the URL your application registered as the redirect URI (parse out the code and state):\n\n\nHTTP/1.1 302 Found\nLocation: https://client.example.org/cb?code=SplxlOBeZQQYbYS6WxSbIA&state=af0ifjsldkj&scopes=openid%20profile\n\n\n\n\nget_tokens_by_code\n#\n\n\nRequest:\n\n\ntry {\nvar oxd = require(\"oxd-node\");                                       \noxd.Request.oxd_id = \"your site id\";                                 //REQUIRED\noxd.Request.code = \"code from OP redirect url\";                      //REQUIRED, code from OP redirect url (see example above)\noxd.request.state=\"state from OP redirect url\";                      //REQUIRED\noxd.get_tokens_by_code(oxd.Request,function(response){\n});\n} catch (err) {\n    console.log(\"error:\" + err);\n}\n\n\n\n\nResponse:\n\n\n{\n    \"status\":\"ok\",\n    \"data\":{\n        \"access_token\":\"SlAV32hkKG\",\n        \"expires_in\":3600,\n        \"refresh_token\":\"aaAV32hkKG1\"\n        \"id_token\":\"eyJ0 ... NiJ9.eyJ1c ... I6IjIifX0.DeWt4Qu ... ZXso\",\n        \"id_token_claims\": {\n             \"iss\": \"https://server.example.com\",\n             \"sub\": \"24400320\",\n             \"aud\": \"s6BhdRkqt3\",\n             \"nonce\": \"n-0S6_WzA2Mj\",\n             \"exp\": 1311281970,\n             \"iat\": 1311280970,\n             \"at_hash\": \"MTIzNDU2Nzg5MDEyMzQ1Ng\"\n        }\n    }\n}\n\n\n\n\nget_user_info\n#\n\n\nRequest:\n\n\ntry {\nvar oxd = require(\"oxd-node\");                             \noxd.Request.oxd_id = \"your site id\";                                 //REQUIRED\noxd.Request.access_token = \"access_token from OP redirect url\";      //REQUIRED\noxd.get_user_info(oxd.Request,function(response){\n});\n} catch (err) {\n    console.log(\"error:\" + err);\n}\n\n\n\n\nResponse:\n\n\n{\n    \"status\":\"ok\",\n    \"data\":{\n        \"claims\":{\n            \"sub\": [\"248289761001\"],\n            \"name\": [\"Jane Doe\"],\n            \"given_name\": [\"Jane\"],\n            \"family_name\": [\"Doe\"],\n            \"preferred_username\": [\"j.doe\"],\n            \"email\": [\"janedoe@example.com\"],\n            \"picture\": [\"http://example.com/janedoe/me.jpg\"]\n        }\n    }\n}\n\n\n\n\nget_logout_uri\n#\n\n\nRequest:\n\n\ntry {\nvar oxd = require(\"oxd-node\");\noxd.Request.oxd_id = \"your site id\";                                 //REQUIRED\noxd.get_logout_uri(oxd.Request,function(response){                   //REQUIRED\n});\n} catch (err) {\n    console.log(\"error:\" + err);\n}\n\n\n\n\nResponse:\n\n\n{\n    \"status\":\"ok\",\n    \"data\":{\n        \"uri\":\"https://<server>/end_session?id_token_hint=<id token>&state=<state>&post_logout_redirect_uri=<...>\"\n    }\n}",
            "title": "Node"
        },
        {
            "location": "/libraries/node/#oxd-node",
            "text": "",
            "title": "oxd Node"
        },
        {
            "location": "/libraries/node/#overview",
            "text": "The following documentation demonstrates \nhow to use Gluu's commercial OAuth 2.0 client software,  oxd , to send users from a Node app to an \nOpenID Connect Provider (OP) for login. You can securely send users \nto any standard OP for login, including Google and \nthe  free open source Gluu Server .",
            "title": "overview"
        },
        {
            "location": "/libraries/node/#installation",
            "text": "Github sources  Gluu Server  oxd server   Install oxd-node using following command:  $ npm install oxd-node",
            "title": "Installation"
        },
        {
            "location": "/libraries/node/#prerequisite",
            "text": "1) You have to install gluu server and oxd-server in your hosting server to use oxd-node\n   library with your application.\n2) Application will not be working if your host does not have https://.",
            "title": "Prerequisite"
        },
        {
            "location": "/libraries/node/#configuration",
            "text": "Once the library is installed, create a copy of the sample configuration file for your website in a server  writable  location and edit the configuration. For example  Configure oxd port  Go to model/request_param.js,\nfind exports.oxd_port=null and enter oxd port no inplace of \"null\" which ever is free on your server.  !!! Note:  \n    The website is registered with the OP and its ID is stored in this config file, also are the other peristant information about the website. So the config file needs to be  writable  for the server. The  oxd-node  contains complete documentation about itself.",
            "title": "Configuration"
        },
        {
            "location": "/libraries/node/#sample-code",
            "text": "",
            "title": "Sample Code"
        },
        {
            "location": "/libraries/node/#register_site",
            "text": "Request:  try {\nvar oxd = require(\"oxd-node\");\noxd.Request.authorization_redirect_uri= \"https://rp.example.com/callback\";  //REQUIRED\noxd.register_site(oxd.Request,function(response){\n});\n} catch (err) {\n    console.log(\"error:\" + err);\n}  Response:  {\n    \"status\":\"ok\",\n    \"data\":{\n        \"oxd_id\":\"6F9619FF-8B86-D011-B42D-00CF4FC964FF\"\n    }\n}",
            "title": "register_site"
        },
        {
            "location": "/libraries/node/#update_site_registration",
            "text": "Request:  try {\nvar oxd = require(\"oxd-node\");\noxd.Request.oxd_id = \"your site id\";                                       //REQUIRED\noxd.Request.authorization_redirect_uri= \"https://rp.example.com/callback\"; //OPTIONAL\noxd.update_site_registration(oxd.Request,function(response){\n});\n} catch (err) {\n    console.log(\"error:\" + err);\n}  Response:  {\n    \"status\":\"ok\"\n}",
            "title": "update_site_registration"
        },
        {
            "location": "/libraries/node/#get_authorization_url",
            "text": "Request:  try {\nvar oxd = require(\"oxd-node\");\noxd.Request.oxd_id = \"your site id\";                                  //REQUIRED\noxd.Request.acr_values = [\"basic\"];                                   //OPTIONAL\noxd.get_authorization_url(oxd.Request,function(response){\n});\n} catch (err) {\n    console.log(\"error:\" + err);\n}  Response:  {\n    \"status\":\"ok\",\n    \"data\":{\n        \"authorization_url\":\"https://server.example.com/authorize?response_type=code&client_id=s6BhdRkqt3&redirect_uri=https%3A%2F%2Fclient.example.org%2Fcb&scope=openid%20profile&acr_values=duo&state=af0ifjsldkj&nonce=n-0S6_WzA2Mj\"\n    }\n}  !!! Note:  \n    After redirecting to the above URL, the OpenID Provider will return a response that looks like this to the URL your application registered as the redirect URI (parse out the code and state):  HTTP/1.1 302 Found\nLocation: https://client.example.org/cb?code=SplxlOBeZQQYbYS6WxSbIA&state=af0ifjsldkj&scopes=openid%20profile",
            "title": "get_authorization_url"
        },
        {
            "location": "/libraries/node/#get_tokens_by_code",
            "text": "Request:  try {\nvar oxd = require(\"oxd-node\");                                       \noxd.Request.oxd_id = \"your site id\";                                 //REQUIRED\noxd.Request.code = \"code from OP redirect url\";                      //REQUIRED, code from OP redirect url (see example above)\noxd.request.state=\"state from OP redirect url\";                      //REQUIRED\noxd.get_tokens_by_code(oxd.Request,function(response){\n});\n} catch (err) {\n    console.log(\"error:\" + err);\n}  Response:  {\n    \"status\":\"ok\",\n    \"data\":{\n        \"access_token\":\"SlAV32hkKG\",\n        \"expires_in\":3600,\n        \"refresh_token\":\"aaAV32hkKG1\"\n        \"id_token\":\"eyJ0 ... NiJ9.eyJ1c ... I6IjIifX0.DeWt4Qu ... ZXso\",\n        \"id_token_claims\": {\n             \"iss\": \"https://server.example.com\",\n             \"sub\": \"24400320\",\n             \"aud\": \"s6BhdRkqt3\",\n             \"nonce\": \"n-0S6_WzA2Mj\",\n             \"exp\": 1311281970,\n             \"iat\": 1311280970,\n             \"at_hash\": \"MTIzNDU2Nzg5MDEyMzQ1Ng\"\n        }\n    }\n}",
            "title": "get_tokens_by_code"
        },
        {
            "location": "/libraries/node/#get_user_info",
            "text": "Request:  try {\nvar oxd = require(\"oxd-node\");                             \noxd.Request.oxd_id = \"your site id\";                                 //REQUIRED\noxd.Request.access_token = \"access_token from OP redirect url\";      //REQUIRED\noxd.get_user_info(oxd.Request,function(response){\n});\n} catch (err) {\n    console.log(\"error:\" + err);\n}  Response:  {\n    \"status\":\"ok\",\n    \"data\":{\n        \"claims\":{\n            \"sub\": [\"248289761001\"],\n            \"name\": [\"Jane Doe\"],\n            \"given_name\": [\"Jane\"],\n            \"family_name\": [\"Doe\"],\n            \"preferred_username\": [\"j.doe\"],\n            \"email\": [\"janedoe@example.com\"],\n            \"picture\": [\"http://example.com/janedoe/me.jpg\"]\n        }\n    }\n}",
            "title": "get_user_info"
        },
        {
            "location": "/libraries/node/#get_logout_uri",
            "text": "Request:  try {\nvar oxd = require(\"oxd-node\");\noxd.Request.oxd_id = \"your site id\";                                 //REQUIRED\noxd.get_logout_uri(oxd.Request,function(response){                   //REQUIRED\n});\n} catch (err) {\n    console.log(\"error:\" + err);\n}  Response:  {\n    \"status\":\"ok\",\n    \"data\":{\n        \"uri\":\"https://<server>/end_session?id_token_hint=<id token>&state=<state>&post_logout_redirect_uri=<...>\"\n    }\n}",
            "title": "get_logout_uri"
        },
        {
            "location": "/libraries/ruby/",
            "text": "oxd Ruby\n#\n\n\nOverview\n#\n\n\nThe following documentation demonstrates how to use Gluu's commercial OAuth 2.0 client software, \noxd\n, to send users from a Ruby app to an OpenID Connect Provider (OP) for login. You can securely send users to any standard OP for login, including Google and the \nfree open source Gluu Server\n.\n\n\nInstallation\n#\n\n\n\n\n\n\nGithub sources\n\n\n\n\n\n\nRubygems\n\n\n\n\n\n\nInstall Instructions\n#\n\n\n!!!\nNote :\n \n    This library will not work if your website does not have SSL installed. Make sure your website runs on https:// before using this library.\n\n\nThe Ruby Client is installed using RubyGems. Please include following \nline in the Gemfile of the application using Oxd Ruby Library.\n\n\ngem 'oxd-ruby', '~> 0.1.6'\n\n\n\n\nPlease run the bundle command after to install the \noxd-ruby\n plugin.\n\n\n$ bundle install\n\n\n\n\nConfiguration\n#\n\n\nThe configurations must be generated first using the following command.\n\n\n$ rails generate oxd:config\n\n\n\n\nThis command will install the \noxd_config.rb\n initializer file in the \nconfig/initializers\n directory which contains all the global configuration options for the ruby plugin. The following configurations must be set before the plugin can be used.\n\n\n\n\nconfig.oxd_host_ip\n\n\nconfig.oxd_host_port\n\n\nconfig.op_host \n\n\nconfig.authorization_redirect_uri\n\n\n\n\nSample code\n#\n\n\n\n\nAPI Docs\n\n\n\n\nThe plugin requires editing the \napplication_controller.rb\n file to include the following snippet.\n\n\nrequire 'oxd-ruby'\n\nbefore_filter :set_oxd_commands_instance\nprotected\n    def set_oxd_commands_instance\n        @oxd_command = Oxd::ClientOxdCommands.new\n        @uma_command = Oxd::UMACommands.new\n    end\n\n\n\n\nOP commands sample\n#\n\n\ndef register_site           \n    @oxd_command.register_site \n    authorization_url = @oxd_command.get_authorization_url\n    redirect_to authorization_url\nend\n\ndef login\n    if (params[:code].present?)\n        @access_token = @oxd_command.get_tokens_by_code( params[:code] ) \n    end\n        session.delete('oxd_access_token') if(session[:oxd_access_token].present?)\n        session[:oxd_access_token] = @access_token\n        session[:state] = params[:state]\n        session[:session_state] = params[:session_state]\n    @user = @oxd_command.get_user_info(session[:oxd_access_token])  \nend\n\ndef logout\n    if(session[:oxd_access_token])\n        @logout_url = @oxd_command.get_logout_uri(\n                session[:oxd_access_token], session[:state], session[:session_state]\n            )\n        redirect_to @logout_url\n    end     \nend\n\n\n\n\nUMA Commands sample\n#\n\n\nUMA RS commands\n#\n\n\ndef protect_resources\n    condition1 = {:httpMethods => [\"GET\"], :scopes => [\"http://photoz.example.com/dev/actions/view\"]}\n    condition2 = {:httpMethods => [\"PUT\", \"POST\"], :scopes => [\"http://photoz.example.com/dev/actions/add\"]}\n    @uma_command.uma_add_resource(\"/photo\", condition1, condition2)\n\n    response = @uma_command.uma_rs_protect # Register above resources with UMA RS\nend\n\n def check_access\n     # Pass the resource path and http method to check access\n    response = @uma_command.uma_rs_check_access('/photo', 'GET') \nend\n\n\n\n\nUMA RP commands\n#\n\n\ndef get_rpt\n    rpt = @uma_command.uma_rp_get_rpt('false') # Get RPT\nend\n\ndef authorize_rpt\n    response = @uma_command.uma_rp_authorize_rpt # Authorize RPT\nend\n\n\n\n\nGet GAT\n#\n\n\ndef get_gat \n    scopes = [\"http://photoz.example.com/dev/actions/add\",\"http://photoz.example.com/dev/actions/view\"]\n    gat = @uma_command.uma_rp_get_gat(scopes) # Pass scopes array to get GAT\nend",
            "title": "Ruby"
        },
        {
            "location": "/libraries/ruby/#oxd-ruby",
            "text": "",
            "title": "oxd Ruby"
        },
        {
            "location": "/libraries/ruby/#overview",
            "text": "The following documentation demonstrates how to use Gluu's commercial OAuth 2.0 client software,  oxd , to send users from a Ruby app to an OpenID Connect Provider (OP) for login. You can securely send users to any standard OP for login, including Google and the  free open source Gluu Server .",
            "title": "Overview"
        },
        {
            "location": "/libraries/ruby/#installation",
            "text": "Github sources    Rubygems",
            "title": "Installation"
        },
        {
            "location": "/libraries/ruby/#install-instructions",
            "text": "!!! Note :  \n    This library will not work if your website does not have SSL installed. Make sure your website runs on https:// before using this library.  The Ruby Client is installed using RubyGems. Please include following \nline in the Gemfile of the application using Oxd Ruby Library.  gem 'oxd-ruby', '~> 0.1.6'  Please run the bundle command after to install the  oxd-ruby  plugin.  $ bundle install",
            "title": "Install Instructions"
        },
        {
            "location": "/libraries/ruby/#configuration",
            "text": "The configurations must be generated first using the following command.  $ rails generate oxd:config  This command will install the  oxd_config.rb  initializer file in the  config/initializers  directory which contains all the global configuration options for the ruby plugin. The following configurations must be set before the plugin can be used.   config.oxd_host_ip  config.oxd_host_port  config.op_host   config.authorization_redirect_uri",
            "title": "Configuration"
        },
        {
            "location": "/libraries/ruby/#sample-code",
            "text": "API Docs   The plugin requires editing the  application_controller.rb  file to include the following snippet.  require 'oxd-ruby'\n\nbefore_filter :set_oxd_commands_instance\nprotected\n    def set_oxd_commands_instance\n        @oxd_command = Oxd::ClientOxdCommands.new\n        @uma_command = Oxd::UMACommands.new\n    end",
            "title": "Sample code"
        },
        {
            "location": "/libraries/ruby/#op-commands-sample",
            "text": "def register_site           \n    @oxd_command.register_site \n    authorization_url = @oxd_command.get_authorization_url\n    redirect_to authorization_url\nend\n\ndef login\n    if (params[:code].present?)\n        @access_token = @oxd_command.get_tokens_by_code( params[:code] ) \n    end\n        session.delete('oxd_access_token') if(session[:oxd_access_token].present?)\n        session[:oxd_access_token] = @access_token\n        session[:state] = params[:state]\n        session[:session_state] = params[:session_state]\n    @user = @oxd_command.get_user_info(session[:oxd_access_token])  \nend\n\ndef logout\n    if(session[:oxd_access_token])\n        @logout_url = @oxd_command.get_logout_uri(\n                session[:oxd_access_token], session[:state], session[:session_state]\n            )\n        redirect_to @logout_url\n    end     \nend",
            "title": "OP commands sample"
        },
        {
            "location": "/libraries/ruby/#uma-commands-sample",
            "text": "",
            "title": "UMA Commands sample"
        },
        {
            "location": "/libraries/ruby/#uma-rs-commands",
            "text": "def protect_resources\n    condition1 = {:httpMethods => [\"GET\"], :scopes => [\"http://photoz.example.com/dev/actions/view\"]}\n    condition2 = {:httpMethods => [\"PUT\", \"POST\"], :scopes => [\"http://photoz.example.com/dev/actions/add\"]}\n    @uma_command.uma_add_resource(\"/photo\", condition1, condition2)\n\n    response = @uma_command.uma_rs_protect # Register above resources with UMA RS\nend\n\n def check_access\n     # Pass the resource path and http method to check access\n    response = @uma_command.uma_rs_check_access('/photo', 'GET') \nend",
            "title": "UMA RS commands"
        },
        {
            "location": "/libraries/ruby/#uma-rp-commands",
            "text": "def get_rpt\n    rpt = @uma_command.uma_rp_get_rpt('false') # Get RPT\nend\n\ndef authorize_rpt\n    response = @uma_command.uma_rp_authorize_rpt # Authorize RPT\nend",
            "title": "UMA RP commands"
        },
        {
            "location": "/libraries/ruby/#get-gat",
            "text": "def get_gat \n    scopes = [\"http://photoz.example.com/dev/actions/add\",\"http://photoz.example.com/dev/actions/view\"]\n    gat = @uma_command.uma_rp_get_gat(scopes) # Pass scopes array to get GAT\nend",
            "title": "Get GAT"
        },
        {
            "location": "/libraries/csharp/",
            "text": "oxd-csharp\n#\n\n\nOverview\n#\n\n\nThe following documentation demonstrates \nhow to use Gluu's commercial OAuth 2.0 client software, \noxd\n, \nto send users from a C# app to an OpenID Connect Provider (OP) for login. \nYou can securely send users to any standard OP for login, including Google \nand the \nfree open source Gluu Server\n.\n\n\nInstallation\n#\n\n\n\n\nGithub sources\n\n\nGluu Server\n\n\noxd server\n\n\nTests in Github\n\n\nCSharp API Documentation\n\n\n\n\n!!! \nNote:\n Install Gluu server in Ubuntu 14 VM in your windows machine. \nVM will need at least 4GB or RAM and 2 CPU units. \nSo you can communicate with gluu server from your c# library.\n you can start oxd server in your windows machine it self. \n\n\nPrerequisite\n#\n\n\n1) You have to install gluu server in Ubuntu 14 VM and oxd-server in your hosting server to use oxd-csharp\n   library with your application.\n2) Application will not be working if your host does not have https://. \n\n\n\n\nSample Code\n#\n\n\nRegister Site\n#\n\n\nRequired parameters:\n\n\n op_host\n\n port        - the port of the oxd server\n* redirectURI - A URL which the OP is authorized to redirect the user after authorization.\n\n\nRequest:\n\n\npublic RegisterSiteResponse RegisterSite(string host, int port, string redirectUrl)\n    {\n        try\n        {\n            CommandClient client = new CommandClient(host, port);\n            RegisterSiteParams param = new RegisterSiteParams();\n            param.SetAuthorizationRedirectUri(redirectUrl);\n            param.SetPostLogoutRedirectUri(redirectUrl);\n            param.SetClientLogoutUri(Lists.newArrayList(new string[] { \"\" }));\n\n            Command cmd = new Command(CommandType.register_site);\n            cmd.setParamsObject(param);\n\n            string commandresponse = client.send(cmd);\n            RegisterSiteResponse response = new RegisterSiteResponse(JsonConvert.DeserializeObject<dynamic>(commandresponse).data);\n            Assert.IsNotNull(response);\n            Assert.IsTrue(!String.IsNullOrEmpty(response.getOxdId()));\n            StoredValues._oxd_id = response.getOxdId();\n            return response;\n        }\n        catch (Exception ex)\n        {\n            Console.WriteLine(ex.Message);\n            Logger.Debug(ex.Message);\n            return null;\n        }\n    }\n\n\n\n\nResponse:\n\n\n{\n    \"status\":\"ok\",\n    \"data\":{\n        \"oxd_id\":\"6F9619FF-8B86-D011-B42D-00CF4FC964FF\"\n    }\n}\n\n\n\n\nUpdate Site Registration\n#\n\n\nRequired parameters:\n\n\n op_host\n\n port\n\n\nRequest:\n\n\n    public UpdateSiteResponse UpdateSiteRegisteration(string host, int port)\n    {\n        try\n        {\n            CommandClient client = new CommandClient(host, port);\n            UpdateSiteParams param = new UpdateSiteParams();\n            param.SetOxdId(StoredValues._oxd_id);\n            param.SetAuthorizationRedirectUri(\"http://www.test.com/wp-login.php\");\n            param.SetPostLogoutRedirectUri(\"http://www.test.com/wp-login.php?action=logout&_wpnonce=a3c70643e9\");\n            param.SetApplicationType(\"web\");\n            param.SetRedirectUris(Lists.newArrayList(new string[] { \"http://www.test.com/wp-login.php\" }));\n            param.SetAcrValues(new List<string>());\n            param.SetClientJwksUri(\"\");\n            param.SetContacts(Lists.newArrayList(new string[] { \"test@gmail.com\" }));\n            param.SetGrantType(Lists.newArrayList(new string[] { \"authorization_code\" }));\n            param.SetClientTokenEndpointAuthMethod(\"\");\n            param.SetClientLogoutUri(Lists.newArrayList(new string[] { \"http://www.test.com/wp-login.php?action=logout&_wpnonce=a3c70643e9\" }));\n\n            Command cmd = new Command(CommandType.update_site_registration);\n            cmd.setParamsObject(param);\n\n            string commandresponse = client.send(cmd);\n            UpdateSiteResponse response = new UpdateSiteResponse(JsonConvert.DeserializeObject<dynamic>(commandresponse).data);\n            Assert.IsNotNull(response);\n            Assert.IsTrue(!String.IsNullOrEmpty(response.getOxdId()));\n            return response;\n        }\n        catch (Exception ex)\n        {\n            Console.WriteLine(ex.Message);\n            Logger.Debug(ex.Message);\n            return null;\n        }\n    } \n\n\n\n\nResponse:\n\n\n{\n    \"status\":\"ok\"\n}\n\n\n\n\nGet Authorization URL\n#\n\n\nRequired parameters:\n\n\n op_host\n\n port\n\n\nRequest:\n\n\n    public string GetAuthorizationURL(string host, int port)\n    {\n        try\n        {\n            CommandClient client = new CommandClient(host, port);\n\n            GetAuthorizationUrlParams param = new GetAuthorizationUrlParams();\n            param.SetOxdId(StoredValues._oxd_id);\n            param.SetAcrValues(new List<string>());\n\n            Command cmd = new Command(CommandType.get_authorization_url);\n            cmd.setParamsObject(param);\n\n            string response = client.send(cmd);\n            GetAuthorizationUrlResponse res = new GetAuthorizationUrlResponse(JsonConvert.DeserializeObject<dynamic>(response).data);\n\n            Assert.IsNotNull(res);\n            Assert.IsTrue(!String.IsNullOrEmpty(res.getAuthorizationUrl()));\n            return res.getAuthorizationUrl();\n        }\n        catch (Exception ex)\n        {\n            Console.WriteLine(ex.Message);\n            Logger.Debug(ex.Message);\n            return ex.Message;\n        }\n    }\n\n\n\n\nResponse:\n\n\n{\n    \"status\":\"ok\",\n    \"data\":{\n        \"authorization_url\":\"https://server.example.com/authorize?response_type=code&client_id=s6BhdRkqt3&redirect_uri=https%3A%2F%2Fclient.example.org%2Fcb&scope=openid%20profile&acr_values=duo&state=af0ifjsldkj&nonce=n-0S6_WzA2Mj\"\n    }\n}\n\n\n\n\nGet Tokens by Code\n#\n\n\nRequired parameters:\n\n\n op_host\n\n port\n\n userId\n\n userSecret\n\n\nRequest:\n\n\n    public GetTokensByCodeResponse GetTokenByCode(string host, int port, string userId, string userSecret)\n    {\n        try\n        {\n            CommandClient client = new CommandClient(host, port);\n            GetTokensByCodeParams param = new GetTokensByCodeParams();\n            param.SetOxdId(StoredValues._oxd_id);\n            param.SetCode(get_authorization_code.GetAuthorizationCode(host, port, userId, userSecret));\n            param.SetScopes(Lists.newArrayList(new string[] { \"openid\", \"profile\" }));\n            Command cmd = new Command(CommandType.get_tokens_by_code);\n            cmd.setParamsObject(param);\n            string commandresponse = client.send(cmd);\n            GetTokensByCodeResponse response = new GetTokensByCodeResponse(JsonConvert.DeserializeObject<dynamic>(commandresponse).data);\n            Assert.IsNotNull(response);\n            return response;\n        }\n        catch (Exception ex)\n        {\n            Console.WriteLine(ex.Message);\n            Logger.Debug(ex.Message);\n            return null;\n        }\n    }\n\n\n\n\nResponse:\n\n\n{\n    \"status\":\"ok\",\n    \"data\":{\n        \"access_token\":\"SlAV32hkKG\",\n        \"expires_in\":3600,\n        \"refresh_token\":\"aaAV32hkKG1\"\n        \"id_token\":\"eyJ0 ... NiJ9.eyJ1c ... I6IjIifX0.DeWt4Qu ... ZXso\",\n        \"id_token_claims\": {\n             \"iss\": \"https://server.example.com\",\n             \"sub\": \"24400320\",\n             \"aud\": \"s6BhdRkqt3\",\n             \"nonce\": \"n-0S6_WzA2Mj\",\n             \"exp\": 1311281970,\n             \"iat\": 1311280970,\n             \"at_hash\": \"MTIzNDU2Nzg5MDEyMzQ1Ng\"\n        }\n    }\n}\n\n\n\n\n\n!!!\nNote:\n \n    GetTokenByCode method further calls the GetAuthorizationCode for the Authorization code to be used\n\n\npublic static string GetAuthorizationCode(string host, int port, string userId, string userSecret)\n{\n    try\n    {\n        CommandClient client = new CommandClient(host, port);\n        GetAuthorizationCodeParams param = new GetAuthorizationCodeParams();\n        param.SetOxdId(StoredValues._oxd_id);\n        param.SetUserName(userId);\n        param.SetPassword(userSecret);\n        param.SetAcrValues(new List<string>());\n        Command cmd = new Command(CommandType.get_authorization_code);\n        cmd.setParamsObject(param);\n        string response = client.send(cmd);\n        GetAuthorizationCodeResponse res = new GetAuthorizationCodeResponse(JsonConvert.DeserializeObject<dynamic>(response).data);\n        Assert.IsNotNull(res);\n        Assert.IsTrue(!String.IsNullOrEmpty(res.getCode()));\n        return res.getCode();\n    }\n    catch (Exception ex)\n    {\n        Console.WriteLine(ex.Message);\n        Logger.Debug(ex.Message);\n        return ex.Message;\n    }\n}\n\n\n\n\nGet User Info\n#\n\n\nRequired parameters:\n\n\n op_host\n\n port\n* accessToken\n\n\nRequest:\n\n\n    public GetUserInfoResponse GetUserInfo(string host, int port, string accessToken)\n    {\n        try\n        {\n            CommandClient client = new CommandClient(host, port);\n\n            GetUserInfoParams param = new GetUserInfoParams();\n            param.setOxdId(StoredValues._oxd_id);\n            param.setAccessToken(accessToken);\n\n            Command cmd = new Command(CommandType.get_user_info);\n            cmd.setParamsObject(param);\n\n            string response = client.send(cmd);\n            GetUserInfoResponse res = new GetUserInfoResponse(JsonConvert.DeserializeObject<dynamic>(response).data);\n            Assert.IsNotNull(res);\n            return res;\n        }\n        catch (Exception ex)\n        {\n            Console.WriteLine(ex.Message);\n            Logger.Debug(ex.Message);\n            return null;\n        }\n    }   \n\n\n\n\nResponse:\n\n\n{\n    \"status\":\"ok\",\n    \"data\":{\n        \"claims\":{\n            \"sub\": [\"248289761001\"],\n            \"name\": [\"Jane Doe\"],\n            \"given_name\": [\"Jane\"],\n            \"family_name\": [\"Doe\"],\n            \"preferred_username\": [\"j.doe\"],\n            \"email\": [\"janedoe@example.com\"],\n            \"picture\": [\"http://example.com/janedoe/me.jpg\"]\n        }\n    }\n}\n\n\n\n\nLogout\n#\n\n\nRequired parameters:\n\n\n op_host\n\n port\n\n\nRequest:\n\n\n    public LogoutResponse GetLogoutURL(string host, int port)\n    {\n        try\n        {\n            CommandClient client = new CommandClient(host, port);\n\n            GetLogoutUrlParams param = new GetLogoutUrlParams();\n            param.setOxdId(StoredValues._oxd_id);\n            param.setIdTokenHint(\"dummy_token\"); \n            param.setState(Guid.NewGuid().ToString());\n\n            Command cmd = new Command(CommandType.get_logout_uri);\n            cmd.setParamsObject(param);\n\n            string response = client.send(cmd);\n            LogoutResponse res = new LogoutResponse(JsonConvert.DeserializeObject<dynamic>(response).data);\n            Assert.IsNotNull(res);\n            return res;\n        }\n        catch (Exception ex)\n        {\n            Console.WriteLine(ex.Message);\n            Logger.Debug(ex.Message);\n            return null;\n        }\n    }  \n\n\n\n\nResponse:\n\n\n{\n    \"status\":\"ok\",\n    \"data\":{\n        \"uri\":\"https://<server>/end_session?id_token_hint=<id token>&state=<state>&post_logout_redirect_uri=<...>\"\n    }\n}\n\n\n\n\nUMA RS Resource protection\n#\n\n\nRequest:\n\n\n   private UmaRsProtectResponse ProtectResources(OxdModel oxdModel)\n   {\n        var protectParams = new UmaRsProtectParams();\n        var protectClient = new UmaRsProtectClient();\n\n        //prepare input params for Protect Resource\n        protectParams.OxdId = oxdModel.OxdId;\n        protectParams.ProtectResources = new List<ProtectResource>\n        {\n            new ProtectResource\n            {\n                Path = \"/scim\",\n                ProtectConditions = new List<ProtectCondition>\n                {\n                    new ProtectCondition\n                    {\n                        HttpMethods = new List<string> { \"GET\" },\n                        Scopes = new List<string> { \"https://scim-test.gluu.org/identity/seam/resource/restv1/scim/vas1\" },      // Your hosted Gluu server URL\n                        TicketScopes = new List<string> { \"https://scim-test.gluu.org/identity/seam/resource/restv1/scim/vas1\" } // Your hosted Gluu server URL\n                    }\n                }\n            }\n        };\n\n        //Protect Resources\n        var protectResponse = protectClient.ProtectResources(oxdModel.OxdHost, oxdModel.OxdPort, protectParams);\n\n        //process response\n        if(protectResponse.Status.ToLower().Equals(\"ok\"))\n        {\n            return protectResponse;\n        }\n        throw new Exception(\"Procteting Resource is not successful. Check OXD Server log for error details.\");\n   }\n\n\n\n\nUMA RS Check access\n#\n\n\nRequest:\n\n\n    private UmaRsCheckAccessResponse CheckAccess(string rpt, string path, string httpMethod, OxdModel oxdModel)\n    {\n        var checkAccessParams = new UmaRsCheckAccessParams();\n        var checkAccessClient = new UmaRsCheckAccessClient();\n\n        //prepare input params for Check Access\n        checkAccessParams.OxdId = oxdModel.OxdId;\n        checkAccessParams.RPT = rpt;\n        checkAccessParams.Path = path;\n        checkAccessParams.HttpMethod = httpMethod;\n\n        //Check Access\n        var checkAccessResponse = checkAccessClient.CheckAccess(oxdModel.OxdHost, oxdModel.OxdPort, checkAccessParams);\n\n        //process response\n        return checkAccessResponse;\n    }   \n\n\n\n\nResponse:\n\n\nAccess Denied with valid Ticket \n\n\n\n\nUMA Get RPT\n#\n\n\nRequest:\n\n\n  private GetRPTResponse ObtainRpt(OxdModel oxdModel)\n    {\n        var getRptParams = new UmaRpGetRptParams();\n        var getRptClient = new UmaRpGetRptClient();\n\n        //prepare input params for Protect Resource\n        getRptParams.OxdId = oxdModel.OxdId;\n        getRptParams.ForceNew = false;\n\n        //Get RPT\n        var getRptResponse = getRptClient.GetRPT(oxdModel.OxdHost, oxdModel.OxdPort, getRptParams);\n\n        //process response\n        if (getRptResponse.Status.ToLower().Equals(\"ok\"))\n        {\n            return getRptResponse;\n        }\n\n        throw new Exception(\"Obtaining RPT is not successful. Check OXD Server log for error details.\");\n    } \n\n\n\n\nResponse:\n\n\nExpect a valid RPT is returned\n\n\n\n\n\n\nNote\n\n\nOnce you get valid RPT you need to follow this steps again:\n\n\n\n\nUMA RS Check access  with valid RPT\n#\n\n\nRequest:\n\n\nUMA RS Check access again with valid RPT\n\n\n\n\nResponse:\n\n\nAccess Denied with valid data\n\n\n\n\nAuthorize RPT\n#\n\n\nRequest:\n\n\n    private UmaRpAuthorizeRptResponse AuthorizeRpt(string rpt, string ticket, OxdModel oxdModel)\n    {\n        var authorizeRptParams = new UmaRpAuthorizeRptParams();\n        var authorizeRptClient = new UmaRpAuthorizeRptClient();\n\n        //prepare input params for Check Access\n        authorizeRptParams.OxdId = oxdModel.OxdId;\n        authorizeRptParams.RPT = rpt;\n        authorizeRptParams.Ticket = ticket;\n\n        //Authorize RPT\n        var authorizeRptResponse = authorizeRptClient.AuthorizeRpt(oxdModel.OxdHost, oxdModel.OxdPort, authorizeRptParams);\n\n        //process response\n        return authorizeRptResponse;\n    }\n\n\n\n\nResponse:\n\n\nStatus should be ok\n\n\n\n\nUMA RS Check access (Check Access again after authorizing RPT)\n#\n\n\nRequest:\n\n\nUMA RS Check access again after authorizing RPT \n\n\n\n\nResponse:\n\n\nAccess Granted\n\n\n\n\nUMA Get GAT\n#\n\n\nRequest:\n\n\npublic ActionResult GetGat(OxdModel oxd)\n{\n    var getGatInputParams = new GetGATParams();\n    var getGatClient = new GetGATClient();\n\n    //prepare input params for Getting GAT\n    getGatInputParams.OxdId = oxd.OxdId;\n    getGatInputParams.Scopes = new List<string> {\n                                    \"https://scim-test.gluu.org/identity/seam/resource/restv1/scim/vas1\",\n                                    \"https://scim-test.gluu.org/identity/seam/resource/restv1/scim/vas2\" };\n\n    //Get GAT\n    var getGatResponse = getGatClient.GetGat(oxd.OxdHost, oxd.OxdPort, getGatInputParams);\n\n    //Process response\n    return Json(new { getGatResponse = getGatResponse.Data.Rpt });\n}",
            "title": "CSharp"
        },
        {
            "location": "/libraries/csharp/#oxd-csharp",
            "text": "",
            "title": "oxd-csharp"
        },
        {
            "location": "/libraries/csharp/#overview",
            "text": "The following documentation demonstrates \nhow to use Gluu's commercial OAuth 2.0 client software,  oxd , \nto send users from a C# app to an OpenID Connect Provider (OP) for login. \nYou can securely send users to any standard OP for login, including Google \nand the  free open source Gluu Server .",
            "title": "Overview"
        },
        {
            "location": "/libraries/csharp/#installation",
            "text": "Github sources  Gluu Server  oxd server  Tests in Github  CSharp API Documentation   !!!  Note:  Install Gluu server in Ubuntu 14 VM in your windows machine. \nVM will need at least 4GB or RAM and 2 CPU units. \nSo you can communicate with gluu server from your c# library.\n you can start oxd server in your windows machine it self.",
            "title": "Installation"
        },
        {
            "location": "/libraries/csharp/#prerequisite",
            "text": "1) You have to install gluu server in Ubuntu 14 VM and oxd-server in your hosting server to use oxd-csharp\n   library with your application.\n2) Application will not be working if your host does not have https://.",
            "title": "Prerequisite"
        },
        {
            "location": "/libraries/csharp/#sample-code",
            "text": "",
            "title": "Sample Code"
        },
        {
            "location": "/libraries/csharp/#register-site",
            "text": "Required parameters:   op_host  port        - the port of the oxd server\n* redirectURI - A URL which the OP is authorized to redirect the user after authorization.  Request:  public RegisterSiteResponse RegisterSite(string host, int port, string redirectUrl)\n    {\n        try\n        {\n            CommandClient client = new CommandClient(host, port);\n            RegisterSiteParams param = new RegisterSiteParams();\n            param.SetAuthorizationRedirectUri(redirectUrl);\n            param.SetPostLogoutRedirectUri(redirectUrl);\n            param.SetClientLogoutUri(Lists.newArrayList(new string[] { \"\" }));\n\n            Command cmd = new Command(CommandType.register_site);\n            cmd.setParamsObject(param);\n\n            string commandresponse = client.send(cmd);\n            RegisterSiteResponse response = new RegisterSiteResponse(JsonConvert.DeserializeObject<dynamic>(commandresponse).data);\n            Assert.IsNotNull(response);\n            Assert.IsTrue(!String.IsNullOrEmpty(response.getOxdId()));\n            StoredValues._oxd_id = response.getOxdId();\n            return response;\n        }\n        catch (Exception ex)\n        {\n            Console.WriteLine(ex.Message);\n            Logger.Debug(ex.Message);\n            return null;\n        }\n    }  Response:  {\n    \"status\":\"ok\",\n    \"data\":{\n        \"oxd_id\":\"6F9619FF-8B86-D011-B42D-00CF4FC964FF\"\n    }\n}",
            "title": "Register Site"
        },
        {
            "location": "/libraries/csharp/#update-site-registration",
            "text": "Required parameters:   op_host  port  Request:      public UpdateSiteResponse UpdateSiteRegisteration(string host, int port)\n    {\n        try\n        {\n            CommandClient client = new CommandClient(host, port);\n            UpdateSiteParams param = new UpdateSiteParams();\n            param.SetOxdId(StoredValues._oxd_id);\n            param.SetAuthorizationRedirectUri(\"http://www.test.com/wp-login.php\");\n            param.SetPostLogoutRedirectUri(\"http://www.test.com/wp-login.php?action=logout&_wpnonce=a3c70643e9\");\n            param.SetApplicationType(\"web\");\n            param.SetRedirectUris(Lists.newArrayList(new string[] { \"http://www.test.com/wp-login.php\" }));\n            param.SetAcrValues(new List<string>());\n            param.SetClientJwksUri(\"\");\n            param.SetContacts(Lists.newArrayList(new string[] { \"test@gmail.com\" }));\n            param.SetGrantType(Lists.newArrayList(new string[] { \"authorization_code\" }));\n            param.SetClientTokenEndpointAuthMethod(\"\");\n            param.SetClientLogoutUri(Lists.newArrayList(new string[] { \"http://www.test.com/wp-login.php?action=logout&_wpnonce=a3c70643e9\" }));\n\n            Command cmd = new Command(CommandType.update_site_registration);\n            cmd.setParamsObject(param);\n\n            string commandresponse = client.send(cmd);\n            UpdateSiteResponse response = new UpdateSiteResponse(JsonConvert.DeserializeObject<dynamic>(commandresponse).data);\n            Assert.IsNotNull(response);\n            Assert.IsTrue(!String.IsNullOrEmpty(response.getOxdId()));\n            return response;\n        }\n        catch (Exception ex)\n        {\n            Console.WriteLine(ex.Message);\n            Logger.Debug(ex.Message);\n            return null;\n        }\n    }   Response:  {\n    \"status\":\"ok\"\n}",
            "title": "Update Site Registration"
        },
        {
            "location": "/libraries/csharp/#get-authorization-url",
            "text": "Required parameters:   op_host  port  Request:      public string GetAuthorizationURL(string host, int port)\n    {\n        try\n        {\n            CommandClient client = new CommandClient(host, port);\n\n            GetAuthorizationUrlParams param = new GetAuthorizationUrlParams();\n            param.SetOxdId(StoredValues._oxd_id);\n            param.SetAcrValues(new List<string>());\n\n            Command cmd = new Command(CommandType.get_authorization_url);\n            cmd.setParamsObject(param);\n\n            string response = client.send(cmd);\n            GetAuthorizationUrlResponse res = new GetAuthorizationUrlResponse(JsonConvert.DeserializeObject<dynamic>(response).data);\n\n            Assert.IsNotNull(res);\n            Assert.IsTrue(!String.IsNullOrEmpty(res.getAuthorizationUrl()));\n            return res.getAuthorizationUrl();\n        }\n        catch (Exception ex)\n        {\n            Console.WriteLine(ex.Message);\n            Logger.Debug(ex.Message);\n            return ex.Message;\n        }\n    }  Response:  {\n    \"status\":\"ok\",\n    \"data\":{\n        \"authorization_url\":\"https://server.example.com/authorize?response_type=code&client_id=s6BhdRkqt3&redirect_uri=https%3A%2F%2Fclient.example.org%2Fcb&scope=openid%20profile&acr_values=duo&state=af0ifjsldkj&nonce=n-0S6_WzA2Mj\"\n    }\n}",
            "title": "Get Authorization URL"
        },
        {
            "location": "/libraries/csharp/#get-tokens-by-code",
            "text": "Required parameters:   op_host  port  userId  userSecret  Request:      public GetTokensByCodeResponse GetTokenByCode(string host, int port, string userId, string userSecret)\n    {\n        try\n        {\n            CommandClient client = new CommandClient(host, port);\n            GetTokensByCodeParams param = new GetTokensByCodeParams();\n            param.SetOxdId(StoredValues._oxd_id);\n            param.SetCode(get_authorization_code.GetAuthorizationCode(host, port, userId, userSecret));\n            param.SetScopes(Lists.newArrayList(new string[] { \"openid\", \"profile\" }));\n            Command cmd = new Command(CommandType.get_tokens_by_code);\n            cmd.setParamsObject(param);\n            string commandresponse = client.send(cmd);\n            GetTokensByCodeResponse response = new GetTokensByCodeResponse(JsonConvert.DeserializeObject<dynamic>(commandresponse).data);\n            Assert.IsNotNull(response);\n            return response;\n        }\n        catch (Exception ex)\n        {\n            Console.WriteLine(ex.Message);\n            Logger.Debug(ex.Message);\n            return null;\n        }\n    }  Response:  {\n    \"status\":\"ok\",\n    \"data\":{\n        \"access_token\":\"SlAV32hkKG\",\n        \"expires_in\":3600,\n        \"refresh_token\":\"aaAV32hkKG1\"\n        \"id_token\":\"eyJ0 ... NiJ9.eyJ1c ... I6IjIifX0.DeWt4Qu ... ZXso\",\n        \"id_token_claims\": {\n             \"iss\": \"https://server.example.com\",\n             \"sub\": \"24400320\",\n             \"aud\": \"s6BhdRkqt3\",\n             \"nonce\": \"n-0S6_WzA2Mj\",\n             \"exp\": 1311281970,\n             \"iat\": 1311280970,\n             \"at_hash\": \"MTIzNDU2Nzg5MDEyMzQ1Ng\"\n        }\n    }\n}  !!! Note:  \n    GetTokenByCode method further calls the GetAuthorizationCode for the Authorization code to be used  public static string GetAuthorizationCode(string host, int port, string userId, string userSecret)\n{\n    try\n    {\n        CommandClient client = new CommandClient(host, port);\n        GetAuthorizationCodeParams param = new GetAuthorizationCodeParams();\n        param.SetOxdId(StoredValues._oxd_id);\n        param.SetUserName(userId);\n        param.SetPassword(userSecret);\n        param.SetAcrValues(new List<string>());\n        Command cmd = new Command(CommandType.get_authorization_code);\n        cmd.setParamsObject(param);\n        string response = client.send(cmd);\n        GetAuthorizationCodeResponse res = new GetAuthorizationCodeResponse(JsonConvert.DeserializeObject<dynamic>(response).data);\n        Assert.IsNotNull(res);\n        Assert.IsTrue(!String.IsNullOrEmpty(res.getCode()));\n        return res.getCode();\n    }\n    catch (Exception ex)\n    {\n        Console.WriteLine(ex.Message);\n        Logger.Debug(ex.Message);\n        return ex.Message;\n    }\n}",
            "title": "Get Tokens by Code"
        },
        {
            "location": "/libraries/csharp/#get-user-info",
            "text": "Required parameters:   op_host  port\n* accessToken  Request:      public GetUserInfoResponse GetUserInfo(string host, int port, string accessToken)\n    {\n        try\n        {\n            CommandClient client = new CommandClient(host, port);\n\n            GetUserInfoParams param = new GetUserInfoParams();\n            param.setOxdId(StoredValues._oxd_id);\n            param.setAccessToken(accessToken);\n\n            Command cmd = new Command(CommandType.get_user_info);\n            cmd.setParamsObject(param);\n\n            string response = client.send(cmd);\n            GetUserInfoResponse res = new GetUserInfoResponse(JsonConvert.DeserializeObject<dynamic>(response).data);\n            Assert.IsNotNull(res);\n            return res;\n        }\n        catch (Exception ex)\n        {\n            Console.WriteLine(ex.Message);\n            Logger.Debug(ex.Message);\n            return null;\n        }\n    }     Response:  {\n    \"status\":\"ok\",\n    \"data\":{\n        \"claims\":{\n            \"sub\": [\"248289761001\"],\n            \"name\": [\"Jane Doe\"],\n            \"given_name\": [\"Jane\"],\n            \"family_name\": [\"Doe\"],\n            \"preferred_username\": [\"j.doe\"],\n            \"email\": [\"janedoe@example.com\"],\n            \"picture\": [\"http://example.com/janedoe/me.jpg\"]\n        }\n    }\n}",
            "title": "Get User Info"
        },
        {
            "location": "/libraries/csharp/#logout",
            "text": "Required parameters:   op_host  port  Request:      public LogoutResponse GetLogoutURL(string host, int port)\n    {\n        try\n        {\n            CommandClient client = new CommandClient(host, port);\n\n            GetLogoutUrlParams param = new GetLogoutUrlParams();\n            param.setOxdId(StoredValues._oxd_id);\n            param.setIdTokenHint(\"dummy_token\"); \n            param.setState(Guid.NewGuid().ToString());\n\n            Command cmd = new Command(CommandType.get_logout_uri);\n            cmd.setParamsObject(param);\n\n            string response = client.send(cmd);\n            LogoutResponse res = new LogoutResponse(JsonConvert.DeserializeObject<dynamic>(response).data);\n            Assert.IsNotNull(res);\n            return res;\n        }\n        catch (Exception ex)\n        {\n            Console.WriteLine(ex.Message);\n            Logger.Debug(ex.Message);\n            return null;\n        }\n    }    Response:  {\n    \"status\":\"ok\",\n    \"data\":{\n        \"uri\":\"https://<server>/end_session?id_token_hint=<id token>&state=<state>&post_logout_redirect_uri=<...>\"\n    }\n}",
            "title": "Logout"
        },
        {
            "location": "/libraries/csharp/#uma-rs-resource-protection",
            "text": "Request:     private UmaRsProtectResponse ProtectResources(OxdModel oxdModel)\n   {\n        var protectParams = new UmaRsProtectParams();\n        var protectClient = new UmaRsProtectClient();\n\n        //prepare input params for Protect Resource\n        protectParams.OxdId = oxdModel.OxdId;\n        protectParams.ProtectResources = new List<ProtectResource>\n        {\n            new ProtectResource\n            {\n                Path = \"/scim\",\n                ProtectConditions = new List<ProtectCondition>\n                {\n                    new ProtectCondition\n                    {\n                        HttpMethods = new List<string> { \"GET\" },\n                        Scopes = new List<string> { \"https://scim-test.gluu.org/identity/seam/resource/restv1/scim/vas1\" },      // Your hosted Gluu server URL\n                        TicketScopes = new List<string> { \"https://scim-test.gluu.org/identity/seam/resource/restv1/scim/vas1\" } // Your hosted Gluu server URL\n                    }\n                }\n            }\n        };\n\n        //Protect Resources\n        var protectResponse = protectClient.ProtectResources(oxdModel.OxdHost, oxdModel.OxdPort, protectParams);\n\n        //process response\n        if(protectResponse.Status.ToLower().Equals(\"ok\"))\n        {\n            return protectResponse;\n        }\n        throw new Exception(\"Procteting Resource is not successful. Check OXD Server log for error details.\");\n   }",
            "title": "UMA RS Resource protection"
        },
        {
            "location": "/libraries/csharp/#uma-rs-check-access",
            "text": "Request:      private UmaRsCheckAccessResponse CheckAccess(string rpt, string path, string httpMethod, OxdModel oxdModel)\n    {\n        var checkAccessParams = new UmaRsCheckAccessParams();\n        var checkAccessClient = new UmaRsCheckAccessClient();\n\n        //prepare input params for Check Access\n        checkAccessParams.OxdId = oxdModel.OxdId;\n        checkAccessParams.RPT = rpt;\n        checkAccessParams.Path = path;\n        checkAccessParams.HttpMethod = httpMethod;\n\n        //Check Access\n        var checkAccessResponse = checkAccessClient.CheckAccess(oxdModel.OxdHost, oxdModel.OxdPort, checkAccessParams);\n\n        //process response\n        return checkAccessResponse;\n    }     Response:  Access Denied with valid Ticket",
            "title": "UMA RS Check access"
        },
        {
            "location": "/libraries/csharp/#uma-get-rpt",
            "text": "Request:    private GetRPTResponse ObtainRpt(OxdModel oxdModel)\n    {\n        var getRptParams = new UmaRpGetRptParams();\n        var getRptClient = new UmaRpGetRptClient();\n\n        //prepare input params for Protect Resource\n        getRptParams.OxdId = oxdModel.OxdId;\n        getRptParams.ForceNew = false;\n\n        //Get RPT\n        var getRptResponse = getRptClient.GetRPT(oxdModel.OxdHost, oxdModel.OxdPort, getRptParams);\n\n        //process response\n        if (getRptResponse.Status.ToLower().Equals(\"ok\"))\n        {\n            return getRptResponse;\n        }\n\n        throw new Exception(\"Obtaining RPT is not successful. Check OXD Server log for error details.\");\n    }   Response:  Expect a valid RPT is returned   Note  Once you get valid RPT you need to follow this steps again:",
            "title": "UMA Get RPT"
        },
        {
            "location": "/libraries/csharp/#uma-rs-check-access-with-valid-rpt",
            "text": "Request:  UMA RS Check access again with valid RPT  Response:  Access Denied with valid data",
            "title": "UMA RS Check access  with valid RPT"
        },
        {
            "location": "/libraries/csharp/#authorize-rpt",
            "text": "Request:      private UmaRpAuthorizeRptResponse AuthorizeRpt(string rpt, string ticket, OxdModel oxdModel)\n    {\n        var authorizeRptParams = new UmaRpAuthorizeRptParams();\n        var authorizeRptClient = new UmaRpAuthorizeRptClient();\n\n        //prepare input params for Check Access\n        authorizeRptParams.OxdId = oxdModel.OxdId;\n        authorizeRptParams.RPT = rpt;\n        authorizeRptParams.Ticket = ticket;\n\n        //Authorize RPT\n        var authorizeRptResponse = authorizeRptClient.AuthorizeRpt(oxdModel.OxdHost, oxdModel.OxdPort, authorizeRptParams);\n\n        //process response\n        return authorizeRptResponse;\n    }  Response:  Status should be ok",
            "title": "Authorize RPT"
        },
        {
            "location": "/libraries/csharp/#uma-rs-check-access-check-access-again-after-authorizing-rpt",
            "text": "Request:  UMA RS Check access again after authorizing RPT   Response:  Access Granted",
            "title": "UMA RS Check access (Check Access again after authorizing RPT)"
        },
        {
            "location": "/libraries/csharp/#uma-get-gat",
            "text": "Request:  public ActionResult GetGat(OxdModel oxd)\n{\n    var getGatInputParams = new GetGATParams();\n    var getGatClient = new GetGATClient();\n\n    //prepare input params for Getting GAT\n    getGatInputParams.OxdId = oxd.OxdId;\n    getGatInputParams.Scopes = new List<string> {\n                                    \"https://scim-test.gluu.org/identity/seam/resource/restv1/scim/vas1\",\n                                    \"https://scim-test.gluu.org/identity/seam/resource/restv1/scim/vas2\" };\n\n    //Get GAT\n    var getGatResponse = getGatClient.GetGat(oxd.OxdHost, oxd.OxdPort, getGatInputParams);\n\n    //Process response\n    return Json(new { getGatResponse = getGatResponse.Data.Rpt });\n}",
            "title": "UMA Get GAT"
        },
        {
            "location": "/libraries/perl/",
            "text": "oxd Perl\n#\n\n\nOverview\n#\n\n\nThe following documentation demonstrates \nhow to use Gluu's commercial OAuth 2.0 client software, \n\noxd\n, to send users from a Perl app to an \nOpenID Connect Provider (OP) for login. You can securely send users to \nany standard OP for login, including Google and \nthe \nfree open source Gluu Server\n.\n\n\nInstallation\n#\n\n\nSource\n\n\noxd-perl source is available on Github:\n\n\n\n\nGithub sources\n\n\n\n\noxd-perl source is available on cpan:\n\n\n\n\nOxdPerlModule\n\n\n\n\nDownload and install manually using following command\n\n\n\nPath : /var/www/html/oxd-perl/oxdPerl/\n\nperl Build.PL\n./Build\n./Build test\nsudo ./Build install\n\n\n\n\n\nInstall from http://search.cpan.org\n\n\n\nRun following commands in terminal\n\ncpan \ncpan > install INDERPAL/OxdPerlModule-0.01.tar.gz\n\n\n\n\n\nConfiguration\n#\n\n\nThe oxd-perl configuration file is located in 'oxd-settings.json'. The values here are used during registration. For a full list of supported oxd configuration parameters, see the oxd documentation Below is a typical configuration data set for registration:\n\n\n    {\n      \"op_host\": \"https://ce-dev2.gluu.org\",\n      \"oxd_host_port\":8099,\n      \"authorization_redirect_uri\" : \"https://oxd-perl-example.com/login.cgi\",\n      \"post_logout_redirect_uri\" : \"https://oxd-perl-example.com/logout.cgi\",\n      \"scope\" : [ \"openid\", \"profile\",\"uma_protection\",\"uma_authorization\" ],\n      \"application_type\" : \"web\",\n      \"response_types\" : [\"code\"],\n      \"grant_types\":[\"authorization_code\"],\n      \"acr_values\" : [ \"basic\" ]\n    }\n\n\n\n\n\n\noxd_host_port - oxd port or socket\n\n\n\n\nSample code\n#\n\n\nOxdConfig.pm\n#\n\n\nClass description.\nOxd RP config.\n\n\n\nExample\n\n\n\nOxdConfig:\n\n    Configuration Values from oxd-settings.json\n\n    $object = new OxdConfig();\n    my $opHost = $object->getOpHost();\n    my $oxdHostPort = $object->getOxdHostPort();\n    my $authorizationRedirectUrl = $object->getAuthorizationRedirectUrl();\n    my $postLogoutRedirectUrl = $object->setPostLogoutRedirectUrl();\n    my $scope = $object->getScope();\n    my $applicationType = $object->getApplicationType();\n    my $responseType = $object->getResponseType();\n    my $grantType = $object->getGrantTypes();\n    my $acrValues = $object->getAcrValues();\n\n\n\n\n\nOxdRegister.pm\n#\n\n\n\n\nRegister_site protocol description\n.\n\n\n\n\nExample\n\n\nOxdRegister:\nmy $register_site = new OxdRegister( );\n\n$register_site->setRequestOpHost($gluu_server_url);\n$register_site->setRequestAcrValues($acrValues);\n$register_site->setRequestAuthorizationRedirectUri($authorizationRedirectUrl);\n$register_site->setRequestPostLogoutRedirectUri($postLogoutRedirectUrl);\n$register_site->setRequestContacts([$emal]);\n$register_site->setRequestGrantTypes($grantType);\n$register_site->setRequestResponseTypes($responseType);\n$register_site->setRequestScope($scope);\n$register_site->setRequestApplicationType($applicationType);\n$register_site->request();\n\n# storing data in the session\n$session->param('oxd_id', $register_site->getResponseOxdId());\n\n\n\n\n\nUpdateRegistration.pm\n#\n\n\n\n\nUpdate_site_registration protocol description\n.\n\n\n\n\nExample\n\n\nUpdateRegistration:\n\n$update_site_registration = new UpdateRegistration();\n\n$update_site_registration->setRequestAcrValues($acrValues);\n$update_site_registration->setRequestOxdId($oxd_id);\n$update_site_registration->setRequestAuthorizationRedirectUri($authorizationRedirectUrl);\n$update_site_registration->setRequestPostLogoutRedirectUri($postLogoutRedirectUrl);\n$update_site_registration->setRequestContacts([$emal]);\n$update_site_registration->setRequestGrantTypes($grantType);\n$update_site_registration->setRequestResponseTypes($responseType);\n$update_site_registration->setRequestScope($scope);\n$update_site_registration->request();\n\n$session->param('oxd_id', $update_site_registration->getResponseOxdId());\n\n\n\n\n\nGetAuthorizationUrl.pm\n#\n\n\n\n\nGet_authorization_url protocol description\n.\n\n\n\n\nExample\n\n\nGetAuthorizationUrl:\n\n$get_authorization_url = new GetAuthorizationUrl( );\n$get_authorization_url->setRequestOxdId($session->param('oxd_id'));\n$get_authorization_url->setRequestScope($scope);\n$get_authorization_url->setRequestAcrValues($acrValues);\n$get_authorization_url->request();\nmy $oxdurl = $get_authorization_url->getResponseAuthorizationUrl();\n\n\n\n\nGetTokenByCode.pm\n#\n\n\n\n\nGet_tokens_by_code protocol description\n.\n\n\n\n\nExample\n\n\nGetTokenByCode:\n\nmy $oxd_id = $cgi->escapeHTML($session->param('oxd_id'));\nmy $code = $cgi->escapeHTML($cgi->param(\"code\"));\nmy $state = $cgi->escapeHTML($cgi->param(\"state\"));\n\n$get_tokens_by_code = new GetTokenByCode();\n$get_tokens_by_code->setRequestOxdId($oxd_id);\n$get_tokens_by_code->setRequestCode($code);\n$get_tokens_by_code->setRequestState($state);\n$get_tokens_by_code->request();\n#store values in sessions\n$session->param('user_oxd_id_token', $get_tokens_by_code->getResponseIdToken());\n$session->param('state', $state);\n$session->param('session_state', $cgi->escapeHTML($cgi->param(\"session_state\")));\n\nprint Dumper( $get_user_info->getResponseObject() );        \n\n\n\n\n\nGetUserInfo.pm\n#\n\n\n\n\nGet_user_info protocol description\n.\n\n\n\n\nExample\n\n\nGetUserInfo:\n\nmy $oxd_id = $cgi->escapeHTML($session->param('oxd_id'));\n\n$get_user_info = new GetUserInfo();\n$get_user_info->setRequestOxdId($oxd_id);\n$get_user_info->setRequestAccessToken($get_tokens_by_code->getResponseAccessToken());\n$get_user_info->request();\n\nprint Dumper( $get_user_info->getResponseObject() );\n\n\n\n\n\nOxdLogout.pm\n#\n\n\n\n\nGet_logout_uri protocol description\n.\n\n\n\n\nExample\n\n\nOxdLogout:\n\nmy $oxd_id = $cgi->escapeHTML($session->param('oxd_id'));\nmy $user_oxd_id_token = $cgi->escapeHTML($session->param(\"user_oxd_id_token\"));\nmy $session_state = $cgi->escapeHTML($session->param(\"session_state\"));\nmy $state = $cgi->escapeHTML($session->param(\"state\"));\n\n$logout = new OxdLogout();\n$logout->setRequestOxdId($oxd_id);\n$logout->setRequestPostLogoutRedirectUri($postLogoutRedirectUrl);\n$logout->setRequestIdToken($user_oxd_id_token);\n$logout->setRequestSessionState($session_state);\n$logout->setRequestState($state);\n$logout->request();\n\n$session->delete();\n$logoutUrl = $logout->getResponseObject()->{data}->{uri};\n\n\n\n\n\nFor UMA authentications open this url in browser\n#\n\n\n\n\nhttps://oxd-perl-example.com/uma.cgi\n.\n\n\n\n\nUmaRsProtect.pm\n#\n\n\n\n\nUma_rs_protect protocol description\n.\n\n\n\n\nExample\n\n\nUmaRsProtect:\n\nmy $oxdId = $session->param('oxd_id');\n\n$uma_rs_protect = new UmaRsProtect();\n$uma_rs_protect->setRequestOxdId($oxdId);\n\n$uma_rs_protect->addConditionForPath([\"GET\"],[\"https://photoz.example.com/dev/actions/view\"], [\"https://photoz.example.com/dev/actions/view\"]);\n$uma_rs_protect->addConditionForPath([\"POST\"],[ \"https://photoz.example.com/dev/actions/add\"],[ \"https://photoz.example.com/dev/actions/add\"]);\n$uma_rs_protect->addConditionForPath([\"DELETE\"],[\"https://photoz.example.com/dev/actions/remove\"], [\"https://photoz.example.com/dev/actions/remove\"]);\n$uma_rs_protect->addResource('/photo');\n\n$uma_rs_protect->request();\nprint Dumper( $uma_rs_protect->getResponseObject() );\n\n\n\n\n\n\nUmaRsCheckAccess.pm\n#\n\n\n\n\nUma_rs_check_access protocol description\n.\n\n\n\n\nExample\n\n\nUmaRsCheckAccess:\n\nmy $oxdId = $session->param('oxd_id');\nmy $umaRpt = $session->param('uma_rpt');\n\n$uma_rs_authorize_rpt = new UmaRsCheckAccess();\n$uma_rs_authorize_rpt->setRequestOxdId($oxdId);\n$uma_rs_authorize_rpt->setRequestRpt($umaRpt);\n$uma_rs_authorize_rpt->setRequestPath(\"/photo\");\n$uma_rs_authorize_rpt->setRequestHttpMethod(\"GET\");\n$uma_rs_authorize_rpt->request();\n\nprint Dumper($uma_rs_authorize_rpt->getResponseObject());\nmy $uma_ticket= $uma_rs_authorize_rpt->getResponseTicket();\n$session->param('uma_ticket', $uma_ticket);\n\n\n\n\n\nUmaRpGetRpt.pm\n#\n\n\n\n\nUma_rp_get_rpt protocol description\n.\n\n\n\n\nExample\n\n\nUmaRpGetRpt:\n\nmy $oxdId = $session->param('oxd_id');\n\n\n$uma_rp_get_rpt = new UmaRpGetRpt();\n$uma_rp_get_rpt->setRequestOxdId($oxdId);\n$uma_rp_get_rpt->request();\n\nprint Dumper($uma_rp_get_rpt->getResponseObject());\n\nmy $uma_rpt= $uma_rp_get_rpt->getResponseRpt();\n$session->param('uma_rpt', $uma_rpt);\n\n\n\n\n\nUmaRpAuthorizeRpt.pm\n#\n\n\n\n\nUma_rp_authorize_rpt protocol description\n.\n\n\n\n\nExample\n\n\nUmaRpAuthorizeRpt:\n\nmy $oxdId = $session->param('oxd_id');\nmy $uma_rpt = $session->param('uma_rpt');\nmy $uma_ticket = $session->param('uma_ticket');\n\n$uma_rp_authorize_rpt = new UmaRpAuthorizeRpt();\n$uma_rp_authorize_rpt->setRequestOxdId($oxdId);\n$uma_rp_authorize_rpt->setRequestRpt($uma_rpt);\n$uma_rp_authorize_rpt->setRequestTicket($uma_ticket);\n$uma_rp_authorize_rpt->request();\n\nprint Dumper($uma_rp_authorize_rpt->getResponseObject());\n\n\n\n\n\nUmaRpGetGat.pm\n#\n\n\n\n\nUma_rp_get_gat protocol description\n.\n\n\n\n\nExample\n\n\nUmaRpGetGat:\n\nmy $oxdId = $session->param('oxd_id');\n\n$uma_rp_get_gat = new UmaRpGetGat();\n$uma_rp_get_gat->setRequestOxdId($oxdId);\n$uma_rp_get_gat->setRequestScopes([\"https://photoz.example.com/dev/actions/add\",\"https://photoz.example.com/dev/actions/view\", \"https://photoz.example.com/dev/actions/edit\"]);\n$uma_rp_get_gat->request();\n\nprint Dumper( $uma_rp_get_gat->getResponseObject() );\n\nmy $uma_gat= $uma_rp_get_gat->getResponseGat();\n$session->param('uma_gat', $uma_gat);\nprint Dumper( $uma_rp_get_gat->getResponseGat() );",
            "title": "Perl"
        },
        {
            "location": "/libraries/perl/#oxd-perl",
            "text": "",
            "title": "oxd Perl"
        },
        {
            "location": "/libraries/perl/#overview",
            "text": "The following documentation demonstrates \nhow to use Gluu's commercial OAuth 2.0 client software,  oxd , to send users from a Perl app to an \nOpenID Connect Provider (OP) for login. You can securely send users to \nany standard OP for login, including Google and \nthe  free open source Gluu Server .",
            "title": "Overview"
        },
        {
            "location": "/libraries/perl/#installation",
            "text": "Source  oxd-perl source is available on Github:   Github sources   oxd-perl source is available on cpan:   OxdPerlModule   Download and install manually using following command  \nPath : /var/www/html/oxd-perl/oxdPerl/\n\nperl Build.PL\n./Build\n./Build test\nsudo ./Build install  Install from http://search.cpan.org  \nRun following commands in terminal\n\ncpan \ncpan > install INDERPAL/OxdPerlModule-0.01.tar.gz",
            "title": "Installation"
        },
        {
            "location": "/libraries/perl/#configuration",
            "text": "The oxd-perl configuration file is located in 'oxd-settings.json'. The values here are used during registration. For a full list of supported oxd configuration parameters, see the oxd documentation Below is a typical configuration data set for registration:      {\n      \"op_host\": \"https://ce-dev2.gluu.org\",\n      \"oxd_host_port\":8099,\n      \"authorization_redirect_uri\" : \"https://oxd-perl-example.com/login.cgi\",\n      \"post_logout_redirect_uri\" : \"https://oxd-perl-example.com/logout.cgi\",\n      \"scope\" : [ \"openid\", \"profile\",\"uma_protection\",\"uma_authorization\" ],\n      \"application_type\" : \"web\",\n      \"response_types\" : [\"code\"],\n      \"grant_types\":[\"authorization_code\"],\n      \"acr_values\" : [ \"basic\" ]\n    }   oxd_host_port - oxd port or socket",
            "title": "Configuration"
        },
        {
            "location": "/libraries/perl/#sample-code",
            "text": "",
            "title": "Sample code"
        },
        {
            "location": "/libraries/perl/#oxdconfigpm",
            "text": "Class description.\nOxd RP config.  Example  \nOxdConfig:\n\n    Configuration Values from oxd-settings.json\n\n    $object = new OxdConfig();\n    my $opHost = $object->getOpHost();\n    my $oxdHostPort = $object->getOxdHostPort();\n    my $authorizationRedirectUrl = $object->getAuthorizationRedirectUrl();\n    my $postLogoutRedirectUrl = $object->setPostLogoutRedirectUrl();\n    my $scope = $object->getScope();\n    my $applicationType = $object->getApplicationType();\n    my $responseType = $object->getResponseType();\n    my $grantType = $object->getGrantTypes();\n    my $acrValues = $object->getAcrValues();",
            "title": "OxdConfig.pm"
        },
        {
            "location": "/libraries/perl/#oxdregisterpm",
            "text": "Register_site protocol description .   Example  OxdRegister:\nmy $register_site = new OxdRegister( );\n\n$register_site->setRequestOpHost($gluu_server_url);\n$register_site->setRequestAcrValues($acrValues);\n$register_site->setRequestAuthorizationRedirectUri($authorizationRedirectUrl);\n$register_site->setRequestPostLogoutRedirectUri($postLogoutRedirectUrl);\n$register_site->setRequestContacts([$emal]);\n$register_site->setRequestGrantTypes($grantType);\n$register_site->setRequestResponseTypes($responseType);\n$register_site->setRequestScope($scope);\n$register_site->setRequestApplicationType($applicationType);\n$register_site->request();\n\n# storing data in the session\n$session->param('oxd_id', $register_site->getResponseOxdId());",
            "title": "OxdRegister.pm"
        },
        {
            "location": "/libraries/perl/#updateregistrationpm",
            "text": "Update_site_registration protocol description .   Example  UpdateRegistration:\n\n$update_site_registration = new UpdateRegistration();\n\n$update_site_registration->setRequestAcrValues($acrValues);\n$update_site_registration->setRequestOxdId($oxd_id);\n$update_site_registration->setRequestAuthorizationRedirectUri($authorizationRedirectUrl);\n$update_site_registration->setRequestPostLogoutRedirectUri($postLogoutRedirectUrl);\n$update_site_registration->setRequestContacts([$emal]);\n$update_site_registration->setRequestGrantTypes($grantType);\n$update_site_registration->setRequestResponseTypes($responseType);\n$update_site_registration->setRequestScope($scope);\n$update_site_registration->request();\n\n$session->param('oxd_id', $update_site_registration->getResponseOxdId());",
            "title": "UpdateRegistration.pm"
        },
        {
            "location": "/libraries/perl/#getauthorizationurlpm",
            "text": "Get_authorization_url protocol description .   Example  GetAuthorizationUrl:\n\n$get_authorization_url = new GetAuthorizationUrl( );\n$get_authorization_url->setRequestOxdId($session->param('oxd_id'));\n$get_authorization_url->setRequestScope($scope);\n$get_authorization_url->setRequestAcrValues($acrValues);\n$get_authorization_url->request();\nmy $oxdurl = $get_authorization_url->getResponseAuthorizationUrl();",
            "title": "GetAuthorizationUrl.pm"
        },
        {
            "location": "/libraries/perl/#gettokenbycodepm",
            "text": "Get_tokens_by_code protocol description .   Example  GetTokenByCode:\n\nmy $oxd_id = $cgi->escapeHTML($session->param('oxd_id'));\nmy $code = $cgi->escapeHTML($cgi->param(\"code\"));\nmy $state = $cgi->escapeHTML($cgi->param(\"state\"));\n\n$get_tokens_by_code = new GetTokenByCode();\n$get_tokens_by_code->setRequestOxdId($oxd_id);\n$get_tokens_by_code->setRequestCode($code);\n$get_tokens_by_code->setRequestState($state);\n$get_tokens_by_code->request();\n#store values in sessions\n$session->param('user_oxd_id_token', $get_tokens_by_code->getResponseIdToken());\n$session->param('state', $state);\n$session->param('session_state', $cgi->escapeHTML($cgi->param(\"session_state\")));\n\nprint Dumper( $get_user_info->getResponseObject() );",
            "title": "GetTokenByCode.pm"
        },
        {
            "location": "/libraries/perl/#getuserinfopm",
            "text": "Get_user_info protocol description .   Example  GetUserInfo:\n\nmy $oxd_id = $cgi->escapeHTML($session->param('oxd_id'));\n\n$get_user_info = new GetUserInfo();\n$get_user_info->setRequestOxdId($oxd_id);\n$get_user_info->setRequestAccessToken($get_tokens_by_code->getResponseAccessToken());\n$get_user_info->request();\n\nprint Dumper( $get_user_info->getResponseObject() );",
            "title": "GetUserInfo.pm"
        },
        {
            "location": "/libraries/perl/#oxdlogoutpm",
            "text": "Get_logout_uri protocol description .   Example  OxdLogout:\n\nmy $oxd_id = $cgi->escapeHTML($session->param('oxd_id'));\nmy $user_oxd_id_token = $cgi->escapeHTML($session->param(\"user_oxd_id_token\"));\nmy $session_state = $cgi->escapeHTML($session->param(\"session_state\"));\nmy $state = $cgi->escapeHTML($session->param(\"state\"));\n\n$logout = new OxdLogout();\n$logout->setRequestOxdId($oxd_id);\n$logout->setRequestPostLogoutRedirectUri($postLogoutRedirectUrl);\n$logout->setRequestIdToken($user_oxd_id_token);\n$logout->setRequestSessionState($session_state);\n$logout->setRequestState($state);\n$logout->request();\n\n$session->delete();\n$logoutUrl = $logout->getResponseObject()->{data}->{uri};",
            "title": "OxdLogout.pm"
        },
        {
            "location": "/libraries/perl/#for-uma-authentications-open-this-url-in-browser",
            "text": "https://oxd-perl-example.com/uma.cgi .",
            "title": "For UMA authentications open this url in browser"
        },
        {
            "location": "/libraries/perl/#umarsprotectpm",
            "text": "Uma_rs_protect protocol description .   Example  UmaRsProtect:\n\nmy $oxdId = $session->param('oxd_id');\n\n$uma_rs_protect = new UmaRsProtect();\n$uma_rs_protect->setRequestOxdId($oxdId);\n\n$uma_rs_protect->addConditionForPath([\"GET\"],[\"https://photoz.example.com/dev/actions/view\"], [\"https://photoz.example.com/dev/actions/view\"]);\n$uma_rs_protect->addConditionForPath([\"POST\"],[ \"https://photoz.example.com/dev/actions/add\"],[ \"https://photoz.example.com/dev/actions/add\"]);\n$uma_rs_protect->addConditionForPath([\"DELETE\"],[\"https://photoz.example.com/dev/actions/remove\"], [\"https://photoz.example.com/dev/actions/remove\"]);\n$uma_rs_protect->addResource('/photo');\n\n$uma_rs_protect->request();\nprint Dumper( $uma_rs_protect->getResponseObject() );",
            "title": "UmaRsProtect.pm"
        },
        {
            "location": "/libraries/perl/#umarscheckaccesspm",
            "text": "Uma_rs_check_access protocol description .   Example  UmaRsCheckAccess:\n\nmy $oxdId = $session->param('oxd_id');\nmy $umaRpt = $session->param('uma_rpt');\n\n$uma_rs_authorize_rpt = new UmaRsCheckAccess();\n$uma_rs_authorize_rpt->setRequestOxdId($oxdId);\n$uma_rs_authorize_rpt->setRequestRpt($umaRpt);\n$uma_rs_authorize_rpt->setRequestPath(\"/photo\");\n$uma_rs_authorize_rpt->setRequestHttpMethod(\"GET\");\n$uma_rs_authorize_rpt->request();\n\nprint Dumper($uma_rs_authorize_rpt->getResponseObject());\nmy $uma_ticket= $uma_rs_authorize_rpt->getResponseTicket();\n$session->param('uma_ticket', $uma_ticket);",
            "title": "UmaRsCheckAccess.pm"
        },
        {
            "location": "/libraries/perl/#umarpgetrptpm",
            "text": "Uma_rp_get_rpt protocol description .   Example  UmaRpGetRpt:\n\nmy $oxdId = $session->param('oxd_id');\n\n\n$uma_rp_get_rpt = new UmaRpGetRpt();\n$uma_rp_get_rpt->setRequestOxdId($oxdId);\n$uma_rp_get_rpt->request();\n\nprint Dumper($uma_rp_get_rpt->getResponseObject());\n\nmy $uma_rpt= $uma_rp_get_rpt->getResponseRpt();\n$session->param('uma_rpt', $uma_rpt);",
            "title": "UmaRpGetRpt.pm"
        },
        {
            "location": "/libraries/perl/#umarpauthorizerptpm",
            "text": "Uma_rp_authorize_rpt protocol description .   Example  UmaRpAuthorizeRpt:\n\nmy $oxdId = $session->param('oxd_id');\nmy $uma_rpt = $session->param('uma_rpt');\nmy $uma_ticket = $session->param('uma_ticket');\n\n$uma_rp_authorize_rpt = new UmaRpAuthorizeRpt();\n$uma_rp_authorize_rpt->setRequestOxdId($oxdId);\n$uma_rp_authorize_rpt->setRequestRpt($uma_rpt);\n$uma_rp_authorize_rpt->setRequestTicket($uma_ticket);\n$uma_rp_authorize_rpt->request();\n\nprint Dumper($uma_rp_authorize_rpt->getResponseObject());",
            "title": "UmaRpAuthorizeRpt.pm"
        },
        {
            "location": "/libraries/perl/#umarpgetgatpm",
            "text": "Uma_rp_get_gat protocol description .   Example  UmaRpGetGat:\n\nmy $oxdId = $session->param('oxd_id');\n\n$uma_rp_get_gat = new UmaRpGetGat();\n$uma_rp_get_gat->setRequestOxdId($oxdId);\n$uma_rp_get_gat->setRequestScopes([\"https://photoz.example.com/dev/actions/add\",\"https://photoz.example.com/dev/actions/view\", \"https://photoz.example.com/dev/actions/edit\"]);\n$uma_rp_get_gat->request();\n\nprint Dumper( $uma_rp_get_gat->getResponseObject() );\n\nmy $uma_gat= $uma_rp_get_gat->getResponseGat();\n$session->param('uma_gat', $uma_gat);\nprint Dumper( $uma_rp_get_gat->getResponseGat() );",
            "title": "UmaRpGetGat.pm"
        },
        {
            "location": "/libraries/golang/",
            "text": "oxd-go\n#\n\n\nOverview\n#\n\n\nOxd-go is a client library for the oxd Server. For information about oxd, visit http://oxd.gluu.org\n\n\nPlugin description\n#\n\n\n\n\nsrc/oxd-client - client source code\n\n\nsrc/oxd-client-demo - simple communication demo\n\n\nsrc/oxd-client-test - unit tests for communication\n\n\n\n\nDeployment\n#\n\n\nDownload the zip file from the \n\nGithub Page\n\n\nDemo\n#\n\n\nDemo shows simple web client with OPC flow. Demo configuration is located in conf/main.toml.\nDemo requires public/private key pair (params: key and cert).\n\n\nTo start demo launch run.sh script, which will setup server on  htts://localhost:8080.\n\n\nSamples\n#\n\n\nAll calls have the same structure that is described in the \nCall Structure\n section. \nSome examples of requests are described below. Usage of each call can be found in the unit tests.\n\n\nCall Structure\n#\n\n\n\n\nPrepare request params\n\n\nWrap into request structure\n\n\nPrepare response and response params structures\n\n\nCall server\n\n\nFetch response params\n\n\n\n\nRegister client\n#\n\n\nrequestParams := utils.PrepareRegisterParams() //func from test utils\nrequest := client.BuildOxdRequest(constants.REGISTER_SITE,requestParams)\nvar response transport.OxdResponse\nvar responseParams model.RegisterSiteResponseParams\n\nclient.Send(request,/* host */,&response)\n\nresponse.GetParams(&responseParams)\n\n\n\n\nGet Authorization Url\n#\n\n\nrequestParams := model.AuthorizationUrlRequestParams{/*parameters*/}\nrequest := client.BuildOxdRequest(constants.GET_AUTHORIZATION_URL,requestParams)\nvar response transport.OxdResponse\nvar responseParams model.AuthorizationUrlResponseParams\n\nclient.Send(request,/* host */,&response)\n\nresponse.GetParams(&responseParams)\n\n\n\n\nGet Token by Code\n#\n\n\nrequestParams := model.TokensByCodeRequestParams{/*parameters*/}\nrequest := client.BuildOxdRequest(constants.GET_TOKENS_BY_CODE,requestParams)\nvar response transport.OxdResponse\nvar responseParams model.TokensByCodeResponseParams\n\nclient.Send(request,conf.TestConfiguration.Host,&response)\n\nresponse.GetParams(&responseParams)",
            "title": "Go"
        },
        {
            "location": "/libraries/golang/#oxd-go",
            "text": "",
            "title": "oxd-go"
        },
        {
            "location": "/libraries/golang/#overview",
            "text": "Oxd-go is a client library for the oxd Server. For information about oxd, visit http://oxd.gluu.org",
            "title": "Overview"
        },
        {
            "location": "/libraries/golang/#plugin-description",
            "text": "src/oxd-client - client source code  src/oxd-client-demo - simple communication demo  src/oxd-client-test - unit tests for communication",
            "title": "Plugin description"
        },
        {
            "location": "/libraries/golang/#deployment",
            "text": "Download the zip file from the  Github Page",
            "title": "Deployment"
        },
        {
            "location": "/libraries/golang/#demo",
            "text": "Demo shows simple web client with OPC flow. Demo configuration is located in conf/main.toml.\nDemo requires public/private key pair (params: key and cert).  To start demo launch run.sh script, which will setup server on  htts://localhost:8080.",
            "title": "Demo"
        },
        {
            "location": "/libraries/golang/#samples",
            "text": "All calls have the same structure that is described in the  Call Structure  section. \nSome examples of requests are described below. Usage of each call can be found in the unit tests.",
            "title": "Samples"
        },
        {
            "location": "/libraries/golang/#call-structure",
            "text": "Prepare request params  Wrap into request structure  Prepare response and response params structures  Call server  Fetch response params",
            "title": "Call Structure"
        },
        {
            "location": "/libraries/golang/#register-client",
            "text": "requestParams := utils.PrepareRegisterParams() //func from test utils\nrequest := client.BuildOxdRequest(constants.REGISTER_SITE,requestParams)\nvar response transport.OxdResponse\nvar responseParams model.RegisterSiteResponseParams\n\nclient.Send(request,/* host */,&response)\n\nresponse.GetParams(&responseParams)",
            "title": "Register client"
        },
        {
            "location": "/libraries/golang/#get-authorization-url",
            "text": "requestParams := model.AuthorizationUrlRequestParams{/*parameters*/}\nrequest := client.BuildOxdRequest(constants.GET_AUTHORIZATION_URL,requestParams)\nvar response transport.OxdResponse\nvar responseParams model.AuthorizationUrlResponseParams\n\nclient.Send(request,/* host */,&response)\n\nresponse.GetParams(&responseParams)",
            "title": "Get Authorization Url"
        },
        {
            "location": "/libraries/golang/#get-token-by-code",
            "text": "requestParams := model.TokensByCodeRequestParams{/*parameters*/}\nrequest := client.BuildOxdRequest(constants.GET_TOKENS_BY_CODE,requestParams)\nvar response transport.OxdResponse\nvar responseParams model.TokensByCodeResponseParams\n\nclient.Send(request,conf.TestConfiguration.Host,&response)\n\nresponse.GetParams(&responseParams)",
            "title": "Get Token by Code"
        },
        {
            "location": "/framework/spring/",
            "text": "oxd-spring\n#\n\n\nOverview\n#\n\n\nThe following documentation demonstrates \nhow to use Gluu's commercial OAuth 2.0 client software, \noxd\n, to send users from a Java Spring app to an OpenID Connect Provider (OP) for login. You can send users to any standard OP for login, including Google. In these docs we use the \nfree open source Gluu Server\n as the OP.\n\n\n\n\nNote\n\n\nYou can also refer to the \noxd java library\n for more details on java classes.\n\n\n\n\nRequirements\n#\n\n\nThe oxd-spring requires the oxd Server. Please use the following link to install it\n\n\n\n\noxd Server Installation Guide\n\n\n\n\nInstall oxd-spring\n#\n\n\nClone oxd-spring from Github repo and run maven command to install it:\n\n\ncd oxd-spring \nmvn clean package -Dmaven.test.skip=true\n\n\n\n\nNow you can run the executable jar:\n\n\njava -jar target/oxd-spring-0.0.1-SNAPSHOT.jar\n\n\n\n\nPoint browser to \nhttps://127.0.0.1:8443/\n. And log in into ce-dev2.gluu.org using test credentials: test_user/test_user_password \n\n\n!!!\nNote:\n \n    oxd-server must run on \nlocalhost\n and be bound to port: \n8099\n, otherwise you'll need to configure \noxd-spring/src/main/resources/application.properties\n file.\n\n\nCustomize oxd-spring\n#\n\n\nTo use your own server as openid provider you need to modify \noxd.server.op-host\n property from \noxd-spring/src/main/resources/application.properties\n, e.g:\n\n\noxd.server.op-host=https://gluu.localhost.info\n\n\n\n\nMake sure the server already installed on your machine, or you can follow \n\nthis\n guide to install it.\n\n\nSample Code\n#\n\n\nUsage of oxd-spring is very simple. First of all we need to create parameter object related to command we are going to perform and pass to related method.\nCheck Sample code below we are creating commandParams object  related to commands and calling related method with created params.\n\n\nregister_site\n#\n\n\n\n\n\n// create registerSiteParams\ntry{\n        final RegisterSiteParams commandParams = new RegisterSiteParams();\n        commandParams.setOpHost(opHost);\n        commandParams.setAuthorizationRedirectUri(redirectUrl);\n        commandParams.setPostLogoutRedirectUri(postLogoutRedirectUrl);\n        commandParams.setClientLogoutUri(Lists.newArrayList(logoutUrl));\n        commandParams.setRedirectUris(Arrays.asList(redirectUrl));\n        commandParams.setAcrValues(new ArrayList<>());\n        commandParams.setScope(Lists.newArrayList(\"openid\", \"profile\"));\n        commandParams.setGrantType(Lists.newArrayList(\"authorization_code\"));\n        commandParams.setResponseTypes(Lists.newArrayList(\"code\"));\n        final Command command = new Command(CommandType.REGISTER_SITE).setParamsObject(commandParams);\n        return client.send(command);                \n }\ncatch (Exception e) \n{\n    e.printStackTrace();\n }\n\n//oxd_ host - oxd-server host eg.localhost or 127.0.0.1 port - oxd-server listing port (default port is 8099)\n\n\n\n\n\nupdate_site_registration\n#\n\n\n\n\n\n//create UpdateSiteParams\n try {\n        final UpdateSiteParams commandParams = new UpdateSiteParams();\n        commandParams.setOxdId(oxdId);\n        commandParams.setAuthorizationRedirectUri(redirectUrl);\n        final Command command = new Command(CommandType.UPDATE_SITE).setParamsObject(commandParams);\n        return client.send(command);\n}\ncatch (Exception e) {\n  e.printStackTrace();\n }\n\n\n\n\nget_authorization_url\n#\n\n\n\n\n\ntry\n{\n        final GetAuthorizationUrlParams commandParams = new GetAuthorizationUrlParams();\n        commandParams.setOxdId(oxdId);\n        final Command command = new Command(CommandType.GET_AUTHORIZATION_URL).setParamsObject(commandParams);\n        return client.send(command);\n}\ncatch (Exception e) {\n  e.printStackTrace();\n }        \n\n\n\n\nget_tokens_by_code\n#\n\n\n\n\ntry\n{\n        final GetTokensByCodeParams commandParams = new GetTokensByCodeParams();\n        commandParams.setOxdId(oxdId);\n        commandParams.setCode(code);\n        commandParams.setState(state);\n        final Command command = new Command(CommandType.GET_TOKENS_BY_CODE).setParamsObject(commandParams);\n        return client.send(command);\n}\n catch (Exception e) {\n   e.printStackTrace();\n  }\n\n\n\n\nget_user_info\n#\n\n\n\n\n\n try\n {\n        GetUserInfoParams params = new GetUserInfoParams();\n        params.setOxdId(oxdId);\n        params.setAccessToken(accessToken);\n        final Command command = new Command(CommandType.GET_USER_INFO).setParamsObject(params);\n        return client.send(command);\n }\ncatch (Exception e) {\n  e.printStackTrace();\n }            \n\n\n\n\n\nget_logout_uri\n#\n\n\n\n\n//create GetLogoutUrlParams\ntry{\n        GetLogoutUrlParams params = new GetLogoutUrlParams();\n        params.setOxdId(oxdId);\n        params.setIdTokenHint(idToken);\n        final Command command = new Command(CommandType.GET_LOGOUT_URI).setParamsObject(params);\n        return client.send(command);       \n}\ncatch (Exception e) {\n  e.printStackTrace();\n }",
            "title": "Java Spring"
        },
        {
            "location": "/framework/spring/#oxd-spring",
            "text": "",
            "title": "oxd-spring"
        },
        {
            "location": "/framework/spring/#overview",
            "text": "The following documentation demonstrates \nhow to use Gluu's commercial OAuth 2.0 client software,  oxd , to send users from a Java Spring app to an OpenID Connect Provider (OP) for login. You can send users to any standard OP for login, including Google. In these docs we use the  free open source Gluu Server  as the OP.   Note  You can also refer to the  oxd java library  for more details on java classes.",
            "title": "Overview"
        },
        {
            "location": "/framework/spring/#requirements",
            "text": "The oxd-spring requires the oxd Server. Please use the following link to install it   oxd Server Installation Guide",
            "title": "Requirements"
        },
        {
            "location": "/framework/spring/#install-oxd-spring",
            "text": "Clone oxd-spring from Github repo and run maven command to install it:  cd oxd-spring \nmvn clean package -Dmaven.test.skip=true  Now you can run the executable jar:  java -jar target/oxd-spring-0.0.1-SNAPSHOT.jar  Point browser to  https://127.0.0.1:8443/ . And log in into ce-dev2.gluu.org using test credentials: test_user/test_user_password   !!! Note:  \n    oxd-server must run on  localhost  and be bound to port:  8099 , otherwise you'll need to configure  oxd-spring/src/main/resources/application.properties  file.",
            "title": "Install oxd-spring"
        },
        {
            "location": "/framework/spring/#customize-oxd-spring",
            "text": "To use your own server as openid provider you need to modify  oxd.server.op-host  property from  oxd-spring/src/main/resources/application.properties , e.g:  oxd.server.op-host=https://gluu.localhost.info  Make sure the server already installed on your machine, or you can follow  this  guide to install it.",
            "title": "Customize oxd-spring"
        },
        {
            "location": "/framework/spring/#sample-code",
            "text": "Usage of oxd-spring is very simple. First of all we need to create parameter object related to command we are going to perform and pass to related method.\nCheck Sample code below we are creating commandParams object  related to commands and calling related method with created params.",
            "title": "Sample Code"
        },
        {
            "location": "/framework/spring/#register_site",
            "text": "// create registerSiteParams\ntry{\n        final RegisterSiteParams commandParams = new RegisterSiteParams();\n        commandParams.setOpHost(opHost);\n        commandParams.setAuthorizationRedirectUri(redirectUrl);\n        commandParams.setPostLogoutRedirectUri(postLogoutRedirectUrl);\n        commandParams.setClientLogoutUri(Lists.newArrayList(logoutUrl));\n        commandParams.setRedirectUris(Arrays.asList(redirectUrl));\n        commandParams.setAcrValues(new ArrayList<>());\n        commandParams.setScope(Lists.newArrayList(\"openid\", \"profile\"));\n        commandParams.setGrantType(Lists.newArrayList(\"authorization_code\"));\n        commandParams.setResponseTypes(Lists.newArrayList(\"code\"));\n        final Command command = new Command(CommandType.REGISTER_SITE).setParamsObject(commandParams);\n        return client.send(command);                \n }\ncatch (Exception e) \n{\n    e.printStackTrace();\n }\n\n//oxd_ host - oxd-server host eg.localhost or 127.0.0.1 port - oxd-server listing port (default port is 8099)",
            "title": "register_site"
        },
        {
            "location": "/framework/spring/#update_site_registration",
            "text": "//create UpdateSiteParams\n try {\n        final UpdateSiteParams commandParams = new UpdateSiteParams();\n        commandParams.setOxdId(oxdId);\n        commandParams.setAuthorizationRedirectUri(redirectUrl);\n        final Command command = new Command(CommandType.UPDATE_SITE).setParamsObject(commandParams);\n        return client.send(command);\n}\ncatch (Exception e) {\n  e.printStackTrace();\n }",
            "title": "update_site_registration"
        },
        {
            "location": "/framework/spring/#get_authorization_url",
            "text": "try\n{\n        final GetAuthorizationUrlParams commandParams = new GetAuthorizationUrlParams();\n        commandParams.setOxdId(oxdId);\n        final Command command = new Command(CommandType.GET_AUTHORIZATION_URL).setParamsObject(commandParams);\n        return client.send(command);\n}\ncatch (Exception e) {\n  e.printStackTrace();\n }",
            "title": "get_authorization_url"
        },
        {
            "location": "/framework/spring/#get_tokens_by_code",
            "text": "try\n{\n        final GetTokensByCodeParams commandParams = new GetTokensByCodeParams();\n        commandParams.setOxdId(oxdId);\n        commandParams.setCode(code);\n        commandParams.setState(state);\n        final Command command = new Command(CommandType.GET_TOKENS_BY_CODE).setParamsObject(commandParams);\n        return client.send(command);\n}\n catch (Exception e) {\n   e.printStackTrace();\n  }",
            "title": "get_tokens_by_code"
        },
        {
            "location": "/framework/spring/#get_user_info",
            "text": "try\n {\n        GetUserInfoParams params = new GetUserInfoParams();\n        params.setOxdId(oxdId);\n        params.setAccessToken(accessToken);\n        final Command command = new Command(CommandType.GET_USER_INFO).setParamsObject(params);\n        return client.send(command);\n }\ncatch (Exception e) {\n  e.printStackTrace();\n }",
            "title": "get_user_info"
        },
        {
            "location": "/framework/spring/#get_logout_uri",
            "text": "//create GetLogoutUrlParams\ntry{\n        GetLogoutUrlParams params = new GetLogoutUrlParams();\n        params.setOxdId(oxdId);\n        params.setIdTokenHint(idToken);\n        final Command command = new Command(CommandType.GET_LOGOUT_URI).setParamsObject(params);\n        return client.send(command);       \n}\ncatch (Exception e) {\n  e.printStackTrace();\n }",
            "title": "get_logout_uri"
        },
        {
            "location": "/framework/play/",
            "text": "oxd Java Play\n#\n\n\nThe following documentation demonstrates how to use Gluu's commercial OAuth 2.0 client software, \noxd\n, to send users from a Java Play app to an OpenID Connect Provider (OP) for login. You can securely send users to any standard OP for login, including Google and the \nfree open source Gluu Server\n.\n\n\n\n\nNote\n\n\nYou can also refer to the \noxd java library\n docs for more details on java classes.\n\n\n\n\nInstallation\n#\n\n\nInstallation of oxd-play is very easy task With help of Maven and sbt.\nTo use maven  adding following line in build.sbt and sbt build will do rest for you.\n\n\nresolvers += \"Gluu repository\" at \"http://ox.gluu.org/maven\"\n\nlibraryDependencies += \"org.xdi\" % \"oxd-java\" % \"2.4.4.Final\"\n\nlibraryDependencies += \"oxd.play.java\" % \"oxd-play\" % \"2.4.4-FINAL\"\n\n\n\nImport Oxd-Command class\n (all are static methods of \"oxdCommands\" class.)\n\n\n\n\nImport oxdCommands class from oxd-play by adding this oxd. \n\n\nimport static org.xdi.oxd.client.oxdCommands.*;\n\n\n\n\n\n!!!\nNote: \n    empty line required between every single line because sbt build use empty line as line separator\n\n\n\n\n\n\nGitHub source code\n\n\n\n\n\n\nFor demo project\n\n\n\n\n\n\nJar files are available on the \nMaven repo\n\n\n\n\n\n\nJenkins build server\n\n\n\n\n\n\nConfiguration\n#\n\n\nWe need nothing to configuration before start using oxd-play everything can be set on run time but still we can configure our oxd-server's default configurations. \n\n\n!!!\nNote:\n \n    The website is registered with the OP and its ID is stored in this config file, also are the other peristant information about the website. So the config file needs to be writable for the server.\n\n\nSample Code\n#\n\n\nUsage of Oxd-play is very simple. First of all we need to create parameter object related to command we are going to perform and pass to related method.\nCheck Sample code below we are creating commandParams object  related to commands and calling related method with created params.\n\n\nwhen you call method as you will also pass a callback which can return result of operation.callback have two methods success and error.In success you will get a response from server and if any error occurs you will get a error message to simplify error. \n\n\nregister_site\n#\n\n\n\n\n\n// create registerSiteParams\ntry{\n        final RegisterSiteParams registerSiteParams = new RegisterSiteParams();\n        commandParams.setAuthorizationRedirectUri(redirectUrl);//Required and must be https\n\n// Call \"registerSite\" method using created registerSiteParams\n\n        registerSite(oxd_host,oxd_port, registerSiteParams, new RegisterSiteCallback() {\n                    @Override\n                    public void success(RegisterSiteResponse registerSiteResponse) {\n                    //this is your successful response for register_site command\n                    //registerSiteResponse.getOxdId() to get oxdid returened by server.                  \n                    }\n                    @Override\n                    public void error(String s) {\n                    //returns error message\n                    }\n                });\n\n }\ncatch (Exception e) \n{\n    e.printStackTrace();\n }\n\n//oxd_ host - oxd-server host eg.localhost or 127.0.0.1 port - oxd-server listing port (default port is 8099)\n\n\n\n\n\nupdate_site_registration\n#\n\n\n\n\n\n//create UpdateSiteParams\n try {\n        final UpdateSiteParams commandParams = new UpdateSiteParams();\n        commandParams.setOxdId(\"Registered Sites Oxd-id\");//Required\n\n//Call \"updateSite\" method using created registerSiteParams\n\n        updateSite(oxd_host,oxd_port, UpdateSiteParams, new UpdateSiteCallback() {\n                   @Override\n                   public void success(UpdateSiteResponse updateSiteResponse) {\n                         //this is your successful response for update_site__registration command \n                         //updateSiteResponse.getOxdId() to get Oxd returened by server.\n                        }\n                    @Override\n                     public void error(String s) {\n                    //returns error message\n                      }\n        });\n}\ncatch (Exception e) {\n  e.printStackTrace();\n }\n\n\n\n\nget_authorization_url\n#\n\n\n\n\n\ntry\n{\n//create GetAuthorizationUrlParams\n\n            GetAuthorizationUrlParams commandParams = new GetAuthorizationUrlParams();\n            commandParams.setOxdId(\"Registered Sites Oxd-id\");//required\n            commandParams.setAcrValues(\"List of arc values\"); //optional\n            commandParams.setState(\"State from redirected uri\");//optional\n            commandParams.setScopes(\"Scope from redirected uri\");//required\n\n// Call \"getAuthorizationUrl\" method using created GetAuthorizationUrlParams\n\n            getAuthorizationUrl(oxd_host,oxd_port,GetAuthorizationUrlParams, new GetAuthorizationUrlCallback() {\n                    @Override\n                   public void success(GetAuthorizationUrlResponse getAuthorizationUrlResponse) {\n                                     //successful  call will return getAuthorizationUrlResponse\n                                    //getAuthorizationUrlResponse.getAuthorizationUrl() will return authorization url to redirect\n                  }\n                 @Override\n                public void error(String s) {\n                          //returns error message\n                }\n        });\n}\ncatch (Exception e) {\n  e.printStackTrace();\n }        \n\n\n\n\nget_tokens_by_code\n#\n\n\n\n\ntry\n{\n//create GetTokensByCodeParams\n\n            GetTokensByCodeParams getTokensByCodeParams = new GetTokensByCodeParams();\n            commandParams.setOxdId(\"Registered Site oxd-id code\");//required\n            commandParams.setState(\"State from op redirected uri\");//optional\n            commandParams.setScopes(\"Scope from op redirected uri\");//required\n            commandParams.setCode(\"Code from op redirected uri\");//required\n\n// Call \"getToken\" method using created GetTokensByCodeParams\n\n            getToken(host, port, getTokensByCodeParams, new GetTokensByCodeCallback() {\n                         public void success(GetTokensByCodeResponse getTokensByCodeResponse) {\n                                 //successful  call will return GetTokensByCodeResponse\n                                 //getTokensByCodeResponse.getAccessToken() to get access Token\n                            }\n\n                         @Override\n                            public void error(String s) {\n                                 //will return error message if any\n                            }\n                });\n }\n catch (Exception e) {\n   e.printStackTrace();\n  }\n\n\n\n\nget_user_info\n#\n\n\n\n\n\n try\n {\n //create GetUserInfoParams\n\n        GetUserInfoParams getUserInfoParams = new GetUserInfoParams();\n        getUserInfoParams.setOxdId(\"Regitered site's oxd-id\");\n        getUserInfoParams.setAccessToken(\"Access token from GetTokensByCode call\");\n\n// Call \"getUserInfo\" method using created GetTokensByCodeParams\n\n    getUserInfo(oxd_host,oxd_port, getUserInfoParams, new GetUserInfoCallback() {\n            @Override\n            public void success(GetUserInfoResponse getUserInfoResponse) {\n                   //successful  call will return GetUserInfoResponse\n                   //getUserInfoResponse.getClaims() Will return Hash map with calimed user informations.\n                }\n                @Override\n                public void error(String s) {\n                    //will return error message if any\n                }\n            });\n}\ncatch (Exception e) {\n  e.printStackTrace();\n }            \n\n\n\n\n\nget_logout_uri\n#\n\n\n\n\n//create GetLogoutUrlParams\ntry{\n       final GetLogoutUrlParams getLogoutUrlParams = new GetLogoutUrlParams();\n                commandParams.setOxdId(\"Registered site's oxd-id\"); //     required\n\n\n// Call \"getLogoutUri\" method using created GetLogoutUrlParams\n\n        getLogoutUri(oxd_host,oxd_port, getLogoutUrlParams, new GetlogoutUrlCallback() {\n            @Override\n            public void success(LogoutResponse AlogoutResponse) {\n                //successful  call will return LogoutResponse\n                //AlogoutResponse.getUri() will return uri to be redirected \n            }\n            @Override\n            public void error(String s) {\n                //will return error message if any\n            }\n        });\n\n}\ncatch (Exception e) {\n  e.printStackTrace();\n }        \n\n\n\n\n\n\n\n!!!\nNote:\n \n    You can also refer \"\nOXD_JAVA\n\" for more details of java classes**",
            "title": "Java Play Framework"
        },
        {
            "location": "/framework/play/#oxd-java-play",
            "text": "The following documentation demonstrates how to use Gluu's commercial OAuth 2.0 client software,  oxd , to send users from a Java Play app to an OpenID Connect Provider (OP) for login. You can securely send users to any standard OP for login, including Google and the  free open source Gluu Server .   Note  You can also refer to the  oxd java library  docs for more details on java classes.",
            "title": "oxd Java Play"
        },
        {
            "location": "/framework/play/#installation",
            "text": "Installation of oxd-play is very easy task With help of Maven and sbt.\nTo use maven  adding following line in build.sbt and sbt build will do rest for you.  resolvers += \"Gluu repository\" at \"http://ox.gluu.org/maven\"\n\nlibraryDependencies += \"org.xdi\" % \"oxd-java\" % \"2.4.4.Final\"\n\nlibraryDependencies += \"oxd.play.java\" % \"oxd-play\" % \"2.4.4-FINAL\"  Import Oxd-Command class  (all are static methods of \"oxdCommands\" class.)   Import oxdCommands class from oxd-play by adding this oxd.   import static org.xdi.oxd.client.oxdCommands.*;   !!! Note: \n    empty line required between every single line because sbt build use empty line as line separator    GitHub source code    For demo project    Jar files are available on the  Maven repo    Jenkins build server",
            "title": "Installation"
        },
        {
            "location": "/framework/play/#configuration",
            "text": "We need nothing to configuration before start using oxd-play everything can be set on run time but still we can configure our oxd-server's default configurations.   !!! Note:  \n    The website is registered with the OP and its ID is stored in this config file, also are the other peristant information about the website. So the config file needs to be writable for the server.",
            "title": "Configuration"
        },
        {
            "location": "/framework/play/#sample-code",
            "text": "Usage of Oxd-play is very simple. First of all we need to create parameter object related to command we are going to perform and pass to related method.\nCheck Sample code below we are creating commandParams object  related to commands and calling related method with created params.  when you call method as you will also pass a callback which can return result of operation.callback have two methods success and error.In success you will get a response from server and if any error occurs you will get a error message to simplify error.",
            "title": "Sample Code"
        },
        {
            "location": "/framework/play/#register_site",
            "text": "// create registerSiteParams\ntry{\n        final RegisterSiteParams registerSiteParams = new RegisterSiteParams();\n        commandParams.setAuthorizationRedirectUri(redirectUrl);//Required and must be https\n\n// Call \"registerSite\" method using created registerSiteParams\n\n        registerSite(oxd_host,oxd_port, registerSiteParams, new RegisterSiteCallback() {\n                    @Override\n                    public void success(RegisterSiteResponse registerSiteResponse) {\n                    //this is your successful response for register_site command\n                    //registerSiteResponse.getOxdId() to get oxdid returened by server.                  \n                    }\n                    @Override\n                    public void error(String s) {\n                    //returns error message\n                    }\n                });\n\n }\ncatch (Exception e) \n{\n    e.printStackTrace();\n }\n\n//oxd_ host - oxd-server host eg.localhost or 127.0.0.1 port - oxd-server listing port (default port is 8099)",
            "title": "register_site"
        },
        {
            "location": "/framework/play/#update_site_registration",
            "text": "//create UpdateSiteParams\n try {\n        final UpdateSiteParams commandParams = new UpdateSiteParams();\n        commandParams.setOxdId(\"Registered Sites Oxd-id\");//Required\n\n//Call \"updateSite\" method using created registerSiteParams\n\n        updateSite(oxd_host,oxd_port, UpdateSiteParams, new UpdateSiteCallback() {\n                   @Override\n                   public void success(UpdateSiteResponse updateSiteResponse) {\n                         //this is your successful response for update_site__registration command \n                         //updateSiteResponse.getOxdId() to get Oxd returened by server.\n                        }\n                    @Override\n                     public void error(String s) {\n                    //returns error message\n                      }\n        });\n}\ncatch (Exception e) {\n  e.printStackTrace();\n }",
            "title": "update_site_registration"
        },
        {
            "location": "/framework/play/#get_authorization_url",
            "text": "try\n{\n//create GetAuthorizationUrlParams\n\n            GetAuthorizationUrlParams commandParams = new GetAuthorizationUrlParams();\n            commandParams.setOxdId(\"Registered Sites Oxd-id\");//required\n            commandParams.setAcrValues(\"List of arc values\"); //optional\n            commandParams.setState(\"State from redirected uri\");//optional\n            commandParams.setScopes(\"Scope from redirected uri\");//required\n\n// Call \"getAuthorizationUrl\" method using created GetAuthorizationUrlParams\n\n            getAuthorizationUrl(oxd_host,oxd_port,GetAuthorizationUrlParams, new GetAuthorizationUrlCallback() {\n                    @Override\n                   public void success(GetAuthorizationUrlResponse getAuthorizationUrlResponse) {\n                                     //successful  call will return getAuthorizationUrlResponse\n                                    //getAuthorizationUrlResponse.getAuthorizationUrl() will return authorization url to redirect\n                  }\n                 @Override\n                public void error(String s) {\n                          //returns error message\n                }\n        });\n}\ncatch (Exception e) {\n  e.printStackTrace();\n }",
            "title": "get_authorization_url"
        },
        {
            "location": "/framework/play/#get_tokens_by_code",
            "text": "try\n{\n//create GetTokensByCodeParams\n\n            GetTokensByCodeParams getTokensByCodeParams = new GetTokensByCodeParams();\n            commandParams.setOxdId(\"Registered Site oxd-id code\");//required\n            commandParams.setState(\"State from op redirected uri\");//optional\n            commandParams.setScopes(\"Scope from op redirected uri\");//required\n            commandParams.setCode(\"Code from op redirected uri\");//required\n\n// Call \"getToken\" method using created GetTokensByCodeParams\n\n            getToken(host, port, getTokensByCodeParams, new GetTokensByCodeCallback() {\n                         public void success(GetTokensByCodeResponse getTokensByCodeResponse) {\n                                 //successful  call will return GetTokensByCodeResponse\n                                 //getTokensByCodeResponse.getAccessToken() to get access Token\n                            }\n\n                         @Override\n                            public void error(String s) {\n                                 //will return error message if any\n                            }\n                });\n }\n catch (Exception e) {\n   e.printStackTrace();\n  }",
            "title": "get_tokens_by_code"
        },
        {
            "location": "/framework/play/#get_user_info",
            "text": "try\n {\n //create GetUserInfoParams\n\n        GetUserInfoParams getUserInfoParams = new GetUserInfoParams();\n        getUserInfoParams.setOxdId(\"Regitered site's oxd-id\");\n        getUserInfoParams.setAccessToken(\"Access token from GetTokensByCode call\");\n\n// Call \"getUserInfo\" method using created GetTokensByCodeParams\n\n    getUserInfo(oxd_host,oxd_port, getUserInfoParams, new GetUserInfoCallback() {\n            @Override\n            public void success(GetUserInfoResponse getUserInfoResponse) {\n                   //successful  call will return GetUserInfoResponse\n                   //getUserInfoResponse.getClaims() Will return Hash map with calimed user informations.\n                }\n                @Override\n                public void error(String s) {\n                    //will return error message if any\n                }\n            });\n}\ncatch (Exception e) {\n  e.printStackTrace();\n }",
            "title": "get_user_info"
        },
        {
            "location": "/framework/play/#get_logout_uri",
            "text": "//create GetLogoutUrlParams\ntry{\n       final GetLogoutUrlParams getLogoutUrlParams = new GetLogoutUrlParams();\n                commandParams.setOxdId(\"Registered site's oxd-id\"); //     required\n\n\n// Call \"getLogoutUri\" method using created GetLogoutUrlParams\n\n        getLogoutUri(oxd_host,oxd_port, getLogoutUrlParams, new GetlogoutUrlCallback() {\n            @Override\n            public void success(LogoutResponse AlogoutResponse) {\n                //successful  call will return LogoutResponse\n                //AlogoutResponse.getUri() will return uri to be redirected \n            }\n            @Override\n            public void error(String s) {\n                //will return error message if any\n            }\n        });\n\n}\ncatch (Exception e) {\n  e.printStackTrace();\n }           !!! Note:  \n    You can also refer \" OXD_JAVA \" for more details of java classes**",
            "title": "get_logout_uri"
        },
        {
            "location": "/framework/rails/",
            "text": "oxd Ruby On Rails\n#\n\n\nThe following documentation demonstrates how to use Gluu's commercial OAuth 2.0 client software, \noxd\n, to send users from a Ruby on Rails app to an OpenID Connect Provider (OP) for login. You can send users to any standard OP for login, including Google. In these docs we use the \nfree open source Gluu Server\n as the OP.\n\n\n\n\nNote\n\n\nYou can also refer to the \noxd ruby library docs\n for more details on java classes.\n\n\n\n\nDeployment\n#\n\n\nPrerequisites\n#\n\n\nUbuntu 14.04 with some basic utilities listed below\n\n\n$ sudo apt-get install apache2\n$ a2enmod ssl\n\n\n\n\nInstalling and configuring the oxd-server\n#\n\n\nYou can download the oxd-server and follow the installation instructions from \n\nhere\n\n\nDemosite deployment\n#\n\n\nOpenID Connect works only with HTTPS connections. So let us get the ssl certs ready.\n\n\n$ mkdir /etc/certs\n$ cd /etc/certs\n$ openssl genrsa -des3 -out demosite.key 2048\n$ openssl rsa -in demosite.key -out demosite.key.insecure\n$ mv demosite.key.insecure demosite.key\n$ openssl req -new -key demosite.key -out demosite.csr\n$ openssl x509 -req -days 365 -in demosite.csr -signkey demosite.key -out demosite.crt\n\n\n\n\nInstall RVM and Ruby on ubuntu\n#\n\n\nInstall mpapis public key first (might need gpg2) \n\n\n$ sudo gpg --keyserver hkp://keys.gnupg.net --recv-keys 409B6B1796C275462A1703113804BB82D39DC0E3\n\n\n\n\nInstall RVM stable with ruby:\n\n\n$ sudo \\curl -sSL https://get.rvm.io | bash -s stable --ruby\n$ cd /var/www/html\n\n\n\n\nReload shell configuration & test\n\n\n$ source ~/.rvm/scripts/rvm\n\n\n\n\nRun this command in terminal to get list of installed ruby versions on your system\n\n\n$ rvm list\n\n\n\n\nUsing rvm you can install specific ruby version. E.g. for ruby-2.2.0 :\n\n\n$ rvm install ruby-2.2.0\n\n\n\n\nTo change ruby version simply run this command. E.g. to switch to ruby-2.2.0 :\n\n\n$ rvm use ruby-2.2.0\n\n\n\n\nRails is distributed as a Ruby gem and adding it to the local system is extremely simple:\n\n\n$ gem install rails \n\n\n\n\nFor more help you can see rvm commands here :\nhttps://rvm.io/rvm/install\n\n\nPhusion Passenger Setup\n#\n\n\nPhusion Passenger (commonly shortened to Passenger or referred to as mod_passenger) is an application server and it is often used to power Ruby sites. Its code is distributed in form of a Ruby gem, which is then compiled on the target machine and installed into Apache as a module.\n\n\nFirst, the gem needs to be installed on the system:\n\n\n$ gem install passenger\n\n\n\n\nThe environment is now ready for the compilation. The process takes a few minutes and it\u2019s started by the following command:\n\n\n$ passenger-install-apache2-module\n\n\n\n\nNote that this script will not install the module really. It will compile module\u2019s binary and place it under gem\u2019s path. The path will be printed on screen and it needs to be copy-pasted into Apache\u2019s config file \n\n\nThe output will be similar to this one:\n\n\nLoadModule passenger_module /home/username/.rvm/gems/ruby-2.2.1/gems/passenger-5.0.28/buildout/apache2/mod_passenger.so\n\n\n\n\nThen in Apache's config file add these lines :\n\n\n<IfModule mod_passenger.c>\n PassengerRoot /home/username/.rvm/gems/ruby-2.2.1/gems/passenger-5.0.28\n PassengerDefaultRuby /home/username/.rvm/gems/ruby-2.2.1/wrappers/ruby\n</IfModule>\n\n\n\n\nIn console :\n\n\n$ sudo cp /etc/apache2/sites-available/000-default.conf /etc/apache2/sites-available/oxd-ruby.conf\n$ sudo vi /etc/apache2/sites-available/oxd-ruby.conf\n\n\n\n\nReplace the content of oxd-ruby.conf file with following:\n\n\n<IfModule mod_ssl.c>\n    <VirtualHost *:443>\n        ServerAdmin webmaster@localhost\n        ServerName oxd-rails.com\n        DocumentRoot /var/www/html/oxdrails\n\n        LogLevel info ssl:warn\n        ErrorLog ${APACHE_LOG_DIR}/error.log\n        CustomLog ${APACHE_LOG_DIR}/access.log combined\n\n        #   SSL Engine Switch:\n        #   Enable/Disable SSL for this virtual host.\n        SSLEngine on\n        SSLCertificateFile  /etc/certs/demosite.crt\n        SSLCertificateKeyFile /etc/certs/demosite.key\n\n        <Directory /var/www/html/oxdrails>\n            AllowOverride All\n                    Options Indexes FollowSymLinks\n            Order allow,deny\n            Allow from all\n        </Directory>\n    </VirtualHost>\n</IfModule>\n\n\n\n\nThen enable \noxd-rails.com\n virtual host by running:\n\n\n$ sudo a2ensite oxd-ruby.conf \n\n\n\n\nAfter that add domain name in virtual host file.\nIn console:\n\n\n$ sudo nano /etc/hosts\n\n\n\n\nAdd these lines in virtual host file:\n\n\n127.0.0.1 www.oxd-rails.com\n127.0.0.1 oxd-rails.com\n\n\n\n\nReload the apache server\n\n\n$ sudo service apache2 restart\n\n\n\n\nSetting up and running demo app\n#\n\n\nNavigate to Rails app root:\n\n\ncd /var/www/html/oxdrails\n\n\n\n\nRun :\n\n\nbundle install\n\n\n\n\nNow your rails app should work from http://oxd-rails.com",
            "title": "Ruby on Rails"
        },
        {
            "location": "/framework/rails/#oxd-ruby-on-rails",
            "text": "The following documentation demonstrates how to use Gluu's commercial OAuth 2.0 client software,  oxd , to send users from a Ruby on Rails app to an OpenID Connect Provider (OP) for login. You can send users to any standard OP for login, including Google. In these docs we use the  free open source Gluu Server  as the OP.   Note  You can also refer to the  oxd ruby library docs  for more details on java classes.",
            "title": "oxd Ruby On Rails"
        },
        {
            "location": "/framework/rails/#deployment",
            "text": "",
            "title": "Deployment"
        },
        {
            "location": "/framework/rails/#prerequisites",
            "text": "Ubuntu 14.04 with some basic utilities listed below  $ sudo apt-get install apache2\n$ a2enmod ssl",
            "title": "Prerequisites"
        },
        {
            "location": "/framework/rails/#installing-and-configuring-the-oxd-server",
            "text": "You can download the oxd-server and follow the installation instructions from  here",
            "title": "Installing and configuring the oxd-server"
        },
        {
            "location": "/framework/rails/#demosite-deployment",
            "text": "OpenID Connect works only with HTTPS connections. So let us get the ssl certs ready.  $ mkdir /etc/certs\n$ cd /etc/certs\n$ openssl genrsa -des3 -out demosite.key 2048\n$ openssl rsa -in demosite.key -out demosite.key.insecure\n$ mv demosite.key.insecure demosite.key\n$ openssl req -new -key demosite.key -out demosite.csr\n$ openssl x509 -req -days 365 -in demosite.csr -signkey demosite.key -out demosite.crt",
            "title": "Demosite deployment"
        },
        {
            "location": "/framework/rails/#install-rvm-and-ruby-on-ubuntu",
            "text": "Install mpapis public key first (might need gpg2)   $ sudo gpg --keyserver hkp://keys.gnupg.net --recv-keys 409B6B1796C275462A1703113804BB82D39DC0E3  Install RVM stable with ruby:  $ sudo \\curl -sSL https://get.rvm.io | bash -s stable --ruby\n$ cd /var/www/html  Reload shell configuration & test  $ source ~/.rvm/scripts/rvm  Run this command in terminal to get list of installed ruby versions on your system  $ rvm list  Using rvm you can install specific ruby version. E.g. for ruby-2.2.0 :  $ rvm install ruby-2.2.0  To change ruby version simply run this command. E.g. to switch to ruby-2.2.0 :  $ rvm use ruby-2.2.0  Rails is distributed as a Ruby gem and adding it to the local system is extremely simple:  $ gem install rails   For more help you can see rvm commands here :\nhttps://rvm.io/rvm/install",
            "title": "Install RVM and Ruby on ubuntu"
        },
        {
            "location": "/framework/rails/#phusion-passenger-setup",
            "text": "Phusion Passenger (commonly shortened to Passenger or referred to as mod_passenger) is an application server and it is often used to power Ruby sites. Its code is distributed in form of a Ruby gem, which is then compiled on the target machine and installed into Apache as a module.  First, the gem needs to be installed on the system:  $ gem install passenger  The environment is now ready for the compilation. The process takes a few minutes and it\u2019s started by the following command:  $ passenger-install-apache2-module  Note that this script will not install the module really. It will compile module\u2019s binary and place it under gem\u2019s path. The path will be printed on screen and it needs to be copy-pasted into Apache\u2019s config file   The output will be similar to this one:  LoadModule passenger_module /home/username/.rvm/gems/ruby-2.2.1/gems/passenger-5.0.28/buildout/apache2/mod_passenger.so  Then in Apache's config file add these lines :  <IfModule mod_passenger.c>\n PassengerRoot /home/username/.rvm/gems/ruby-2.2.1/gems/passenger-5.0.28\n PassengerDefaultRuby /home/username/.rvm/gems/ruby-2.2.1/wrappers/ruby\n</IfModule>  In console :  $ sudo cp /etc/apache2/sites-available/000-default.conf /etc/apache2/sites-available/oxd-ruby.conf\n$ sudo vi /etc/apache2/sites-available/oxd-ruby.conf  Replace the content of oxd-ruby.conf file with following:  <IfModule mod_ssl.c>\n    <VirtualHost *:443>\n        ServerAdmin webmaster@localhost\n        ServerName oxd-rails.com\n        DocumentRoot /var/www/html/oxdrails\n\n        LogLevel info ssl:warn\n        ErrorLog ${APACHE_LOG_DIR}/error.log\n        CustomLog ${APACHE_LOG_DIR}/access.log combined\n\n        #   SSL Engine Switch:\n        #   Enable/Disable SSL for this virtual host.\n        SSLEngine on\n        SSLCertificateFile  /etc/certs/demosite.crt\n        SSLCertificateKeyFile /etc/certs/demosite.key\n\n        <Directory /var/www/html/oxdrails>\n            AllowOverride All\n                    Options Indexes FollowSymLinks\n            Order allow,deny\n            Allow from all\n        </Directory>\n    </VirtualHost>\n</IfModule>  Then enable  oxd-rails.com  virtual host by running:  $ sudo a2ensite oxd-ruby.conf   After that add domain name in virtual host file.\nIn console:  $ sudo nano /etc/hosts  Add these lines in virtual host file:  127.0.0.1 www.oxd-rails.com\n127.0.0.1 oxd-rails.com  Reload the apache server  $ sudo service apache2 restart",
            "title": "Phusion Passenger Setup"
        },
        {
            "location": "/framework/rails/#setting-up-and-running-demo-app",
            "text": "Navigate to Rails app root:  cd /var/www/html/oxdrails  Run :  bundle install  Now your rails app should work from http://oxd-rails.com",
            "title": "Setting up and running demo app"
        },
        {
            "location": "/framework/flask/",
            "text": "oxd Python Flask \n#\n\n\nThe following documentation demonstrates how to use Gluu's commercial OAuth 2.0 client software, \n\noxd\n, to send users from a Python Flask app to an OpenID Connect Provider \n(OP) for login. You can send users to any standard OP for login, including Google. \nIn these docs we use the \nfree open source Gluu Server\n as the OP.\n\n\n\n\nNote\n\n\nYou can also refer to the \noxd python library\n docs for more details on java classes.\n\n\n\n\nDeployment \n#\n\n\nPrerequisites\n#\n\n\nUbuntu 14.04 with some basic utilities listed below\n\n\napt-get install apache2 libapache2-mod-wsgi python-dev git python-pip\na2enmod wsgi\na2enmod ssl\n\n\n\n\nGluu Development Binaries\n#\n\n\necho \"deb http://repo.gluu.org/ubuntu/ trusty-devel main\" > /etc/apt/sources.list.d/gluu-devel-repo.list\ncurl http://repo.gluu.org/ubuntu/gluu-apt.key | apt-key add -\napt-get update\napt-get install gluu-oxd-server\n\n\n\n\nConfiguring the oxd-server \n#\n\n\nEdit the file \n/opt/oxd-server/conf/oxd-conf.json\n\n\n\n\nChange the OP HOST name to your OpenID Provider domain at the line \n\"op_host\": \"https://ce-dev.gluu.org\"\n\n\n\n\nEdit the file \n/opt/oxd-server/conf/oxd-default-site-config.json\n\n\n\n\nChange the \nresponse_types\n line to \n\"response_types\": [\"code\"]\n\n\n\n\nStart the oxd-server\n\n\nservice gluu-oxd-server start\n\n\n\n\nDemosite deployment \n#\n\n\nOpenID Connect works only with HTTPS connections. So let us get the ssl certs ready\n\n\nmkdir /etc/certs\ncd /etc/certs\nopenssl genrsa -des3 -out demosite.key 2048\nopenssl rsa -in demosite.key -out demosite.key.insecure\nmv demosite.key.insecure demosite.key\nopenssl req -new -key demosite.key -out demosite.csr\nopenssl x509 -req -days 365 -in demosite.csr -signkey demosite.key -out demosite.crt\n\n\n\n\nGet the source code for demosite\n\n\ncd /var/www/html\ngit clone https://github.com/GluuFederation/oxd-python.git\n\n\n\n\nDeploying the site\n\n\ncd oxd-python\npip install -r requirements.txt\ncp demosite/demosite.conf /etc/apache2/sites-available/demosite.conf\nchown www-data demosite/demosite.cfg\na2ensite demosite\nservice apache2 restart\n\n\n\n\nNow the site would be available as the default site for https (port 443) at your domain.\nHowever the callback urls need to be configured before you can see things working.\nEdit \ndemosite/demosite.cfg\n and change the redirect uris for yor domain. \nOR\n If you are testing\nat a local server then you can add \nclient.example.com\n to you \n/etc/hosts\n to point to your\nIP, instead of editing the uris in the \ndemosite.cfg\n file.",
            "title": "Python Flask"
        },
        {
            "location": "/framework/flask/#oxd-python-flask",
            "text": "The following documentation demonstrates how to use Gluu's commercial OAuth 2.0 client software,  oxd , to send users from a Python Flask app to an OpenID Connect Provider \n(OP) for login. You can send users to any standard OP for login, including Google. \nIn these docs we use the  free open source Gluu Server  as the OP.   Note  You can also refer to the  oxd python library  docs for more details on java classes.",
            "title": "oxd Python Flask "
        },
        {
            "location": "/framework/flask/#deployment",
            "text": "",
            "title": "Deployment "
        },
        {
            "location": "/framework/flask/#prerequisites",
            "text": "Ubuntu 14.04 with some basic utilities listed below  apt-get install apache2 libapache2-mod-wsgi python-dev git python-pip\na2enmod wsgi\na2enmod ssl",
            "title": "Prerequisites"
        },
        {
            "location": "/framework/flask/#gluu-development-binaries",
            "text": "echo \"deb http://repo.gluu.org/ubuntu/ trusty-devel main\" > /etc/apt/sources.list.d/gluu-devel-repo.list\ncurl http://repo.gluu.org/ubuntu/gluu-apt.key | apt-key add -\napt-get update\napt-get install gluu-oxd-server",
            "title": "Gluu Development Binaries"
        },
        {
            "location": "/framework/flask/#configuring-the-oxd-server",
            "text": "Edit the file  /opt/oxd-server/conf/oxd-conf.json   Change the OP HOST name to your OpenID Provider domain at the line  \"op_host\": \"https://ce-dev.gluu.org\"   Edit the file  /opt/oxd-server/conf/oxd-default-site-config.json   Change the  response_types  line to  \"response_types\": [\"code\"]   Start the oxd-server  service gluu-oxd-server start",
            "title": "Configuring the oxd-server "
        },
        {
            "location": "/framework/flask/#demosite-deployment",
            "text": "OpenID Connect works only with HTTPS connections. So let us get the ssl certs ready  mkdir /etc/certs\ncd /etc/certs\nopenssl genrsa -des3 -out demosite.key 2048\nopenssl rsa -in demosite.key -out demosite.key.insecure\nmv demosite.key.insecure demosite.key\nopenssl req -new -key demosite.key -out demosite.csr\nopenssl x509 -req -days 365 -in demosite.csr -signkey demosite.key -out demosite.crt  Get the source code for demosite  cd /var/www/html\ngit clone https://github.com/GluuFederation/oxd-python.git  Deploying the site  cd oxd-python\npip install -r requirements.txt\ncp demosite/demosite.conf /etc/apache2/sites-available/demosite.conf\nchown www-data demosite/demosite.cfg\na2ensite demosite\nservice apache2 restart  Now the site would be available as the default site for https (port 443) at your domain.\nHowever the callback urls need to be configured before you can see things working.\nEdit  demosite/demosite.cfg  and change the redirect uris for yor domain.  OR  If you are testing\nat a local server then you can add  client.example.com  to you  /etc/hosts  to point to your\nIP, instead of editing the uris in the  demosite.cfg  file.",
            "title": "Demosite deployment "
        },
        {
            "location": "/framework/node/",
            "text": "oxd-node-demo\n#\n\n\nThe following documentation demonstrates how to use Gluu's commercial OAuth 2.0 client software, \noxd\n, to send users from a Node app to an OpenID Connect Provider (OP) for login. You can send users to any standard OP for login, including Google. In these docs we use the \nfree open source Gluu Server\n as the OP.\n\n\nInstallation:\n#\n\n\n\n\nGithub sources\n\n\nGluu Server\n\n\nOxd Server\n\n\n\n\nAttention:\n\n\nApplication will not be working if your host does not have https://.\n\n\n\n\nConfiguration:\n#\n\n\nOnce the library is installed, create a copy of the sample configuration file for your website in a server \nwritable\n location and edit the configuration. For example\n\n\nGo to properties.js,\nfind exports.app_port=null and enter port no inplace of \"null\" which ever is free on your server.\n\n\n\n\nHow to use:\n#\n\n\n\n\nDownload source code for demo client application [oxd-node-demo]\n\n\nConfigure your port in \nproperties.js\n file in root directory\n\n\nFrom command line, move into demo client application and enter \nnpm update\n, and run it [node index].\n\n\nGo to web browser and access demo application with this url \nhttps://localhost.com:{port}\n (you can use any other port incase if 5053 port is busy in any other process)\n\n\nRegister your website with oxd, fill the site registration form and submit it.\n\n\nNow your site user can login using oxd-server\n\n\n\n\nDemo Video:\n#\n\n\nHave a look into this demo video, a screen recording of this demo website\u2019s features.\n\n\n\n\nDemo video",
            "title": "Node/Express"
        },
        {
            "location": "/framework/node/#oxd-node-demo",
            "text": "The following documentation demonstrates how to use Gluu's commercial OAuth 2.0 client software,  oxd , to send users from a Node app to an OpenID Connect Provider (OP) for login. You can send users to any standard OP for login, including Google. In these docs we use the  free open source Gluu Server  as the OP.",
            "title": "oxd-node-demo"
        },
        {
            "location": "/framework/node/#installation",
            "text": "Github sources  Gluu Server  Oxd Server   Attention:  Application will not be working if your host does not have https://.",
            "title": "Installation:"
        },
        {
            "location": "/framework/node/#configuration",
            "text": "Once the library is installed, create a copy of the sample configuration file for your website in a server  writable  location and edit the configuration. For example  Go to properties.js,\nfind exports.app_port=null and enter port no inplace of \"null\" which ever is free on your server.",
            "title": "Configuration:"
        },
        {
            "location": "/framework/node/#how-to-use",
            "text": "Download source code for demo client application [oxd-node-demo]  Configure your port in  properties.js  file in root directory  From command line, move into demo client application and enter  npm update , and run it [node index].  Go to web browser and access demo application with this url  https://localhost.com:{port}  (you can use any other port incase if 5053 port is busy in any other process)  Register your website with oxd, fill the site registration form and submit it.  Now your site user can login using oxd-server",
            "title": "How to use:"
        },
        {
            "location": "/framework/node/#demo-video",
            "text": "Have a look into this demo video, a screen recording of this demo website\u2019s features.  Demo video",
            "title": "Demo Video:"
        },
        {
            "location": "/framework/net/",
            "text": "oxd .Net\n#\n\n\nThe following documentation demonstrates how to use Gluu's commercial OAuth 2.0 client software, \noxd\n, to send users from a Node app to an OpenID Connect Provider (OP) for login. You can securely send users to any standard OP for login, including Google and the \nfree open source Gluu Server\n.\n\n\n\n\nNote\n\n\nRefer to the \noxd csharp library docs\n for more details on c# classes.\n\n\n\n\nInstallation:\n#\n\n\n\n\nGithub sources\n\n\nGluu Server\n\n\noxd Server\n\n\n\n\nAttention:\n\n\nApplication will not work if your host does not have https://.\n\n\n\n\nConfiguration:\n#\n\n\nFirst set the GluuDemoWebsite as startup project and run.\n\n\nHow to use:\n#\n\n\n\n\nDownload source code for demo client application \noxd-csharp\n\n\nFirst set the GluuDemoWebsite as startup project\n\n\nRun the project\n\n\n\n\nSample Code\n#\n\n\nRegister Site\n#\n\n\nRequired parameters:\n\n\n op_host\n\n port        - the port of the oxd server\n* redirectURI - A URL which the OP is authorized to redirect the user after authorization.\n\n\nRequest:\n\n\npublic RegisterSiteResponse RegisterSite(string host, int port, string redirectUrl)\n    {\n        try\n        {\n            CommandClient client = new CommandClient(host, port);\n            RegisterSiteParams param = new RegisterSiteParams();\n            param.SetAuthorizationRedirectUri(redirectUrl);\n            param.SetPostLogoutRedirectUri(redirectUrl);\n            param.SetClientLogoutUri(Lists.newArrayList(new string[] { \"\" }));\n\n            Command cmd = new Command(CommandType.register_site);\n            cmd.setParamsObject(param);\n\n            string commandresponse = client.send(cmd);\n            RegisterSiteResponse response = new RegisterSiteResponse(JsonConvert.DeserializeObject<dynamic>(commandresponse).data);\n            Assert.IsNotNull(response);\n            Assert.IsTrue(!String.IsNullOrEmpty(response.getOxdId()));\n            StoredValues._oxd_id = response.getOxdId();\n            return response;\n        }\n        catch (Exception ex)\n        {\n            Console.WriteLine(ex.Message);\n            Logger.Debug(ex.Message);\n            return null;\n        }\n    }\n\n\n\n\nResponse:\n\n\n{\n    \"status\":\"ok\",\n    \"data\":{\n        \"oxd_id\":\"6F9619FF-8B86-D011-B42D-00CF4FC964FF\"\n    }\n}\n\n\n\n\nUpdate Site Registration\n#\n\n\nRequired parameters:\n\n\n op_host\n\n port\n\n\nRequest:\n\n\n    public UpdateSiteResponse UpdateSiteRegisteration(string host, int port)\n    {\n        try\n        {\n            CommandClient client = new CommandClient(host, port);\n            UpdateSiteParams param = new UpdateSiteParams();\n            param.SetOxdId(StoredValues._oxd_id);\n            param.SetAuthorizationRedirectUri(\"http://www.test.com/wp-login.php\");\n            param.SetPostLogoutRedirectUri(\"http://www.test.com/wp-login.php?action=logout&_wpnonce=a3c70643e9\");\n            param.SetApplicationType(\"web\");\n            param.SetRedirectUris(Lists.newArrayList(new string[] { \"http://www.test.com/wp-login.php\" }));\n            param.SetAcrValues(new List<string>());\n            param.SetClientJwksUri(\"\");\n            param.SetContacts(Lists.newArrayList(new string[] { \"test@gmail.com\" }));\n            param.SetGrantType(Lists.newArrayList(new string[] { \"authorization_code\" }));\n            param.SetClientTokenEndpointAuthMethod(\"\");\n            param.SetClientLogoutUri(Lists.newArrayList(new string[] { \"http://www.test.com/wp-login.php?action=logout&_wpnonce=a3c70643e9\" }));\n\n            Command cmd = new Command(CommandType.update_site_registration);\n            cmd.setParamsObject(param);\n\n            string commandresponse = client.send(cmd);\n            UpdateSiteResponse response = new UpdateSiteResponse(JsonConvert.DeserializeObject<dynamic>(commandresponse).data);\n            Assert.IsNotNull(response);\n            Assert.IsTrue(!String.IsNullOrEmpty(response.getOxdId()));\n            return response;\n        }\n        catch (Exception ex)\n        {\n            Console.WriteLine(ex.Message);\n            Logger.Debug(ex.Message);\n            return null;\n        }\n    } \n\n\n\n\nResponse:\n\n\n{\n    \"status\":\"ok\"\n}\n\n\n\n\nGet Authorization URL\n#\n\n\nRequired parameters:\n\n\n op_host\n\n port\n\n\nRequest:\n\n\n    public string GetAuthorizationURL(string host, int port)\n    {\n        try\n        {\n            CommandClient client = new CommandClient(host, port);\n\n            GetAuthorizationUrlParams param = new GetAuthorizationUrlParams();\n            param.SetOxdId(StoredValues._oxd_id);\n            param.SetAcrValues(new List<string>());\n\n            Command cmd = new Command(CommandType.get_authorization_url);\n            cmd.setParamsObject(param);\n\n            string response = client.send(cmd);\n            GetAuthorizationUrlResponse res = new GetAuthorizationUrlResponse(JsonConvert.DeserializeObject<dynamic>(response).data);\n\n            Assert.IsNotNull(res);\n            Assert.IsTrue(!String.IsNullOrEmpty(res.getAuthorizationUrl()));\n            return res.getAuthorizationUrl();\n        }\n        catch (Exception ex)\n        {\n            Console.WriteLine(ex.Message);\n            Logger.Debug(ex.Message);\n            return ex.Message;\n        }\n    }\n\n\n\n\nResponse:\n\n\n{\n    \"status\":\"ok\",\n    \"data\":{\n        \"authorization_url\":\"https://server.example.com/authorize?response_type=code&client_id=s6BhdRkqt3&redirect_uri=https%3A%2F%2Fclient.example.org%2Fcb&scope=openid%20profile&acr_values=duo&state=af0ifjsldkj&nonce=n-0S6_WzA2Mj\"\n    }\n}\n\n\n\n\nGet Tokens by Code\n#\n\n\nRequired parameters:\n\n\n op_host\n\n port\n\n userId\n\n userSecret\n\n\nRequest:\n\n\n    public GetTokensByCodeResponse GetTokenByCode(string host, int port, string userId, string userSecret)\n    {\n        try\n        {\n            CommandClient client = new CommandClient(host, port);\n            GetTokensByCodeParams param = new GetTokensByCodeParams();\n            param.SetOxdId(StoredValues._oxd_id);\n            param.SetCode(get_authorization_code.GetAuthorizationCode(host, port, userId, userSecret));\n            param.SetScopes(Lists.newArrayList(new string[] { \"openid\", \"profile\" }));\n            Command cmd = new Command(CommandType.get_tokens_by_code);\n            cmd.setParamsObject(param);\n            string commandresponse = client.send(cmd);\n            GetTokensByCodeResponse response = new GetTokensByCodeResponse(JsonConvert.DeserializeObject<dynamic>(commandresponse).data);\n            Assert.IsNotNull(response);\n            return response;\n        }\n        catch (Exception ex)\n        {\n            Console.WriteLine(ex.Message);\n            Logger.Debug(ex.Message);\n            return null;\n        }\n    }\n\n\n\n\nResponse:\n\n\n{\n    \"status\":\"ok\",\n    \"data\":{\n        \"access_token\":\"SlAV32hkKG\",\n        \"expires_in\":3600,\n        \"refresh_token\":\"aaAV32hkKG1\"\n        \"id_token\":\"eyJ0 ... NiJ9.eyJ1c ... I6IjIifX0.DeWt4Qu ... ZXso\",\n        \"id_token_claims\": {\n             \"iss\": \"https://server.example.com\",\n             \"sub\": \"24400320\",\n             \"aud\": \"s6BhdRkqt3\",\n             \"nonce\": \"n-0S6_WzA2Mj\",\n             \"exp\": 1311281970,\n             \"iat\": 1311280970,\n             \"at_hash\": \"MTIzNDU2Nzg5MDEyMzQ1Ng\"\n        }\n    }\n}\n\n\n\n\n\n!!!\nNote:\n \n    GetTokenByCode method further calls the GetAuthorizationCode for the Authorization code to be used\n\n\npublic static string GetAuthorizationCode(string host, int port, string userId, string userSecret)\n{\n    try\n    {\n        CommandClient client = new CommandClient(host, port);\n        GetAuthorizationCodeParams param = new GetAuthorizationCodeParams();\n        param.SetOxdId(StoredValues._oxd_id);\n        param.SetUserName(userId);\n        param.SetPassword(userSecret);\n        param.SetAcrValues(new List<string>());\n        Command cmd = new Command(CommandType.get_authorization_code);\n        cmd.setParamsObject(param);\n        string response = client.send(cmd);\n        GetAuthorizationCodeResponse res = new GetAuthorizationCodeResponse(JsonConvert.DeserializeObject<dynamic>(response).data);\n        Assert.IsNotNull(res);\n        Assert.IsTrue(!String.IsNullOrEmpty(res.getCode()));\n        return res.getCode();\n    }\n    catch (Exception ex)\n    {\n        Console.WriteLine(ex.Message);\n        Logger.Debug(ex.Message);\n        return ex.Message;\n    }\n}\n\n\n\n\nGet User Info\n#\n\n\nRequired parameters:\n\n\n op_host\n\n port\n* accessToken\n\n\nRequest:\n\n\n    public GetUserInfoResponse GetUserInfo(string host, int port, string accessToken)\n    {\n        try\n        {\n            CommandClient client = new CommandClient(host, port);\n\n            GetUserInfoParams param = new GetUserInfoParams();\n            param.setOxdId(StoredValues._oxd_id);\n            param.setAccessToken(accessToken);\n\n            Command cmd = new Command(CommandType.get_user_info);\n            cmd.setParamsObject(param);\n\n            string response = client.send(cmd);\n            GetUserInfoResponse res = new GetUserInfoResponse(JsonConvert.DeserializeObject<dynamic>(response).data);\n            Assert.IsNotNull(res);\n            return res;\n        }\n        catch (Exception ex)\n        {\n            Console.WriteLine(ex.Message);\n            Logger.Debug(ex.Message);\n            return null;\n        }\n    }   \n\n\n\n\nResponse:\n\n\n{\n    \"status\":\"ok\",\n    \"data\":{\n        \"claims\":{\n            \"sub\": [\"248289761001\"],\n            \"name\": [\"Jane Doe\"],\n            \"given_name\": [\"Jane\"],\n            \"family_name\": [\"Doe\"],\n            \"preferred_username\": [\"j.doe\"],\n            \"email\": [\"janedoe@example.com\"],\n            \"picture\": [\"http://example.com/janedoe/me.jpg\"]\n        }\n    }\n}\n\n\n\n\nLogout\n#\n\n\nRequired parameters:\n\n\n op_host\n\n port\n\n\nRequest:\n\n\n    public LogoutResponse GetLogoutURL(string host, int port)\n    {\n        try\n        {\n            CommandClient client = new CommandClient(host, port);\n\n            GetLogoutUrlParams param = new GetLogoutUrlParams();\n            param.setOxdId(StoredValues._oxd_id);\n            param.setIdTokenHint(\"dummy_token\"); \n            param.setState(Guid.NewGuid().ToString());\n\n            Command cmd = new Command(CommandType.get_logout_uri);\n            cmd.setParamsObject(param);\n\n            string response = client.send(cmd);\n            LogoutResponse res = new LogoutResponse(JsonConvert.DeserializeObject<dynamic>(response).data);\n            Assert.IsNotNull(res);\n            return res;\n        }\n        catch (Exception ex)\n        {\n            Console.WriteLine(ex.Message);\n            Logger.Debug(ex.Message);\n            return null;\n        }\n    }  \n\n\n\n\nResponse:\n\n\n{\n    \"status\":\"ok\",\n    \"data\":{\n        \"uri\":\"https://<server>/end_session?id_token_hint=<id token>&state=<state>&post_logout_redirect_uri=<...>\"\n    }\n}\n\n\n\n\nUMA RS Resource protection\n#\n\n\nRequest:\n\n\n   private UmaRsProtectResponse ProtectResources(OxdModel oxdModel)\n   {\n        var protectParams = new UmaRsProtectParams();\n        var protectClient = new UmaRsProtectClient();\n\n        //prepare input params for Protect Resource\n        protectParams.OxdId = oxdModel.OxdId;\n        protectParams.ProtectResources = new List<ProtectResource>\n        {\n            new ProtectResource\n            {\n                Path = \"/scim\",\n                ProtectConditions = new List<ProtectCondition>\n                {\n                    new ProtectCondition\n                    {\n                        HttpMethods = new List<string> { \"GET\" },\n                        Scopes = new List<string> { \"https://scim-test.gluu.org/identity/seam/resource/restv1/scim/vas1\" },      // Your hosted Gluu server URL\n                        TicketScopes = new List<string> { \"https://scim-test.gluu.org/identity/seam/resource/restv1/scim/vas1\" } // Your hosted Gluu server URL\n                    }\n                }\n            }\n        };\n\n        //Protect Resources\n        var protectResponse = protectClient.ProtectResources(oxdModel.OxdHost, oxdModel.OxdPort, protectParams);\n\n        //process response\n        if(protectResponse.Status.ToLower().Equals(\"ok\"))\n        {\n            return protectResponse;\n        }\n        throw new Exception(\"Procteting Resource is not successful. Check OXD Server log for error details.\");\n   }\n\n\n\n\nUMA RS Check access\n#\n\n\nRequest:\n\n\n    private UmaRsCheckAccessResponse CheckAccess(string rpt, string path, string httpMethod, OxdModel oxdModel)\n    {\n        var checkAccessParams = new UmaRsCheckAccessParams();\n        var checkAccessClient = new UmaRsCheckAccessClient();\n\n        //prepare input params for Check Access\n        checkAccessParams.OxdId = oxdModel.OxdId;\n        checkAccessParams.RPT = rpt;\n        checkAccessParams.Path = path;\n        checkAccessParams.HttpMethod = httpMethod;\n\n        //Check Access\n        var checkAccessResponse = checkAccessClient.CheckAccess(oxdModel.OxdHost, oxdModel.OxdPort, checkAccessParams);\n\n        //process response\n        return checkAccessResponse;\n    }   \n\n\n\n\nResponse:\n\n\nAccess Denied with valid Ticket \n\n\n\n\nUMA Get RPT\n#\n\n\nRequest:\n\n\n  private GetRPTResponse ObtainRpt(OxdModel oxdModel)\n    {\n        var getRptParams = new UmaRpGetRptParams();\n        var getRptClient = new UmaRpGetRptClient();\n\n        //prepare input params for Protect Resource\n        getRptParams.OxdId = oxdModel.OxdId;\n        getRptParams.ForceNew = false;\n\n        //Get RPT\n        var getRptResponse = getRptClient.GetRPT(oxdModel.OxdHost, oxdModel.OxdPort, getRptParams);\n\n        //process response\n        if (getRptResponse.Status.ToLower().Equals(\"ok\"))\n        {\n            return getRptResponse;\n        }\n\n        throw new Exception(\"Obtaining RPT is not successful. Check OXD Server log for error details.\");\n    } \n\n\n\n\nResponse:\n\n\nExpect a valid RPT is returned\n\n\n\n\nNote : Once you get valid RPT you need to follow this steps again:\n\n\n1) UMA RS Check access  with valid RPT \n\nRequest:\n\n\nUMA RS Check access again with valid RPT\n\n\n\n\nResponse:\n\n\nAccess Denied with valid data\n\n\n\n\n2) Authorize RPT\n\n\nRequest:\n\n\n    private UmaRpAuthorizeRptResponse AuthorizeRpt(string rpt, string ticket, OxdModel oxdModel)\n    {\n        var authorizeRptParams = new UmaRpAuthorizeRptParams();\n        var authorizeRptClient = new UmaRpAuthorizeRptClient();\n\n        //prepare input params for Check Access\n        authorizeRptParams.OxdId = oxdModel.OxdId;\n        authorizeRptParams.RPT = rpt;\n        authorizeRptParams.Ticket = ticket;\n\n        //Authorize RPT\n        var authorizeRptResponse = authorizeRptClient.AuthorizeRpt(oxdModel.OxdHost, oxdModel.OxdPort, authorizeRptParams);\n\n        //process response\n        return authorizeRptResponse;\n    }\n\n\n\n\nResponse:\n\n\nStatus should be ok\n\n\n\n\n3) UMA RS Check access (Check Access again after authorizing RPT)\n\nRequest:\n\n\nUMA RS Check access again after authorizing RPT \n\n\n\n\nResponse:\n\n\nAccess Granted\n\n\n\n\nUMA Get GAT\n#\n\n\nRequest:\n\n\npublic ActionResult GetGat(OxdModel oxd)\n{\n    var getGatInputParams = new GetGATParams();\n    var getGatClient = new GetGATClient();\n\n    //prepare input params for Getting GAT\n    getGatInputParams.OxdId = oxd.OxdId;\n    getGatInputParams.Scopes = new List<string> {\n                                    \"https://scim-test.gluu.org/identity/seam/resource/restv1/scim/vas1\",\n                                    \"https://scim-test.gluu.org/identity/seam/resource/restv1/scim/vas2\" };\n\n    //Get GAT\n    var getGatResponse = getGatClient.GetGat(oxd.OxdHost, oxd.OxdPort, getGatInputParams);\n\n    //Process response\n    return Json(new { getGatResponse = getGatResponse.Data.Rpt });\n}",
            "title": ".Net"
        },
        {
            "location": "/framework/net/#oxd-net",
            "text": "The following documentation demonstrates how to use Gluu's commercial OAuth 2.0 client software,  oxd , to send users from a Node app to an OpenID Connect Provider (OP) for login. You can securely send users to any standard OP for login, including Google and the  free open source Gluu Server .   Note  Refer to the  oxd csharp library docs  for more details on c# classes.",
            "title": "oxd .Net"
        },
        {
            "location": "/framework/net/#installation",
            "text": "Github sources  Gluu Server  oxd Server   Attention:  Application will not work if your host does not have https://.",
            "title": "Installation:"
        },
        {
            "location": "/framework/net/#configuration",
            "text": "First set the GluuDemoWebsite as startup project and run.",
            "title": "Configuration:"
        },
        {
            "location": "/framework/net/#how-to-use",
            "text": "Download source code for demo client application  oxd-csharp  First set the GluuDemoWebsite as startup project  Run the project",
            "title": "How to use:"
        },
        {
            "location": "/framework/net/#sample-code",
            "text": "",
            "title": "Sample Code"
        },
        {
            "location": "/framework/net/#register-site",
            "text": "Required parameters:   op_host  port        - the port of the oxd server\n* redirectURI - A URL which the OP is authorized to redirect the user after authorization.  Request:  public RegisterSiteResponse RegisterSite(string host, int port, string redirectUrl)\n    {\n        try\n        {\n            CommandClient client = new CommandClient(host, port);\n            RegisterSiteParams param = new RegisterSiteParams();\n            param.SetAuthorizationRedirectUri(redirectUrl);\n            param.SetPostLogoutRedirectUri(redirectUrl);\n            param.SetClientLogoutUri(Lists.newArrayList(new string[] { \"\" }));\n\n            Command cmd = new Command(CommandType.register_site);\n            cmd.setParamsObject(param);\n\n            string commandresponse = client.send(cmd);\n            RegisterSiteResponse response = new RegisterSiteResponse(JsonConvert.DeserializeObject<dynamic>(commandresponse).data);\n            Assert.IsNotNull(response);\n            Assert.IsTrue(!String.IsNullOrEmpty(response.getOxdId()));\n            StoredValues._oxd_id = response.getOxdId();\n            return response;\n        }\n        catch (Exception ex)\n        {\n            Console.WriteLine(ex.Message);\n            Logger.Debug(ex.Message);\n            return null;\n        }\n    }  Response:  {\n    \"status\":\"ok\",\n    \"data\":{\n        \"oxd_id\":\"6F9619FF-8B86-D011-B42D-00CF4FC964FF\"\n    }\n}",
            "title": "Register Site"
        },
        {
            "location": "/framework/net/#update-site-registration",
            "text": "Required parameters:   op_host  port  Request:      public UpdateSiteResponse UpdateSiteRegisteration(string host, int port)\n    {\n        try\n        {\n            CommandClient client = new CommandClient(host, port);\n            UpdateSiteParams param = new UpdateSiteParams();\n            param.SetOxdId(StoredValues._oxd_id);\n            param.SetAuthorizationRedirectUri(\"http://www.test.com/wp-login.php\");\n            param.SetPostLogoutRedirectUri(\"http://www.test.com/wp-login.php?action=logout&_wpnonce=a3c70643e9\");\n            param.SetApplicationType(\"web\");\n            param.SetRedirectUris(Lists.newArrayList(new string[] { \"http://www.test.com/wp-login.php\" }));\n            param.SetAcrValues(new List<string>());\n            param.SetClientJwksUri(\"\");\n            param.SetContacts(Lists.newArrayList(new string[] { \"test@gmail.com\" }));\n            param.SetGrantType(Lists.newArrayList(new string[] { \"authorization_code\" }));\n            param.SetClientTokenEndpointAuthMethod(\"\");\n            param.SetClientLogoutUri(Lists.newArrayList(new string[] { \"http://www.test.com/wp-login.php?action=logout&_wpnonce=a3c70643e9\" }));\n\n            Command cmd = new Command(CommandType.update_site_registration);\n            cmd.setParamsObject(param);\n\n            string commandresponse = client.send(cmd);\n            UpdateSiteResponse response = new UpdateSiteResponse(JsonConvert.DeserializeObject<dynamic>(commandresponse).data);\n            Assert.IsNotNull(response);\n            Assert.IsTrue(!String.IsNullOrEmpty(response.getOxdId()));\n            return response;\n        }\n        catch (Exception ex)\n        {\n            Console.WriteLine(ex.Message);\n            Logger.Debug(ex.Message);\n            return null;\n        }\n    }   Response:  {\n    \"status\":\"ok\"\n}",
            "title": "Update Site Registration"
        },
        {
            "location": "/framework/net/#get-authorization-url",
            "text": "Required parameters:   op_host  port  Request:      public string GetAuthorizationURL(string host, int port)\n    {\n        try\n        {\n            CommandClient client = new CommandClient(host, port);\n\n            GetAuthorizationUrlParams param = new GetAuthorizationUrlParams();\n            param.SetOxdId(StoredValues._oxd_id);\n            param.SetAcrValues(new List<string>());\n\n            Command cmd = new Command(CommandType.get_authorization_url);\n            cmd.setParamsObject(param);\n\n            string response = client.send(cmd);\n            GetAuthorizationUrlResponse res = new GetAuthorizationUrlResponse(JsonConvert.DeserializeObject<dynamic>(response).data);\n\n            Assert.IsNotNull(res);\n            Assert.IsTrue(!String.IsNullOrEmpty(res.getAuthorizationUrl()));\n            return res.getAuthorizationUrl();\n        }\n        catch (Exception ex)\n        {\n            Console.WriteLine(ex.Message);\n            Logger.Debug(ex.Message);\n            return ex.Message;\n        }\n    }  Response:  {\n    \"status\":\"ok\",\n    \"data\":{\n        \"authorization_url\":\"https://server.example.com/authorize?response_type=code&client_id=s6BhdRkqt3&redirect_uri=https%3A%2F%2Fclient.example.org%2Fcb&scope=openid%20profile&acr_values=duo&state=af0ifjsldkj&nonce=n-0S6_WzA2Mj\"\n    }\n}",
            "title": "Get Authorization URL"
        },
        {
            "location": "/framework/net/#get-tokens-by-code",
            "text": "Required parameters:   op_host  port  userId  userSecret  Request:      public GetTokensByCodeResponse GetTokenByCode(string host, int port, string userId, string userSecret)\n    {\n        try\n        {\n            CommandClient client = new CommandClient(host, port);\n            GetTokensByCodeParams param = new GetTokensByCodeParams();\n            param.SetOxdId(StoredValues._oxd_id);\n            param.SetCode(get_authorization_code.GetAuthorizationCode(host, port, userId, userSecret));\n            param.SetScopes(Lists.newArrayList(new string[] { \"openid\", \"profile\" }));\n            Command cmd = new Command(CommandType.get_tokens_by_code);\n            cmd.setParamsObject(param);\n            string commandresponse = client.send(cmd);\n            GetTokensByCodeResponse response = new GetTokensByCodeResponse(JsonConvert.DeserializeObject<dynamic>(commandresponse).data);\n            Assert.IsNotNull(response);\n            return response;\n        }\n        catch (Exception ex)\n        {\n            Console.WriteLine(ex.Message);\n            Logger.Debug(ex.Message);\n            return null;\n        }\n    }  Response:  {\n    \"status\":\"ok\",\n    \"data\":{\n        \"access_token\":\"SlAV32hkKG\",\n        \"expires_in\":3600,\n        \"refresh_token\":\"aaAV32hkKG1\"\n        \"id_token\":\"eyJ0 ... NiJ9.eyJ1c ... I6IjIifX0.DeWt4Qu ... ZXso\",\n        \"id_token_claims\": {\n             \"iss\": \"https://server.example.com\",\n             \"sub\": \"24400320\",\n             \"aud\": \"s6BhdRkqt3\",\n             \"nonce\": \"n-0S6_WzA2Mj\",\n             \"exp\": 1311281970,\n             \"iat\": 1311280970,\n             \"at_hash\": \"MTIzNDU2Nzg5MDEyMzQ1Ng\"\n        }\n    }\n}  !!! Note:  \n    GetTokenByCode method further calls the GetAuthorizationCode for the Authorization code to be used  public static string GetAuthorizationCode(string host, int port, string userId, string userSecret)\n{\n    try\n    {\n        CommandClient client = new CommandClient(host, port);\n        GetAuthorizationCodeParams param = new GetAuthorizationCodeParams();\n        param.SetOxdId(StoredValues._oxd_id);\n        param.SetUserName(userId);\n        param.SetPassword(userSecret);\n        param.SetAcrValues(new List<string>());\n        Command cmd = new Command(CommandType.get_authorization_code);\n        cmd.setParamsObject(param);\n        string response = client.send(cmd);\n        GetAuthorizationCodeResponse res = new GetAuthorizationCodeResponse(JsonConvert.DeserializeObject<dynamic>(response).data);\n        Assert.IsNotNull(res);\n        Assert.IsTrue(!String.IsNullOrEmpty(res.getCode()));\n        return res.getCode();\n    }\n    catch (Exception ex)\n    {\n        Console.WriteLine(ex.Message);\n        Logger.Debug(ex.Message);\n        return ex.Message;\n    }\n}",
            "title": "Get Tokens by Code"
        },
        {
            "location": "/framework/net/#get-user-info",
            "text": "Required parameters:   op_host  port\n* accessToken  Request:      public GetUserInfoResponse GetUserInfo(string host, int port, string accessToken)\n    {\n        try\n        {\n            CommandClient client = new CommandClient(host, port);\n\n            GetUserInfoParams param = new GetUserInfoParams();\n            param.setOxdId(StoredValues._oxd_id);\n            param.setAccessToken(accessToken);\n\n            Command cmd = new Command(CommandType.get_user_info);\n            cmd.setParamsObject(param);\n\n            string response = client.send(cmd);\n            GetUserInfoResponse res = new GetUserInfoResponse(JsonConvert.DeserializeObject<dynamic>(response).data);\n            Assert.IsNotNull(res);\n            return res;\n        }\n        catch (Exception ex)\n        {\n            Console.WriteLine(ex.Message);\n            Logger.Debug(ex.Message);\n            return null;\n        }\n    }     Response:  {\n    \"status\":\"ok\",\n    \"data\":{\n        \"claims\":{\n            \"sub\": [\"248289761001\"],\n            \"name\": [\"Jane Doe\"],\n            \"given_name\": [\"Jane\"],\n            \"family_name\": [\"Doe\"],\n            \"preferred_username\": [\"j.doe\"],\n            \"email\": [\"janedoe@example.com\"],\n            \"picture\": [\"http://example.com/janedoe/me.jpg\"]\n        }\n    }\n}",
            "title": "Get User Info"
        },
        {
            "location": "/framework/net/#logout",
            "text": "Required parameters:   op_host  port  Request:      public LogoutResponse GetLogoutURL(string host, int port)\n    {\n        try\n        {\n            CommandClient client = new CommandClient(host, port);\n\n            GetLogoutUrlParams param = new GetLogoutUrlParams();\n            param.setOxdId(StoredValues._oxd_id);\n            param.setIdTokenHint(\"dummy_token\"); \n            param.setState(Guid.NewGuid().ToString());\n\n            Command cmd = new Command(CommandType.get_logout_uri);\n            cmd.setParamsObject(param);\n\n            string response = client.send(cmd);\n            LogoutResponse res = new LogoutResponse(JsonConvert.DeserializeObject<dynamic>(response).data);\n            Assert.IsNotNull(res);\n            return res;\n        }\n        catch (Exception ex)\n        {\n            Console.WriteLine(ex.Message);\n            Logger.Debug(ex.Message);\n            return null;\n        }\n    }    Response:  {\n    \"status\":\"ok\",\n    \"data\":{\n        \"uri\":\"https://<server>/end_session?id_token_hint=<id token>&state=<state>&post_logout_redirect_uri=<...>\"\n    }\n}",
            "title": "Logout"
        },
        {
            "location": "/framework/net/#uma-rs-resource-protection",
            "text": "Request:     private UmaRsProtectResponse ProtectResources(OxdModel oxdModel)\n   {\n        var protectParams = new UmaRsProtectParams();\n        var protectClient = new UmaRsProtectClient();\n\n        //prepare input params for Protect Resource\n        protectParams.OxdId = oxdModel.OxdId;\n        protectParams.ProtectResources = new List<ProtectResource>\n        {\n            new ProtectResource\n            {\n                Path = \"/scim\",\n                ProtectConditions = new List<ProtectCondition>\n                {\n                    new ProtectCondition\n                    {\n                        HttpMethods = new List<string> { \"GET\" },\n                        Scopes = new List<string> { \"https://scim-test.gluu.org/identity/seam/resource/restv1/scim/vas1\" },      // Your hosted Gluu server URL\n                        TicketScopes = new List<string> { \"https://scim-test.gluu.org/identity/seam/resource/restv1/scim/vas1\" } // Your hosted Gluu server URL\n                    }\n                }\n            }\n        };\n\n        //Protect Resources\n        var protectResponse = protectClient.ProtectResources(oxdModel.OxdHost, oxdModel.OxdPort, protectParams);\n\n        //process response\n        if(protectResponse.Status.ToLower().Equals(\"ok\"))\n        {\n            return protectResponse;\n        }\n        throw new Exception(\"Procteting Resource is not successful. Check OXD Server log for error details.\");\n   }",
            "title": "UMA RS Resource protection"
        },
        {
            "location": "/framework/net/#uma-rs-check-access",
            "text": "Request:      private UmaRsCheckAccessResponse CheckAccess(string rpt, string path, string httpMethod, OxdModel oxdModel)\n    {\n        var checkAccessParams = new UmaRsCheckAccessParams();\n        var checkAccessClient = new UmaRsCheckAccessClient();\n\n        //prepare input params for Check Access\n        checkAccessParams.OxdId = oxdModel.OxdId;\n        checkAccessParams.RPT = rpt;\n        checkAccessParams.Path = path;\n        checkAccessParams.HttpMethod = httpMethod;\n\n        //Check Access\n        var checkAccessResponse = checkAccessClient.CheckAccess(oxdModel.OxdHost, oxdModel.OxdPort, checkAccessParams);\n\n        //process response\n        return checkAccessResponse;\n    }     Response:  Access Denied with valid Ticket",
            "title": "UMA RS Check access"
        },
        {
            "location": "/framework/net/#uma-get-rpt",
            "text": "Request:    private GetRPTResponse ObtainRpt(OxdModel oxdModel)\n    {\n        var getRptParams = new UmaRpGetRptParams();\n        var getRptClient = new UmaRpGetRptClient();\n\n        //prepare input params for Protect Resource\n        getRptParams.OxdId = oxdModel.OxdId;\n        getRptParams.ForceNew = false;\n\n        //Get RPT\n        var getRptResponse = getRptClient.GetRPT(oxdModel.OxdHost, oxdModel.OxdPort, getRptParams);\n\n        //process response\n        if (getRptResponse.Status.ToLower().Equals(\"ok\"))\n        {\n            return getRptResponse;\n        }\n\n        throw new Exception(\"Obtaining RPT is not successful. Check OXD Server log for error details.\");\n    }   Response:  Expect a valid RPT is returned  Note : Once you get valid RPT you need to follow this steps again:  1) UMA RS Check access  with valid RPT  Request:  UMA RS Check access again with valid RPT  Response:  Access Denied with valid data  2) Authorize RPT  Request:      private UmaRpAuthorizeRptResponse AuthorizeRpt(string rpt, string ticket, OxdModel oxdModel)\n    {\n        var authorizeRptParams = new UmaRpAuthorizeRptParams();\n        var authorizeRptClient = new UmaRpAuthorizeRptClient();\n\n        //prepare input params for Check Access\n        authorizeRptParams.OxdId = oxdModel.OxdId;\n        authorizeRptParams.RPT = rpt;\n        authorizeRptParams.Ticket = ticket;\n\n        //Authorize RPT\n        var authorizeRptResponse = authorizeRptClient.AuthorizeRpt(oxdModel.OxdHost, oxdModel.OxdPort, authorizeRptParams);\n\n        //process response\n        return authorizeRptResponse;\n    }  Response:  Status should be ok  3) UMA RS Check access (Check Access again after authorizing RPT) Request:  UMA RS Check access again after authorizing RPT   Response:  Access Granted",
            "title": "UMA Get RPT"
        },
        {
            "location": "/framework/net/#uma-get-gat",
            "text": "Request:  public ActionResult GetGat(OxdModel oxd)\n{\n    var getGatInputParams = new GetGATParams();\n    var getGatClient = new GetGATClient();\n\n    //prepare input params for Getting GAT\n    getGatInputParams.OxdId = oxd.OxdId;\n    getGatInputParams.Scopes = new List<string> {\n                                    \"https://scim-test.gluu.org/identity/seam/resource/restv1/scim/vas1\",\n                                    \"https://scim-test.gluu.org/identity/seam/resource/restv1/scim/vas2\" };\n\n    //Get GAT\n    var getGatResponse = getGatClient.GetGat(oxd.OxdHost, oxd.OxdPort, getGatInputParams);\n\n    //Process response\n    return Json(new { getGatResponse = getGatResponse.Data.Rpt });\n}",
            "title": "UMA Get GAT"
        },
        {
            "location": "/plugin/wordpress/",
            "text": "OpenID Connect Single Sign-On (SSO) WordPress Plugin By Gluu\n#\n\n\n\n\nGluu's OpenID Connect Single Sign-On (SSO) WordPress Plugin will enable you to \nauthenticate users against any standard OpenID Connect Provider (OP). \nIf you don't already have an OP you can use Google or \n\ndeploy the free open source Gluu Server\n.  \n\n\nRequirements\n#\n\n\nIn order to use the WordPress plugin you will need a standard OP (like Google or a Gluu Server) and the oxd server.\n\n\n\n\n\n\nCompatibility : 2.9 <= 4.7.2 versions\n\n\n\n\n\n\nGluu Server Installation Guide\n.\n\n\n\n\n\n\noxd Webpage\n\n\n\n\n\n\nInstallation\n#\n\n\nDownload\n#\n\n\nGithub source\n.\n\n\nLink to WordPress marketplace\n\n\nUpload\n#\n\n\nOpen your WordPress site plugin page, e.g. \nhttps://{site-base-url}/wp-admin/plugin-install.php?tab=upload\n, upload the plugin and click on the install now button.\n\n\nActivate\n#\n\n\nActivate the plugin by performing the following steps:\n\n\n\n\nGo to \nhttps://{site-base-url}/wp-admin/plugins.php\n\n\nFind OpenID Connect Single Sign-On (SSO) Plugin By Gluu and click the activate button.\n\n\n\n\nConfiguration\n#\n\n\nGeneral\n#\n\n\nIn your WP admin menu panel you should now see the OpenID Connect menu tab. Click the link to navigate to the General configuration  page:\n\n\n \n\n\n\n\nAutomatically register any user with an account in the OpenID Provider: By setting registration to automatic, any user with an account in the OP will be able to register for an account in your WordPress site. They will be assigned the new user default role specified below.\n\n\nOnly register and allow ongoing access to users with one or more of the following roles in the OP: Using this option you can limit registration to users who have a specified role in the OP, for instance \nwordpress\n. This is not configurable in all OP's. It is configurable if you are using a Gluu Server. \nFollow the instructions below\n to limit access based on an OP role. \n\n\nNew User Default Role: specify which role to give to new users upon registration.  \n\n\nURI of the OpenID Provider: insert the URI of the OpenID Connect Provider.\n\n\nCustom URI after logout: custom URI after logout (for example \"Thank you\" page).\n\n\noxd port: enter the oxd-server port (you can find this in the \noxd-server/conf/oxd-conf.json\n file).\n\n\nClick \nRegister\n to continue.\n\n\n\n\nIf your OpenID Provider supports dynamic registration, no additional steps are required in the general tab and you can navigate to the \nOpenID Connect Configuration\n tab. \n\n\nIf your OpenID Connect Provider doesn't support dynamic registration, you will need to insert your OpenID Provider \nclient_id\n and \nclient_secret\n on the following page.\n\n\n \n\n\nTo generate your \nclient_id\n and \nclient_secret\n use the redirect uri: \nhttps://{site-base-url}/index.php?option=oxdOpenId\n.\n\n\n\n\nNote\n\n\nIf you are using a Gluu server as your OpenID Provider, you can make sure everything is configured properly by logging into to your Gluu Server, navigate to the OpenID Connect > Clients page. Search for your \noxd id\n.\n\n\n\n\nEnrollment and Access Management\n#\n\n\n\n\nNavigate to your Gluu Server admin GUI. \n\n\nClick the \nUsers\n tab in the left hand navigation menu. \n\n\nSelect \nManage People\n. \n\n\nFind the person(s) who should have access. \n\n\nClick their user entry. \n\n\nAdd the \nUser Permission\n attribute to the person and specify the same value as in the plugin. For instance, if in the plugin you have limit enrollment to user(s) with role = \nwordpress\n, then you should also have \nUser Permission\n = \nwordpress\n in the user entry. \nSee a screenshot example\n.\n\n\nUpdate the user record. \n\n\nGo back to the WP plugin and make sure the \npermission\n scope is requested (see below). \n\n\nNow they are ready for enrollment at your WordPress site. \n\n\n\n\nOpenID Connect Configuration\n#\n\n\n\n\nUser Scopes\n#\n\n\nScopes are groups of user attributes that are sent from the OP to the application during login and enrollment. By default, the requested scopes are \nprofile\n, \nemail\n, and \nopenid\n.  \n\n\nTo view your OP's available scopes, open a web browser and navigate to \nhttps://OpenID-Provider/.well-known/openid-configuration\n. For example, here are the scopes you can request if you're using \nGoogle as your OP\n. \n\n\nIf you are using a Gluu server as your OpenID Provider, \nyou can view all available scopes by navigating to the Scopes interface in Gluu CE Server Admin UI \n\n\nOpenID Connect\n > \nScopes\n \n\n\nIn the Plugin interface you can enable, disable and delete scopes. \n\n\nAuthentication\n#\n\n\nBypass the local WordPress login page and send users straight to the OP for authentication: Check this box so that when users attempt to login they are sent straight to the OP, bypassing the local WP login screen. When it is not checked, users will see the following screen when trying to login: \n\n\n \n\n\nSelect ACR: To signal which type of authentication should be used, an OpenID Connect client may request a specific authentication context class reference value (a.k.a. \"acr\"). The authentication options available will depend on which types of mechanisms the OP has been configured to support. The Gluu Server supports the following authentication mechanisms out-of-the-box: username/password (basic), Duo Security, Super Gluu, and U2F tokens, like Yubikey.  \n\n\nNavigate to your OpenID Provider configuration webpage \nhttps://OpenID-Provider/.well-known/openid-configuration\n to see supported \nacr_values\n. \n\n\nIn the \nSelect acr\n section of the plugin page, choose the mechanism which you want for authentication. If the \nSelect acr\n value in the plugin is \nnone\n, users will be sent to pass the OP's default authentication mechanism.",
            "title": "Wordpress"
        },
        {
            "location": "/plugin/wordpress/#openid-connect-single-sign-on-sso-wordpress-plugin-by-gluu",
            "text": "Gluu's OpenID Connect Single Sign-On (SSO) WordPress Plugin will enable you to \nauthenticate users against any standard OpenID Connect Provider (OP). \nIf you don't already have an OP you can use Google or  deploy the free open source Gluu Server .",
            "title": "OpenID Connect Single Sign-On (SSO) WordPress Plugin By Gluu"
        },
        {
            "location": "/plugin/wordpress/#requirements",
            "text": "In order to use the WordPress plugin you will need a standard OP (like Google or a Gluu Server) and the oxd server.    Compatibility : 2.9 <= 4.7.2 versions    Gluu Server Installation Guide .    oxd Webpage",
            "title": "Requirements"
        },
        {
            "location": "/plugin/wordpress/#installation",
            "text": "",
            "title": "Installation"
        },
        {
            "location": "/plugin/wordpress/#download",
            "text": "Github source .  Link to WordPress marketplace",
            "title": "Download"
        },
        {
            "location": "/plugin/wordpress/#upload",
            "text": "Open your WordPress site plugin page, e.g.  https://{site-base-url}/wp-admin/plugin-install.php?tab=upload , upload the plugin and click on the install now button.",
            "title": "Upload"
        },
        {
            "location": "/plugin/wordpress/#activate",
            "text": "Activate the plugin by performing the following steps:   Go to  https://{site-base-url}/wp-admin/plugins.php  Find OpenID Connect Single Sign-On (SSO) Plugin By Gluu and click the activate button.",
            "title": "Activate"
        },
        {
            "location": "/plugin/wordpress/#configuration",
            "text": "",
            "title": "Configuration"
        },
        {
            "location": "/plugin/wordpress/#general",
            "text": "In your WP admin menu panel you should now see the OpenID Connect menu tab. Click the link to navigate to the General configuration  page:      Automatically register any user with an account in the OpenID Provider: By setting registration to automatic, any user with an account in the OP will be able to register for an account in your WordPress site. They will be assigned the new user default role specified below.  Only register and allow ongoing access to users with one or more of the following roles in the OP: Using this option you can limit registration to users who have a specified role in the OP, for instance  wordpress . This is not configurable in all OP's. It is configurable if you are using a Gluu Server.  Follow the instructions below  to limit access based on an OP role.   New User Default Role: specify which role to give to new users upon registration.    URI of the OpenID Provider: insert the URI of the OpenID Connect Provider.  Custom URI after logout: custom URI after logout (for example \"Thank you\" page).  oxd port: enter the oxd-server port (you can find this in the  oxd-server/conf/oxd-conf.json  file).  Click  Register  to continue.   If your OpenID Provider supports dynamic registration, no additional steps are required in the general tab and you can navigate to the  OpenID Connect Configuration  tab.   If your OpenID Connect Provider doesn't support dynamic registration, you will need to insert your OpenID Provider  client_id  and  client_secret  on the following page.     To generate your  client_id  and  client_secret  use the redirect uri:  https://{site-base-url}/index.php?option=oxdOpenId .   Note  If you are using a Gluu server as your OpenID Provider, you can make sure everything is configured properly by logging into to your Gluu Server, navigate to the OpenID Connect > Clients page. Search for your  oxd id .",
            "title": "General"
        },
        {
            "location": "/plugin/wordpress/#enrollment-and-access-management",
            "text": "Navigate to your Gluu Server admin GUI.   Click the  Users  tab in the left hand navigation menu.   Select  Manage People .   Find the person(s) who should have access.   Click their user entry.   Add the  User Permission  attribute to the person and specify the same value as in the plugin. For instance, if in the plugin you have limit enrollment to user(s) with role =  wordpress , then you should also have  User Permission  =  wordpress  in the user entry.  See a screenshot example .  Update the user record.   Go back to the WP plugin and make sure the  permission  scope is requested (see below).   Now they are ready for enrollment at your WordPress site.",
            "title": "Enrollment and Access Management"
        },
        {
            "location": "/plugin/wordpress/#openid-connect-configuration",
            "text": "",
            "title": "OpenID Connect Configuration"
        },
        {
            "location": "/plugin/wordpress/#user-scopes",
            "text": "Scopes are groups of user attributes that are sent from the OP to the application during login and enrollment. By default, the requested scopes are  profile ,  email , and  openid .    To view your OP's available scopes, open a web browser and navigate to  https://OpenID-Provider/.well-known/openid-configuration . For example, here are the scopes you can request if you're using  Google as your OP .   If you are using a Gluu server as your OpenID Provider, \nyou can view all available scopes by navigating to the Scopes interface in Gluu CE Server Admin UI   OpenID Connect  >  Scopes    In the Plugin interface you can enable, disable and delete scopes.",
            "title": "User Scopes"
        },
        {
            "location": "/plugin/wordpress/#authentication",
            "text": "Bypass the local WordPress login page and send users straight to the OP for authentication: Check this box so that when users attempt to login they are sent straight to the OP, bypassing the local WP login screen. When it is not checked, users will see the following screen when trying to login:      Select ACR: To signal which type of authentication should be used, an OpenID Connect client may request a specific authentication context class reference value (a.k.a. \"acr\"). The authentication options available will depend on which types of mechanisms the OP has been configured to support. The Gluu Server supports the following authentication mechanisms out-of-the-box: username/password (basic), Duo Security, Super Gluu, and U2F tokens, like Yubikey.    Navigate to your OpenID Provider configuration webpage  https://OpenID-Provider/.well-known/openid-configuration  to see supported  acr_values .   In the  Select acr  section of the plugin page, choose the mechanism which you want for authentication. If the  Select acr  value in the plugin is  none , users will be sent to pass the OP's default authentication mechanism.",
            "title": "Authentication"
        },
        {
            "location": "/plugin/magento/",
            "text": "OpenID Connect Single Sign-On (SSO) Magento Extension By Gluu\n#\n\n\n\n\nGluu's OpenID Connect Single Sign-On (SSO) Magento Extension will \nenable you to authenticate users against any standard \nOpenID Connect Provider (OP). If you don't already have an OP you can use \nGoogle or \ndeploy the free open source Gluu Server\n.\n\n\nRequirements\n#\n\n\nIn order to use the Magento Extension you will need a \nstandard OP (like Google or a Gluu Server) and the oxd server.\n\n\n\n\n\n\nCompatibility : 1.5 <= 1.9.2 version\n\n\n\n\n\n\nGluu Server Installation Guide\n.\n\n\n\n\n\n\noxd Webpage\n\n\n\n\n\n\nInstallation\n#\n\n\nDisable cache\n#\n\n\n\n\n\n\nOpen menu tab System/Cache Management\n\n\n\n\n\n\n\nCheck select all, set action on disable and click on submit button.\n\n\n\n\n\n\n\nDownload\n#\n\n\nLink to Magento marketplace\n\n\nGithub source\n.\n\n\nInstall extension\n#\n\n\n\n\n\n\nOpen menu tab System/Magento Connect/Magento Connect Manager\n\n\n\n\n\n\n\nChoose downloaded file and click on upload button.\n\n\n\n\n\n\n\nSee Auto-scroll console contents, if extension successfully installed return to admin panel.\n\n\n\n\n\n\nExtension will be automatically activated.\n#\n\n\n\n\nOpen menu tab OpenID Connect/ Open extension page\n\n\n\n\n\nConfiguration\n#\n\n\nGeneral\n#\n\n\nIn your Magento admin menu panel you should now see the OpenID Connect menu tab. Click the link to navigate to the General configuration  page:\n\n\n  \n\n\n\n\nAutomatically register any user with an account in the OpenID Provider: By setting registration to automatic, any user with an account in the OP will be able to register for an account in your Magento site. They will be assigned the new user default role specified below.\n\n\nOnly register and allow ongoing access to users with one or more of the following roles in the OP: Using this option you can limit registration to users who have a specified role in the OP, for instance \nmagento\n. This is not configurable in all OP's. It is configurable if you are using a Gluu Server. \nFollow the instructions below\n to limit access based on an OP role.\n\n\nNew Customer Default Group: specify which group to give to new customer upon registration.\n\n\nURI of the OpenID Provider: insert the URI of the OpenID Connect Provider.\n\n\nCustom URI after logout: custom URI after logout (for example \"Thank you\" page).\n\n\noxd port: enter the oxd-server port (you can find this in the \noxd-server/conf/oxd-conf.json\n file).\n\n\nClick \nRegister\n to continue.\n\n\n\n\nIf your OpenID Provider supports dynamic registration, no additional steps are required in the general tab and you can navigate to the \nOpenID Connect Configuration\n tab.\n\n\nIf your OpenID Connect Provider doesn't support dynamic registration, you will need to insert your OpenID Provider \nclient_id\n and \nclient_secret\n on the following page.\n\n\n \n\n\nTo generate your \nclient_id\n and \nclient_secret\n use the \nRedirect URL\n for customer page: \nhttps://{site-base-url}/index.php/customer/account/login/?option=getOxdSocialLogin\n and \nRedirect URL\n for administrator  page: \nhttps://{site-base-url}/index.php/admin/?option=getOxdAdminLogin\n.\n\n\n\n\nIf you are using a Gluu server as your OpenID Provider, you can make sure everything is configured properly by logging into to your Gluu Server, navigate to the OpenID Connect > Clients page. Search for your \noxd id\n.\n\n\n\n\nEnrollment and Access Management\n#\n\n\n\n\nNavigate to your Gluu Server admin GUI.\n\n\nClick the \nUsers\n tab in the left hand navigation menu.\n\n\nSelect \nManage People\n.\n\n\nFind the person(s) who should have access.\n\n\nClick their user entry.\n\n\nAdd the \nUser Permission\n attribute to the person and specify the same value as in the extension. For instance, if in the extension you have limit enrollment to user(s) with role = \nmagento\n, then you should also have \nUser Permission\n = \nmagento\n in the user entry. \nSee a screenshot example\n.\n\n\nUpdate the user record.\n\n\nGo back to the Magento extension and make sure the \npermission\n scope is requested (see below).\n\n\nNow they are ready for enrollment at your Magento site.\n\n\n\n\nOpenID Connect Configuration\n#\n\n\n \n\n\nUser Scopes\n#\n\n\nScopes are groups of user attributes that are sent from the OP to the application during login and enrollment. By default, the requested scopes are \nprofile\n, \nemail\n, and \nopenid\n.\n\n\nTo view your OP's available scopes, open a web browser and navigate to \nhttps://OpenID-Provider/.well-known/openid-configuration\n. For example, here are the scopes you can request if you're using \nGoogle as your OP\n.\n\n\nIf you are using a Gluu server as your OpenID Provider, \nyou can view all available scopes by navigating to the Scopes interface in Gluu CE Server Admin UI\n\n\nOpenID Connect\n > \nScopes\n\n\nIn the extension interface you can enable, disable and delete scopes.\n\n\nAuthentication\n#\n\n\nBypass the local Magento customer login page and send users straight to the OP for authentication: Check this box so that when users attempt to login they are sent straight to the OP, bypassing the local Magento customer login screen. When it is not checked, users will see the following screen when trying to login:\n\n \n\n\nBypass the local Magento administrator login page and send users straight to the OP for authentication: Check this box so that when users attempt to login they are sent straight to the OP, bypassing the local Magento administrator login screen. When it is not checked, users will see the following screen when trying to login:\n\n \n\n\nSelect ACR: To signal which type of authentication should be used, an OpenID Connect client may request a specific authentication context class reference value (a.k.a. \"acr\"). The authentication options available will depend on which types of mechanisms the OP has been configured to support. The Gluu Server supports the following authentication mechanisms out-of-the-box: username/password (basic), Duo Security, Super Gluu, and U2F tokens, like Yubikey.\n\n\nNavigate to your OpenID Provider configuration webpage \nhttps://OpenID-Provider/.well-known/openid-configuration\n to see supported \nacr_values\n.\n\n\nIn the \nSelect acr\n section of the extension page, choose the mechanism which you want for authentication. If the \nSelect acr\n value in the extension is \nnone\n, users will be sent to pass the OP's default authentication mechanism.",
            "title": "Magento"
        },
        {
            "location": "/plugin/magento/#openid-connect-single-sign-on-sso-magento-extension-by-gluu",
            "text": "Gluu's OpenID Connect Single Sign-On (SSO) Magento Extension will \nenable you to authenticate users against any standard \nOpenID Connect Provider (OP). If you don't already have an OP you can use \nGoogle or  deploy the free open source Gluu Server .",
            "title": "OpenID Connect Single Sign-On (SSO) Magento Extension By Gluu"
        },
        {
            "location": "/plugin/magento/#requirements",
            "text": "In order to use the Magento Extension you will need a \nstandard OP (like Google or a Gluu Server) and the oxd server.    Compatibility : 1.5 <= 1.9.2 version    Gluu Server Installation Guide .    oxd Webpage",
            "title": "Requirements"
        },
        {
            "location": "/plugin/magento/#installation",
            "text": "",
            "title": "Installation"
        },
        {
            "location": "/plugin/magento/#disable-cache",
            "text": "Open menu tab System/Cache Management    Check select all, set action on disable and click on submit button.",
            "title": "Disable cache"
        },
        {
            "location": "/plugin/magento/#download",
            "text": "Link to Magento marketplace  Github source .",
            "title": "Download"
        },
        {
            "location": "/plugin/magento/#install-extension",
            "text": "Open menu tab System/Magento Connect/Magento Connect Manager    Choose downloaded file and click on upload button.    See Auto-scroll console contents, if extension successfully installed return to admin panel.",
            "title": "Install extension"
        },
        {
            "location": "/plugin/magento/#extension-will-be-automatically-activated",
            "text": "Open menu tab OpenID Connect/ Open extension page",
            "title": "Extension will be automatically activated."
        },
        {
            "location": "/plugin/magento/#configuration",
            "text": "",
            "title": "Configuration"
        },
        {
            "location": "/plugin/magento/#general",
            "text": "In your Magento admin menu panel you should now see the OpenID Connect menu tab. Click the link to navigate to the General configuration  page:       Automatically register any user with an account in the OpenID Provider: By setting registration to automatic, any user with an account in the OP will be able to register for an account in your Magento site. They will be assigned the new user default role specified below.  Only register and allow ongoing access to users with one or more of the following roles in the OP: Using this option you can limit registration to users who have a specified role in the OP, for instance  magento . This is not configurable in all OP's. It is configurable if you are using a Gluu Server.  Follow the instructions below  to limit access based on an OP role.  New Customer Default Group: specify which group to give to new customer upon registration.  URI of the OpenID Provider: insert the URI of the OpenID Connect Provider.  Custom URI after logout: custom URI after logout (for example \"Thank you\" page).  oxd port: enter the oxd-server port (you can find this in the  oxd-server/conf/oxd-conf.json  file).  Click  Register  to continue.   If your OpenID Provider supports dynamic registration, no additional steps are required in the general tab and you can navigate to the  OpenID Connect Configuration  tab.  If your OpenID Connect Provider doesn't support dynamic registration, you will need to insert your OpenID Provider  client_id  and  client_secret  on the following page.     To generate your  client_id  and  client_secret  use the  Redirect URL  for customer page:  https://{site-base-url}/index.php/customer/account/login/?option=getOxdSocialLogin  and  Redirect URL  for administrator  page:  https://{site-base-url}/index.php/admin/?option=getOxdAdminLogin .   If you are using a Gluu server as your OpenID Provider, you can make sure everything is configured properly by logging into to your Gluu Server, navigate to the OpenID Connect > Clients page. Search for your  oxd id .",
            "title": "General"
        },
        {
            "location": "/plugin/magento/#enrollment-and-access-management",
            "text": "Navigate to your Gluu Server admin GUI.  Click the  Users  tab in the left hand navigation menu.  Select  Manage People .  Find the person(s) who should have access.  Click their user entry.  Add the  User Permission  attribute to the person and specify the same value as in the extension. For instance, if in the extension you have limit enrollment to user(s) with role =  magento , then you should also have  User Permission  =  magento  in the user entry.  See a screenshot example .  Update the user record.  Go back to the Magento extension and make sure the  permission  scope is requested (see below).  Now they are ready for enrollment at your Magento site.",
            "title": "Enrollment and Access Management"
        },
        {
            "location": "/plugin/magento/#openid-connect-configuration",
            "text": "",
            "title": "OpenID Connect Configuration"
        },
        {
            "location": "/plugin/magento/#user-scopes",
            "text": "Scopes are groups of user attributes that are sent from the OP to the application during login and enrollment. By default, the requested scopes are  profile ,  email , and  openid .  To view your OP's available scopes, open a web browser and navigate to  https://OpenID-Provider/.well-known/openid-configuration . For example, here are the scopes you can request if you're using  Google as your OP .  If you are using a Gluu server as your OpenID Provider, \nyou can view all available scopes by navigating to the Scopes interface in Gluu CE Server Admin UI  OpenID Connect  >  Scopes  In the extension interface you can enable, disable and delete scopes.",
            "title": "User Scopes"
        },
        {
            "location": "/plugin/magento/#authentication",
            "text": "Bypass the local Magento customer login page and send users straight to the OP for authentication: Check this box so that when users attempt to login they are sent straight to the OP, bypassing the local Magento customer login screen. When it is not checked, users will see the following screen when trying to login:    Bypass the local Magento administrator login page and send users straight to the OP for authentication: Check this box so that when users attempt to login they are sent straight to the OP, bypassing the local Magento administrator login screen. When it is not checked, users will see the following screen when trying to login:    Select ACR: To signal which type of authentication should be used, an OpenID Connect client may request a specific authentication context class reference value (a.k.a. \"acr\"). The authentication options available will depend on which types of mechanisms the OP has been configured to support. The Gluu Server supports the following authentication mechanisms out-of-the-box: username/password (basic), Duo Security, Super Gluu, and U2F tokens, like Yubikey.  Navigate to your OpenID Provider configuration webpage  https://OpenID-Provider/.well-known/openid-configuration  to see supported  acr_values .  In the  Select acr  section of the extension page, choose the mechanism which you want for authentication. If the  Select acr  value in the extension is  none , users will be sent to pass the OP's default authentication mechanism.",
            "title": "Authentication"
        },
        {
            "location": "/plugin/drupal/",
            "text": "Drupal OpenID Connect Single Sign-On (SSO) Module By Gluu\n#\n\n\n\n\nGluu's OpenID Connect Single Sign-On (SSO) Drupal module will enable \nyou to authenticate users against any standard OpenID Connect Provider (OP). \nIf you don't already have an OP you can \n\ndeploy the free open source Gluu Server\n.  \n\n\nRequirements\n#\n\n\nIn order to use the Drupal module you will need \nto have a standard OP (like Google or a Gluu Server) and the oxd server.\n\n\n\n\n\n\nCompatibility : 7.x versions\n\n\n\n\n\n\nGluu Server Installation Guide\n.\n\n\n\n\n\n\noxd Server Installation Guide\n\n\n\n\n\n\nInstallation\n#\n\n\nDownload\n#\n\n\nDrupal Module\n\n\n\n\n\n\nOpen menu tab Modules and click on \nInstall new module\n button\n\n \n\n\n\n\n\n\nChoose downloaded module and click on \nINSTALL\n button. \n\n \n\n\n\n\n\n\nActivate module\n#\n\n\n\n\nGo to Modules page\n\n\nFind module OpenID Connect Single Sign-On (SSO) Module By Gluu, choose on enabled checkbox and save configuration.\n\n \n\n\nGo to Configuration page and open module configuration page.\n\n \n\n\n\n\nConfiguration\n#\n\n\nGeneral\n#\n\n\nIn your Drupal admin menu panel you should now see the OpenID Connect menu tab. Click the link to navigate to the General configuration  page:\n\n\n \n\n\n\n\nAutomatically register any user with an account in the OpenID Provider: By setting registration to automatic, any user with an account in the OP will be able to dynamically register for an account in your Drupal site. They will be assigned the new user default role specified below.\n\n\nOnly register and allow ongoing access to users with one or more of the following roles in the OP: Using this option you can limit registration to users who have a specified role in the OP, for instance \ndrupal\n. This is not configurable in all OP's. It is configurable if you are using a Gluu Server. \nFollow the instructions below\n to limit access based on an OP role. \n\n\nNew User Default Role: specify which role to give to new users upon registration.  \n\n\nURI of the OpenID Provider: insert the URI of the OpenID Connect Provider.\n\n\nCustom URI after logout: custom URI after logout (for example \"Thank you\" page).\n\n\noxd port: enter the oxd-server port (you can find this in the \noxd-server/conf/oxd-conf.json\n file).\n\n\nClick \nRegister\n to continue.\n\n\n\n\nIf your OpenID Provider supports dynamic registration, no additional steps are required in the general tab and you can navigate to the \nOpenID Connect Configuration\n tab. \n\n\nIf your OpenID Connect Provider doesn't support dynamic registration, you will need to insert your OpenID Provider \nclient_id\n and \nclient_secret\n on the following page.\n\n\n \nTo generate your \nclient_id\n and \nclient_secret\n use the redirect uri: \nhttps://{site-base-url}/index.php?gluuOption=oxdOpenId\n.\n\n\n\n\nNote\n: If you are using a Gluu server as your OpenID Provider, you can make sure everything is configured properly by logging into to your Gluu Server, navigate to the OpenID Connect > Clients page. Search for your \noxd id\n.\n\n\n\n\nEnrollment and Access Management\n#\n\n\nNavigate to your Gluu Server admin GUI. Click the \nUsers\n tab in the left hand navigation menu. Select \nManage People\n. Find the person(s) who should have access. Click their user entry. Add the \nUser Permission\n attribute to the person and specify the same value as in the module. For instance, if in the module you have limit enrollment to user(s) with role = \ndrupal\n, then you should also have \nUser Permission\n = \ndrupal\n in the user entry. Update the user record, and now they are ready for enrollment at your Drupal site. \n\n\nOpenID Connect Configuration\n#\n\n\n \n\n\nUser Scopes\n#\n\n\nScopes are groups of user attributes that are sent from the OP to the application during login and enrollment. By default, the requested scopes are \nprofile\n, \nemail\n, and \nopenid\n.  \n\n\nTo view your OP's available scopes, in a web browser navigate to \nhttps://OpenID-Provider/.well-known/openid-configuration\n. For example, here are the scopes you can request if you're using \nGoogle as your OP\n. \n\n\nIf you are using a Gluu server as your OpenID Provider, you can view all available scopes by navigating to the OpenID Connect > Scopes interface. \n\n\nIn the module interface you can enable, disable and delete scopes. \n\n\n!!!\nNote\n: \n    If you have chosen to limit enrollment to users with specific roles in the OP, you will also need to request the \nPermission\n scope, as shown in the above screenshot. \n\n\nAuthentication\n#\n\n\nBypass the local Drupal login page and send users straight to the OP for authentication\n#\n\n\nCheck this box so that when users attempt to login they are sent straight to the OP, bypassing the local Drupal login screen.\nWhen it is not checked, it will give proof the following screen.   \n\n\n \n\n\nSelect acr\n#\n\n\nTo signal which type of authentication should be used, an OpenID Connect client may request a specific authentication context class reference value (a.k.a. \"acr\"). The authentication options available will depend on which types of mechanisms the OP has been configured to support. The Gluu Server supports the following authentication mechanisms out-of-the-box: username/password (basic), Duo Security, Super Gluu, and U2F tokens, like Yubikey.  \n\n\nNavigate to your OpenID Provider configuration webpage \nhttps://OpenID-Provider/.well-known/openid-configuration\n to see supported \nacr_values\n. In the \nSelect acr\n section of the module page, choose the mechanism which you want for authentication. \n\n\nNote: If the \nSelect acr\n value is \nnone\n, users will be sent to pass the OP's default authentication mechanism.",
            "title": "Drupal"
        },
        {
            "location": "/plugin/drupal/#drupal-openid-connect-single-sign-on-sso-module-by-gluu",
            "text": "Gluu's OpenID Connect Single Sign-On (SSO) Drupal module will enable \nyou to authenticate users against any standard OpenID Connect Provider (OP). \nIf you don't already have an OP you can  deploy the free open source Gluu Server .",
            "title": "Drupal OpenID Connect Single Sign-On (SSO) Module By Gluu"
        },
        {
            "location": "/plugin/drupal/#requirements",
            "text": "In order to use the Drupal module you will need \nto have a standard OP (like Google or a Gluu Server) and the oxd server.    Compatibility : 7.x versions    Gluu Server Installation Guide .    oxd Server Installation Guide",
            "title": "Requirements"
        },
        {
            "location": "/plugin/drupal/#installation",
            "text": "",
            "title": "Installation"
        },
        {
            "location": "/plugin/drupal/#download",
            "text": "Drupal Module    Open menu tab Modules and click on  Install new module  button      Choose downloaded module and click on  INSTALL  button.",
            "title": "Download"
        },
        {
            "location": "/plugin/drupal/#activate-module",
            "text": "Go to Modules page  Find module OpenID Connect Single Sign-On (SSO) Module By Gluu, choose on enabled checkbox and save configuration.    Go to Configuration page and open module configuration page.",
            "title": "Activate module"
        },
        {
            "location": "/plugin/drupal/#configuration",
            "text": "",
            "title": "Configuration"
        },
        {
            "location": "/plugin/drupal/#general",
            "text": "In your Drupal admin menu panel you should now see the OpenID Connect menu tab. Click the link to navigate to the General configuration  page:      Automatically register any user with an account in the OpenID Provider: By setting registration to automatic, any user with an account in the OP will be able to dynamically register for an account in your Drupal site. They will be assigned the new user default role specified below.  Only register and allow ongoing access to users with one or more of the following roles in the OP: Using this option you can limit registration to users who have a specified role in the OP, for instance  drupal . This is not configurable in all OP's. It is configurable if you are using a Gluu Server.  Follow the instructions below  to limit access based on an OP role.   New User Default Role: specify which role to give to new users upon registration.    URI of the OpenID Provider: insert the URI of the OpenID Connect Provider.  Custom URI after logout: custom URI after logout (for example \"Thank you\" page).  oxd port: enter the oxd-server port (you can find this in the  oxd-server/conf/oxd-conf.json  file).  Click  Register  to continue.   If your OpenID Provider supports dynamic registration, no additional steps are required in the general tab and you can navigate to the  OpenID Connect Configuration  tab.   If your OpenID Connect Provider doesn't support dynamic registration, you will need to insert your OpenID Provider  client_id  and  client_secret  on the following page.   \nTo generate your  client_id  and  client_secret  use the redirect uri:  https://{site-base-url}/index.php?gluuOption=oxdOpenId .   Note : If you are using a Gluu server as your OpenID Provider, you can make sure everything is configured properly by logging into to your Gluu Server, navigate to the OpenID Connect > Clients page. Search for your  oxd id .",
            "title": "General"
        },
        {
            "location": "/plugin/drupal/#enrollment-and-access-management",
            "text": "Navigate to your Gluu Server admin GUI. Click the  Users  tab in the left hand navigation menu. Select  Manage People . Find the person(s) who should have access. Click their user entry. Add the  User Permission  attribute to the person and specify the same value as in the module. For instance, if in the module you have limit enrollment to user(s) with role =  drupal , then you should also have  User Permission  =  drupal  in the user entry. Update the user record, and now they are ready for enrollment at your Drupal site.",
            "title": "Enrollment and Access Management"
        },
        {
            "location": "/plugin/drupal/#openid-connect-configuration",
            "text": "",
            "title": "OpenID Connect Configuration"
        },
        {
            "location": "/plugin/drupal/#user-scopes",
            "text": "Scopes are groups of user attributes that are sent from the OP to the application during login and enrollment. By default, the requested scopes are  profile ,  email , and  openid .    To view your OP's available scopes, in a web browser navigate to  https://OpenID-Provider/.well-known/openid-configuration . For example, here are the scopes you can request if you're using  Google as your OP .   If you are using a Gluu server as your OpenID Provider, you can view all available scopes by navigating to the OpenID Connect > Scopes interface.   In the module interface you can enable, disable and delete scopes.   !!! Note : \n    If you have chosen to limit enrollment to users with specific roles in the OP, you will also need to request the  Permission  scope, as shown in the above screenshot.",
            "title": "User Scopes"
        },
        {
            "location": "/plugin/drupal/#authentication",
            "text": "",
            "title": "Authentication"
        },
        {
            "location": "/plugin/drupal/#bypass-the-local-drupal-login-page-and-send-users-straight-to-the-op-for-authentication",
            "text": "Check this box so that when users attempt to login they are sent straight to the OP, bypassing the local Drupal login screen.\nWhen it is not checked, it will give proof the following screen.",
            "title": "Bypass the local Drupal login page and send users straight to the OP for authentication"
        },
        {
            "location": "/plugin/drupal/#select-acr",
            "text": "To signal which type of authentication should be used, an OpenID Connect client may request a specific authentication context class reference value (a.k.a. \"acr\"). The authentication options available will depend on which types of mechanisms the OP has been configured to support. The Gluu Server supports the following authentication mechanisms out-of-the-box: username/password (basic), Duo Security, Super Gluu, and U2F tokens, like Yubikey.    Navigate to your OpenID Provider configuration webpage  https://OpenID-Provider/.well-known/openid-configuration  to see supported  acr_values . In the  Select acr  section of the module page, choose the mechanism which you want for authentication.   Note: If the  Select acr  value is  none , users will be sent to pass the OP's default authentication mechanism.",
            "title": "Select acr"
        },
        {
            "location": "/plugin/opencart/",
            "text": "OpenCart  OpenID Connect Single Sign-On (SSO) Extension by Gluu\n#\n\n\n\n\nGluu's OpenID Connect Single Sign-On (SSO) OpenCart module will enable you to \nauthenticate users against any standard OpenID Connect Provider (OP). \nIf you don't already have an OP you can \n\ndeploy the free open source Gluu Server\n.  \n\n\nRequirements\n#\n\n\nIn order to use the OpenCart module you will need to have a standard OP (like Google or a Gluu Server) and the oxd server.\n\n\n\n\n\n\nCompatibility : 2.0.0.0 <= 2.3.0.0 versions\n\n\n\n\n\n\nGluu Server Installation Guide\n.\n\n\n\n\n\n\noxd Server Installation Guide\n\n\n\n\n\n\nInstallation\n#\n\n\nDownload\n#\n\n\nLink to OpenCart marketplace\n\n\nGithub source\n.\n\n\nInstall module\n#\n\n\n\n\n\n\nUnzip file in your OpenCart site root directory.\n\n\n\n\n\n\nOpen menu tab Extensions / Modules and find OpenID Connect Single Sign-On (SSO) Extension by Gluu click on \nInstall\n button, than click on \nEdit\n button.\n\n \n\n\n\n\n\n\nConfiguration\n#\n\n\nGeneral\n#\n\n\nIn your OpenCart admin menu panel you should now see the OpenID Connect menu tab. Click the link to navigate to the General configuration  page:\n\n\n \n\n\n\n\nAutomatically register any user with an account in the OpenID Provider: By setting registration to automatic, any user with an account in the OP will be able to dynamically register for an account in your OpenCart site. They will be assigned the new user default role specified below.\n\n\nOnly register and allow ongoing access to users with one or more of the following roles in the OP: Using this option you can limit registration to users who have a specified role in the OP, for instance \nopencart\n. This is not configurable in all OP's. It is configurable if you are using a Gluu Server. \nFollow the instructions below\n to limit access based on an OP role. \n\n\nNew Customer Default Group: specify which group to give to new customer upon registration.  \n\n\nURI of the OpenID Provider: insert the URI of the OpenID Connect Provider.\n\n\nCustom URI after logout: custom URI after logout (for example \"Thank you\" page).\n\n\noxd port: enter the oxd-server port (you can find this in the \noxd-server/conf/oxd-conf.json\n file).\n\n\nClick \nRegister\n to continue.\n\n\n\n\nIf your OpenID Provider supports dynamic registration, no additional steps are \nrequired in the general tab and you can navigate to the \n\nOpenID Connect Configuration\n tab. \n\n\nIf your OpenID Connect Provider doesn't support dynamic registration, you will need to insert your OpenID Provider \nclient_id\n and \nclient_secret\n on the following page.\n\n\n  \n\n\nTo generate your \nclient_id\n and \nclient_secret\n use the redirect uri: \nhttps://{site-base-url}/index.php?option=oxdOpenId\n.\n\n\n\n\nNote\n\n\nIf you are using a Gluu server as your OpenID Provider, you can make sure everything is configured properly by logging into to your Gluu Server, navigate to the OpenID Connect > Clients page. Search for your \noxd id\n.\n\n\n\n\nEnrollment and Access Management\n#\n\n\nNavigate to your Gluu Server admin GUI. Click the \nUsers\n tab in the left hand navigation menu. Select \nManage People\n. Find the person(s) who should have access. Click their user entry. Add the \nUser Permission\n attribute to the person and specify the same value as in the module. For instance, if in the module you have limit enrollment to user(s) with role = \nopencart\n, then you should also have \nUser Permission\n = \nopencart\n in the user entry. Update the user record, and now they are ready for enrollment at your OpenCart site. \n\n\nOpenID Connect Configuration\n#\n\n\n \n\n\nUser Scopes\n#\n\n\nScopes are groups of user attributes that are sent from the OP to the application during login and enrollment. By default, the requested scopes are \nprofile\n, \nemail\n, and \nopenid\n.  \n\n\nTo view your OP's available scopes, in a web browser navigate to \nhttps://OpenID-Provider/.well-known/openid-configuration\n. For example, here are the scopes you can request if you're using \nGoogle as your OP\n. \n\n\nIf you are using a Gluu server as your OpenID Provider, \nyou can view all available scopes by navigating to the Scopes interface in Gluu CE Server Admin UI \n\n\nOpenID Connect\n > \nScopes\n \n\n\nIn the module interface you can enable, disable and delete scopes. \n\n\n\n\nNote\n\n\nIf you have chosen to limit enrollment to users with specific roles in the OP, you will also need to request the \nPermission\n scope, as shown in the above screenshot. \n\n\n\n\nAuthentication\n#\n\n\nBypass the local OpenCart login page and send customers straight to the OP for authentication\n#\n\n\nCheck this box so that when customers attempt to login they are sent straight to the OP, bypassing the local OpenCart login screen.\nWhen it is not checked, it will give proof the following screen.   \n\n\n \n\n\nSelect acr\n#\n\n\nTo signal which type of authentication should be used, an OpenID Connect client may request a specific authentication context class reference value (a.k.a. \"acr\"). The authentication options available will depend on which types of mechanisms the OP has been configured to support. The Gluu Server supports the following authentication mechanisms out-of-the-box: username/password (basic), Duo Security, Super Gluu, and U2F tokens, like Yubikey.  \n\n\nNavigate to your OpenID Provider configuration webpage \nhttps://OpenID-Provider/.well-known/openid-configuration\n to see supported \nacr_values\n. In the \nSelect acr\n section of the module page, choose the mechanism which you want for authentication. \n\n\nNote: If the \nSelect acr\n value is \nnone\n, customers will be sent to pass the OP's default authentication mechanism.",
            "title": "OpenCart"
        },
        {
            "location": "/plugin/opencart/#opencart-openid-connect-single-sign-on-sso-extension-by-gluu",
            "text": "Gluu's OpenID Connect Single Sign-On (SSO) OpenCart module will enable you to \nauthenticate users against any standard OpenID Connect Provider (OP). \nIf you don't already have an OP you can  deploy the free open source Gluu Server .",
            "title": "OpenCart  OpenID Connect Single Sign-On (SSO) Extension by Gluu"
        },
        {
            "location": "/plugin/opencart/#requirements",
            "text": "In order to use the OpenCart module you will need to have a standard OP (like Google or a Gluu Server) and the oxd server.    Compatibility : 2.0.0.0 <= 2.3.0.0 versions    Gluu Server Installation Guide .    oxd Server Installation Guide",
            "title": "Requirements"
        },
        {
            "location": "/plugin/opencart/#installation",
            "text": "",
            "title": "Installation"
        },
        {
            "location": "/plugin/opencart/#download",
            "text": "Link to OpenCart marketplace  Github source .",
            "title": "Download"
        },
        {
            "location": "/plugin/opencart/#install-module",
            "text": "Unzip file in your OpenCart site root directory.    Open menu tab Extensions / Modules and find OpenID Connect Single Sign-On (SSO) Extension by Gluu click on  Install  button, than click on  Edit  button.",
            "title": "Install module"
        },
        {
            "location": "/plugin/opencart/#configuration",
            "text": "",
            "title": "Configuration"
        },
        {
            "location": "/plugin/opencart/#general",
            "text": "In your OpenCart admin menu panel you should now see the OpenID Connect menu tab. Click the link to navigate to the General configuration  page:      Automatically register any user with an account in the OpenID Provider: By setting registration to automatic, any user with an account in the OP will be able to dynamically register for an account in your OpenCart site. They will be assigned the new user default role specified below.  Only register and allow ongoing access to users with one or more of the following roles in the OP: Using this option you can limit registration to users who have a specified role in the OP, for instance  opencart . This is not configurable in all OP's. It is configurable if you are using a Gluu Server.  Follow the instructions below  to limit access based on an OP role.   New Customer Default Group: specify which group to give to new customer upon registration.    URI of the OpenID Provider: insert the URI of the OpenID Connect Provider.  Custom URI after logout: custom URI after logout (for example \"Thank you\" page).  oxd port: enter the oxd-server port (you can find this in the  oxd-server/conf/oxd-conf.json  file).  Click  Register  to continue.   If your OpenID Provider supports dynamic registration, no additional steps are \nrequired in the general tab and you can navigate to the  OpenID Connect Configuration  tab.   If your OpenID Connect Provider doesn't support dynamic registration, you will need to insert your OpenID Provider  client_id  and  client_secret  on the following page.      To generate your  client_id  and  client_secret  use the redirect uri:  https://{site-base-url}/index.php?option=oxdOpenId .   Note  If you are using a Gluu server as your OpenID Provider, you can make sure everything is configured properly by logging into to your Gluu Server, navigate to the OpenID Connect > Clients page. Search for your  oxd id .",
            "title": "General"
        },
        {
            "location": "/plugin/opencart/#enrollment-and-access-management",
            "text": "Navigate to your Gluu Server admin GUI. Click the  Users  tab in the left hand navigation menu. Select  Manage People . Find the person(s) who should have access. Click their user entry. Add the  User Permission  attribute to the person and specify the same value as in the module. For instance, if in the module you have limit enrollment to user(s) with role =  opencart , then you should also have  User Permission  =  opencart  in the user entry. Update the user record, and now they are ready for enrollment at your OpenCart site.",
            "title": "Enrollment and Access Management"
        },
        {
            "location": "/plugin/opencart/#openid-connect-configuration",
            "text": "",
            "title": "OpenID Connect Configuration"
        },
        {
            "location": "/plugin/opencart/#user-scopes",
            "text": "Scopes are groups of user attributes that are sent from the OP to the application during login and enrollment. By default, the requested scopes are  profile ,  email , and  openid .    To view your OP's available scopes, in a web browser navigate to  https://OpenID-Provider/.well-known/openid-configuration . For example, here are the scopes you can request if you're using  Google as your OP .   If you are using a Gluu server as your OpenID Provider, \nyou can view all available scopes by navigating to the Scopes interface in Gluu CE Server Admin UI   OpenID Connect  >  Scopes    In the module interface you can enable, disable and delete scopes.    Note  If you have chosen to limit enrollment to users with specific roles in the OP, you will also need to request the  Permission  scope, as shown in the above screenshot.",
            "title": "User Scopes"
        },
        {
            "location": "/plugin/opencart/#authentication",
            "text": "",
            "title": "Authentication"
        },
        {
            "location": "/plugin/opencart/#bypass-the-local-opencart-login-page-and-send-customers-straight-to-the-op-for-authentication",
            "text": "Check this box so that when customers attempt to login they are sent straight to the OP, bypassing the local OpenCart login screen.\nWhen it is not checked, it will give proof the following screen.",
            "title": "Bypass the local OpenCart login page and send customers straight to the OP for authentication"
        },
        {
            "location": "/plugin/opencart/#select-acr",
            "text": "To signal which type of authentication should be used, an OpenID Connect client may request a specific authentication context class reference value (a.k.a. \"acr\"). The authentication options available will depend on which types of mechanisms the OP has been configured to support. The Gluu Server supports the following authentication mechanisms out-of-the-box: username/password (basic), Duo Security, Super Gluu, and U2F tokens, like Yubikey.    Navigate to your OpenID Provider configuration webpage  https://OpenID-Provider/.well-known/openid-configuration  to see supported  acr_values . In the  Select acr  section of the module page, choose the mechanism which you want for authentication.   Note: If the  Select acr  value is  none , customers will be sent to pass the OP's default authentication mechanism.",
            "title": "Select acr"
        },
        {
            "location": "/plugin/sugarcrm/",
            "text": "SugarCRM OpenID Connect Single Sign-On (SSO) Module By Gluu\n#\n\n\n\n\nGluu's OpenID Connect Single Sign-On (SSO) SugarCRM module will enable you to \nauthenticate users against any standard OpenID Connect Provider (OP). If you don't already have an \nOP you can \ndeploy the free open source Gluu Server\n.  \n\n\nRequirements\n#\n\n\nIn order to use the SugarCRM module you will need to have a standard OP (like Google or a Gluu Server) and the oxd server.\n\n\n\n\n\n\nCompatibility : 6.5 <= 7.6 versions\n\n\n\n\n\n\nGluu Server Installation Guide\n.\n\n\n\n\n\n\noxd Server Installation Guide\n\n\n\n\n\n\nInstallation\n#\n\n\nDownload\n#\n\n\nGithub source\n\n\n\n\n\n\nOpen menu tab Admin and click on \nModule loader\n button\n\n \n\n \n\n\n\n\n\n\nChoose downloaded module and click on \nUpload\n button. \n\n \n\n\n\n\n\n\nClick on \nInstall\n button. \n\n \n\n\n\n\n\n\nOpen menu tab OpenID Connect (SSO) Module by Gluu \n\n \n\n\n\n\n\n\nConfiguration\n#\n\n\nGeneral\n#\n\n\nIn your SugarCRM admin menu panel you should now see the OpenID Connect menu tab. Click the link to navigate to the General configuration  page:\n\n\n \n\n\n\n\nAutomatically register any user with an account in the OpenID Provider: By setting registration to automatic, any user with an account in the OP will be able to dynamically register for an account in your SugarCRM site. They will be assigned the new user default role specified below.\n\n\nOnly register and allow ongoing access to users with one or more of the following roles in the OP: Using this option you can limit registration to users who have a specified role in the OP, for instance \nsugarcrm\n. This is not configurable in all OP's. It is configurable if you are using a Gluu Server. \nFollow the instructions below\n to limit access based on an OP role. \n\n\nNew User Default Role: specify which role to give to new users upon registration.  \n\n\nURI of the OpenID Provider: insert the URI of the OpenID Connect Provider.\n\n\nCustom URI after logout: custom URI after logout (for example \"Thank you\" page).\n\n\noxd port: enter the oxd-server port (you can find this in the \noxd-server/conf/oxd-conf.json\n file).\n\n\nClick \nRegister\n to continue.\n\n\n\n\nIf your OpenID Provider supports dynamic registration, no additional steps are required \nin the general tab and you can navigate to the \nOpenID Connect Configuration\n tab. \n\n\nIf your OpenID Connect Provider doesn't support dynamic registration, you will need to insert your OpenID Provider \nclient_id\n and \nclient_secret\n on the following page.\n\n\n  \n\n\nTo generate your \nclient_id\n and \nclient_secret\n use the redirect uri: \nhttps://{site-base-url}/index.php?option=oxdOpenId\n.\n\n\n\n\nNote\n\n\nIf you are using a Gluu server as your OpenID Provider, you can make sure everything is configured properly by logging into to your Gluu Server, navigate to the OpenID Connect > Clients page. Search for your \noxd id\n.\n\n\n\n\nAttention\n#\n\n\nPlease add the following lines to your config_override.php file.\n\n\n$sugar_config['http_referer']['list'][] = your-openid-provider.uri\n;\n\n$sugar_config['http_referer']['actions'] =array('index', 'ListView', 'DetailView', 'EditView', 'oauth', 'authorize', 'Authenticate', 'Login', 'SupportPortal', 'Wizard', 'index', 'ListView', 'DetailView', 'EditView', 'oauth', 'authorize', 'Authenticate', 'Login', 'SupportPortal', 'SetTimezone' );\n\n\nEnrollment and Access Management\n#\n\n\nNavigate to your Gluu Server admin GUI. Click the \nUsers\n tab in the left hand navigation menu. Select \nManage People\n. Find the person(s) who should have access. Click their user entry. Add the \nUser Permission\n attribute to the person and specify the same value as in the module. For instance, if in the module you have limit enrollment to user(s) with role = \nsugarcrm\n, then you should also have \nUser Permission\n = \nsugarecrm\n in the user entry. Update the user record, and now they are ready for enrollment at your SugarCRM site. \n\n\nOpenID Connect Configuration\n#\n\n\n \n\n\nUser Scopes\n#\n\n\nScopes are groups of user attributes that are sent from the OP to the application during login and enrollment. By default, the requested scopes are \nprofile\n, \nemail\n, and \nopenid\n.  \n\n\nTo view your OP's available scopes, in a web browser navigate to \nhttps://OpenID-Provider/.well-known/openid-configuration\n. For example, here are the scopes you can request if you're using \nGoogle as your OP\n. \n\n\nIf you are using a Gluu server as your OpenID Provider, you can view all available \nscopes by navigating to the Scopes interface in Gluu CE Server Admin UI \n\n\nOpenID Connect\n > \nScopes\n \n\n\nIn the module interface you can enable, disable and delete scopes. \n\n\n\n\nNote\n\n\nIf you have chosen to limit enrollment to users with specific roles in the OP, you will also need to request the \nPermission\n scope, as shown in the above screenshot. \n\n\n\n\nAuthentication\n#\n\n\nBypass the local SugarCRM login page and send users straight to the OP for authentication\n#\n\n\nCheck this box so that when users attempt to login they are sent straight to the OP, bypassing the local SugarCRM login screen.\nWhen it is not checked, it will give proof the following screen.   \n\n\n \n\n\nSelect acr\n#\n\n\nTo signal which type of authentication should be used, an OpenID Connect client may request a specific authentication context class reference value (a.k.a. \"acr\"). The authentication options available will depend on which types of mechanisms the OP has been configured to support. The Gluu Server supports the following authentication mechanisms out-of-the-box: username/password (basic), Duo Security, Super Gluu, and U2F tokens, like Yubikey.  \n\n\nNavigate to your OpenID Provider configuration webpage \nhttps://OpenID-Provider/.well-known/openid-configuration\n to see supported \nacr_values\n. In the \nSelect acr\n section of the module page, choose the mechanism which you want for authentication. \n\n\n\n\nNote\n\n\nIf the \nSelect acr\n value is \nnone\n, users will be sent to pass the OP's default authentication mechanism.",
            "title": "SugarCRM"
        },
        {
            "location": "/plugin/sugarcrm/#sugarcrm-openid-connect-single-sign-on-sso-module-by-gluu",
            "text": "Gluu's OpenID Connect Single Sign-On (SSO) SugarCRM module will enable you to \nauthenticate users against any standard OpenID Connect Provider (OP). If you don't already have an \nOP you can  deploy the free open source Gluu Server .",
            "title": "SugarCRM OpenID Connect Single Sign-On (SSO) Module By Gluu"
        },
        {
            "location": "/plugin/sugarcrm/#requirements",
            "text": "In order to use the SugarCRM module you will need to have a standard OP (like Google or a Gluu Server) and the oxd server.    Compatibility : 6.5 <= 7.6 versions    Gluu Server Installation Guide .    oxd Server Installation Guide",
            "title": "Requirements"
        },
        {
            "location": "/plugin/sugarcrm/#installation",
            "text": "",
            "title": "Installation"
        },
        {
            "location": "/plugin/sugarcrm/#download",
            "text": "Github source    Open menu tab Admin and click on  Module loader  button        Choose downloaded module and click on  Upload  button.       Click on  Install  button.       Open menu tab OpenID Connect (SSO) Module by Gluu",
            "title": "Download"
        },
        {
            "location": "/plugin/sugarcrm/#configuration",
            "text": "",
            "title": "Configuration"
        },
        {
            "location": "/plugin/sugarcrm/#general",
            "text": "In your SugarCRM admin menu panel you should now see the OpenID Connect menu tab. Click the link to navigate to the General configuration  page:      Automatically register any user with an account in the OpenID Provider: By setting registration to automatic, any user with an account in the OP will be able to dynamically register for an account in your SugarCRM site. They will be assigned the new user default role specified below.  Only register and allow ongoing access to users with one or more of the following roles in the OP: Using this option you can limit registration to users who have a specified role in the OP, for instance  sugarcrm . This is not configurable in all OP's. It is configurable if you are using a Gluu Server.  Follow the instructions below  to limit access based on an OP role.   New User Default Role: specify which role to give to new users upon registration.    URI of the OpenID Provider: insert the URI of the OpenID Connect Provider.  Custom URI after logout: custom URI after logout (for example \"Thank you\" page).  oxd port: enter the oxd-server port (you can find this in the  oxd-server/conf/oxd-conf.json  file).  Click  Register  to continue.   If your OpenID Provider supports dynamic registration, no additional steps are required \nin the general tab and you can navigate to the  OpenID Connect Configuration  tab.   If your OpenID Connect Provider doesn't support dynamic registration, you will need to insert your OpenID Provider  client_id  and  client_secret  on the following page.      To generate your  client_id  and  client_secret  use the redirect uri:  https://{site-base-url}/index.php?option=oxdOpenId .   Note  If you are using a Gluu server as your OpenID Provider, you can make sure everything is configured properly by logging into to your Gluu Server, navigate to the OpenID Connect > Clients page. Search for your  oxd id .",
            "title": "General"
        },
        {
            "location": "/plugin/sugarcrm/#attention",
            "text": "Please add the following lines to your config_override.php file.  $sugar_config['http_referer']['list'][] = your-openid-provider.uri ; $sugar_config['http_referer']['actions'] =array('index', 'ListView', 'DetailView', 'EditView', 'oauth', 'authorize', 'Authenticate', 'Login', 'SupportPortal', 'Wizard', 'index', 'ListView', 'DetailView', 'EditView', 'oauth', 'authorize', 'Authenticate', 'Login', 'SupportPortal', 'SetTimezone' );",
            "title": "Attention"
        },
        {
            "location": "/plugin/sugarcrm/#enrollment-and-access-management",
            "text": "Navigate to your Gluu Server admin GUI. Click the  Users  tab in the left hand navigation menu. Select  Manage People . Find the person(s) who should have access. Click their user entry. Add the  User Permission  attribute to the person and specify the same value as in the module. For instance, if in the module you have limit enrollment to user(s) with role =  sugarcrm , then you should also have  User Permission  =  sugarecrm  in the user entry. Update the user record, and now they are ready for enrollment at your SugarCRM site.",
            "title": "Enrollment and Access Management"
        },
        {
            "location": "/plugin/sugarcrm/#openid-connect-configuration",
            "text": "",
            "title": "OpenID Connect Configuration"
        },
        {
            "location": "/plugin/sugarcrm/#user-scopes",
            "text": "Scopes are groups of user attributes that are sent from the OP to the application during login and enrollment. By default, the requested scopes are  profile ,  email , and  openid .    To view your OP's available scopes, in a web browser navigate to  https://OpenID-Provider/.well-known/openid-configuration . For example, here are the scopes you can request if you're using  Google as your OP .   If you are using a Gluu server as your OpenID Provider, you can view all available \nscopes by navigating to the Scopes interface in Gluu CE Server Admin UI   OpenID Connect  >  Scopes    In the module interface you can enable, disable and delete scopes.    Note  If you have chosen to limit enrollment to users with specific roles in the OP, you will also need to request the  Permission  scope, as shown in the above screenshot.",
            "title": "User Scopes"
        },
        {
            "location": "/plugin/sugarcrm/#authentication",
            "text": "",
            "title": "Authentication"
        },
        {
            "location": "/plugin/sugarcrm/#bypass-the-local-sugarcrm-login-page-and-send-users-straight-to-the-op-for-authentication",
            "text": "Check this box so that when users attempt to login they are sent straight to the OP, bypassing the local SugarCRM login screen.\nWhen it is not checked, it will give proof the following screen.",
            "title": "Bypass the local SugarCRM login page and send users straight to the OP for authentication"
        },
        {
            "location": "/plugin/sugarcrm/#select-acr",
            "text": "To signal which type of authentication should be used, an OpenID Connect client may request a specific authentication context class reference value (a.k.a. \"acr\"). The authentication options available will depend on which types of mechanisms the OP has been configured to support. The Gluu Server supports the following authentication mechanisms out-of-the-box: username/password (basic), Duo Security, Super Gluu, and U2F tokens, like Yubikey.    Navigate to your OpenID Provider configuration webpage  https://OpenID-Provider/.well-known/openid-configuration  to see supported  acr_values . In the  Select acr  section of the module page, choose the mechanism which you want for authentication.    Note  If the  Select acr  value is  none , users will be sent to pass the OP's default authentication mechanism.",
            "title": "Select acr"
        },
        {
            "location": "/plugin/suitecrm/",
            "text": "SuiteCRM OpenID Connect Single Sign-On (SSO) Module By Gluu\n#\n\n\n\n\nGluu's OpenID Connect Single Sign-On (SSO) SuiteCRM module will enable you to authenticate users against any standard OpenID Connect Provider (OP). \nIf you don't already have an OP you can \ndeploy the free open source Gluu Server\n.  \n\n\nRequirements\n#\n\n\nIn order to use the SuiteCRM module you will need to have a standard OP (like Google or a Gluu Server) and the oxd server.\n\n\n\n\n\n\nCompatibility : 6.5 <= 7.6 versions\n\n\n\n\n\n\nGluu Server Installation Guide\n.\n\n\n\n\n\n\noxd Server Installation Guide\n\n\n\n\n\n\nInstallation\n#\n\n\nDownload\n#\n\n\nGithub source\n\n\n\n\n\n\nOpen menu tab Admin and click on \nModule loader\n button\n\n \n\n \n\n\n\n\n\n\nChoose downloaded module and click on \nUpload\n button. \n\n \n\n\n\n\n\n\nClick on \nInstall\n button. \n\n \n\n\n\n\n\n\nOpen menu tab OpenID Connect (SSO) Module by Gluu \n\n \n\n\n\n\n\n\nConfiguration\n#\n\n\nGeneral\n#\n\n\nIn your SuiteCRM admin menu panel you should now see the OpenID Connect menu tab. Click the link to navigate to the General configuration  page:\n\n\n \n\n\n\n\nAutomatically register any user with an account in the OpenID Provider: By setting registration to automatic, any user with an account in the OP will be able to dynamically register for an account in your SuiteCRM site. They will be assigned the new user default role specified below.\n\n\nOnly register and allow ongoing access to users with one or more of the following roles in the OP: Using this option you can limit registration to users who have a specified role in the OP, for instance \nsuitecrm\n. This is not configurable in all OP's. It is configurable if you are using a Gluu Server. \nFollow the instructions below\n to limit access based on an OP role. \n\n\nNew User Default Role: specify which role to give to new users upon registration.  \n\n\nURI of the OpenID Provider: insert the URI of the OpenID Connect Provider.\n\n\nCustom URI after logout: custom URI after logout (for example \"Thank you\" page).\n\n\noxd port: enter the oxd-server port (you can find this in the \noxd-server/conf/oxd-conf.json\n file).\n\n\nClick \nRegister\n to continue.\n\n\n\n\nIf your OpenID Provider supports dynamic registration, no additional steps are required in the \ngeneral tab and you can navigate to the \nOpenID Connect Configuration\n tab. \n\n\nIf your OpenID Connect Provider doesn't support dynamic registration, you will need to insert your OpenID Provider \nclient_id\n and \nclient_secret\n on the following page.\n\n\n  \n\n\nTo generate your \nclient_id\n and \nclient_secret\n use the redirect uri: \nhttps://{site-base-url}/index.php?option=oxdOpenId\n.\n\n\n\n\nNote\n\n\nIf you are using a Gluu server as your OpenID Provider, you can make sure everything is configured properly by logging into to your Gluu Server, navigate to the OpenID Connect > Clients page. Search for your \noxd id\n.\n\n\n\n\nAttention\n#\n\n\nPlease add the following lines to your config_override.php file.\n\n\n$sugar_config['http_referer']['list'][] = your-openid-provider.uri\n;\n\n$sugar_config['http_referer']['actions'] =array('index', 'ListView', 'DetailView', 'EditView', 'oauth', 'authorize', 'Authenticate', 'Login', 'SupportPortal', 'Wizard', 'index', 'ListView', 'DetailView', 'EditView', 'oauth', 'authorize', 'Authenticate', 'Login', 'SupportPortal', 'SetTimezone' );\n\n\nEnrollment and Access Management\n#\n\n\nNavigate to your Gluu Server admin GUI. Click the \nUsers\n tab in the left hand navigation menu. Select \nManage People\n. Find the person(s) who should have access. Click their user entry. Add the \nUser Permission\n attribute to the person and specify the same value as in the module. For instance, if in the module you have limit enrollment to user(s) with role = \nsuitecrm\n, then you should also have \nUser Permission\n = \nsuitecrm\n in the user entry. Update the user record, and now they are ready for enrollment at your SuiteCRM site. \n\n\nOpenID Connect Configuration\n#\n\n\n \n\n\nUser Scopes\n#\n\n\nScopes are groups of user attributes that are sent from the OP to the application during login and enrollment. By default, the requested scopes are \nprofile\n, \nemail\n, and \nopenid\n.  \n\n\nTo view your OP's available scopes, in a web browser navigate to \nhttps://OpenID-Provider/.well-known/openid-configuration\n. For example, here are the scopes you can request if you're using \nGoogle as your OP\n. \n\n\nIf you are using a Gluu server as your OpenID Provider, \nyou can view all available scopes by navigating to the Scopes interface in Gluu CE Server Admin UI \n\n\nOpenID Connect\n > \nScopes\n \n\n\nIn the module interface you can enable, disable and delete scopes. \n\n\n\n\nNote\n\n\nIf you have chosen to limit enrollment to users with specific roles in the OP, you will also need to request the \nPermission\n scope, as shown in the above screenshot. \n\n\n\n\nAuthentication\n#\n\n\nBypass the local SuiteCRM login page and send users straight to the OP for authentication\n#\n\n\nCheck this box so that when users attempt to login they are sent straight to the OP, bypassing the local SuiteCRM login screen.\nWhen it is not checked, it will give proof the following screen.   \n\n\n \n\n\nSelect acr\n#\n\n\nTo signal which type of authentication should be used, an OpenID Connect client may request a specific authentication context class reference value (a.k.a. \"acr\"). The authentication options available will depend on which types of mechanisms the OP has been configured to support. The Gluu Server supports the following authentication mechanisms out-of-the-box: username/password (basic), Duo Security, Super Gluu, and U2F tokens, like Yubikey.  \n\n\nNavigate to your OpenID Provider configuration webpage \nhttps://OpenID-Provider/.well-known/openid-configuration\n to see supported \nacr_values\n. In the \nSelect acr\n section of the module page, choose the mechanism which you want for authentication. \n\n\n\n\nNote\n\n\nIf the \nSelect acr\n value is \nnone\n, users will be sent to pass the OP's default authentication mechanism.",
            "title": "SuiteCRM"
        },
        {
            "location": "/plugin/suitecrm/#suitecrm-openid-connect-single-sign-on-sso-module-by-gluu",
            "text": "Gluu's OpenID Connect Single Sign-On (SSO) SuiteCRM module will enable you to authenticate users against any standard OpenID Connect Provider (OP). \nIf you don't already have an OP you can  deploy the free open source Gluu Server .",
            "title": "SuiteCRM OpenID Connect Single Sign-On (SSO) Module By Gluu"
        },
        {
            "location": "/plugin/suitecrm/#requirements",
            "text": "In order to use the SuiteCRM module you will need to have a standard OP (like Google or a Gluu Server) and the oxd server.    Compatibility : 6.5 <= 7.6 versions    Gluu Server Installation Guide .    oxd Server Installation Guide",
            "title": "Requirements"
        },
        {
            "location": "/plugin/suitecrm/#installation",
            "text": "",
            "title": "Installation"
        },
        {
            "location": "/plugin/suitecrm/#download",
            "text": "Github source    Open menu tab Admin and click on  Module loader  button        Choose downloaded module and click on  Upload  button.       Click on  Install  button.       Open menu tab OpenID Connect (SSO) Module by Gluu",
            "title": "Download"
        },
        {
            "location": "/plugin/suitecrm/#configuration",
            "text": "",
            "title": "Configuration"
        },
        {
            "location": "/plugin/suitecrm/#general",
            "text": "In your SuiteCRM admin menu panel you should now see the OpenID Connect menu tab. Click the link to navigate to the General configuration  page:      Automatically register any user with an account in the OpenID Provider: By setting registration to automatic, any user with an account in the OP will be able to dynamically register for an account in your SuiteCRM site. They will be assigned the new user default role specified below.  Only register and allow ongoing access to users with one or more of the following roles in the OP: Using this option you can limit registration to users who have a specified role in the OP, for instance  suitecrm . This is not configurable in all OP's. It is configurable if you are using a Gluu Server.  Follow the instructions below  to limit access based on an OP role.   New User Default Role: specify which role to give to new users upon registration.    URI of the OpenID Provider: insert the URI of the OpenID Connect Provider.  Custom URI after logout: custom URI after logout (for example \"Thank you\" page).  oxd port: enter the oxd-server port (you can find this in the  oxd-server/conf/oxd-conf.json  file).  Click  Register  to continue.   If your OpenID Provider supports dynamic registration, no additional steps are required in the \ngeneral tab and you can navigate to the  OpenID Connect Configuration  tab.   If your OpenID Connect Provider doesn't support dynamic registration, you will need to insert your OpenID Provider  client_id  and  client_secret  on the following page.      To generate your  client_id  and  client_secret  use the redirect uri:  https://{site-base-url}/index.php?option=oxdOpenId .   Note  If you are using a Gluu server as your OpenID Provider, you can make sure everything is configured properly by logging into to your Gluu Server, navigate to the OpenID Connect > Clients page. Search for your  oxd id .",
            "title": "General"
        },
        {
            "location": "/plugin/suitecrm/#attention",
            "text": "Please add the following lines to your config_override.php file.  $sugar_config['http_referer']['list'][] = your-openid-provider.uri ; $sugar_config['http_referer']['actions'] =array('index', 'ListView', 'DetailView', 'EditView', 'oauth', 'authorize', 'Authenticate', 'Login', 'SupportPortal', 'Wizard', 'index', 'ListView', 'DetailView', 'EditView', 'oauth', 'authorize', 'Authenticate', 'Login', 'SupportPortal', 'SetTimezone' );",
            "title": "Attention"
        },
        {
            "location": "/plugin/suitecrm/#enrollment-and-access-management",
            "text": "Navigate to your Gluu Server admin GUI. Click the  Users  tab in the left hand navigation menu. Select  Manage People . Find the person(s) who should have access. Click their user entry. Add the  User Permission  attribute to the person and specify the same value as in the module. For instance, if in the module you have limit enrollment to user(s) with role =  suitecrm , then you should also have  User Permission  =  suitecrm  in the user entry. Update the user record, and now they are ready for enrollment at your SuiteCRM site.",
            "title": "Enrollment and Access Management"
        },
        {
            "location": "/plugin/suitecrm/#openid-connect-configuration",
            "text": "",
            "title": "OpenID Connect Configuration"
        },
        {
            "location": "/plugin/suitecrm/#user-scopes",
            "text": "Scopes are groups of user attributes that are sent from the OP to the application during login and enrollment. By default, the requested scopes are  profile ,  email , and  openid .    To view your OP's available scopes, in a web browser navigate to  https://OpenID-Provider/.well-known/openid-configuration . For example, here are the scopes you can request if you're using  Google as your OP .   If you are using a Gluu server as your OpenID Provider, \nyou can view all available scopes by navigating to the Scopes interface in Gluu CE Server Admin UI   OpenID Connect  >  Scopes    In the module interface you can enable, disable and delete scopes.    Note  If you have chosen to limit enrollment to users with specific roles in the OP, you will also need to request the  Permission  scope, as shown in the above screenshot.",
            "title": "User Scopes"
        },
        {
            "location": "/plugin/suitecrm/#authentication",
            "text": "",
            "title": "Authentication"
        },
        {
            "location": "/plugin/suitecrm/#bypass-the-local-suitecrm-login-page-and-send-users-straight-to-the-op-for-authentication",
            "text": "Check this box so that when users attempt to login they are sent straight to the OP, bypassing the local SuiteCRM login screen.\nWhen it is not checked, it will give proof the following screen.",
            "title": "Bypass the local SuiteCRM login page and send users straight to the OP for authentication"
        },
        {
            "location": "/plugin/suitecrm/#select-acr",
            "text": "To signal which type of authentication should be used, an OpenID Connect client may request a specific authentication context class reference value (a.k.a. \"acr\"). The authentication options available will depend on which types of mechanisms the OP has been configured to support. The Gluu Server supports the following authentication mechanisms out-of-the-box: username/password (basic), Duo Security, Super Gluu, and U2F tokens, like Yubikey.    Navigate to your OpenID Provider configuration webpage  https://OpenID-Provider/.well-known/openid-configuration  to see supported  acr_values . In the  Select acr  section of the module page, choose the mechanism which you want for authentication.    Note  If the  Select acr  value is  none , users will be sent to pass the OP's default authentication mechanism.",
            "title": "Select acr"
        },
        {
            "location": "/plugin/roundcube/",
            "text": "RoundCube OpenID Connect Single Sign-On (SSO) Plugin By Gluu\n#\n\n\n\n\nGluu's OpenID Connect Single Sign-On (SSO) Roundcube plugin will enable you to \nauthenticate users against any standard OpenID Connect Provider (OP). If you don't already have an OP you can \n\ndeploy the free open source Gluu Server\n.  \n\n\nRequirements\n#\n\n\nIn order to use the RoundCube plugin you will need to have a standard OP (like Google or a Gluu Server) and the oxd server.\n\n\n\n\n\n\nCompatibility : 0.6.0 <= 10.21 versions\n\n\n\n\n\n\nGluu Server Installation Guide\n.\n\n\n\n\n\n\noxd Server Installation Guide\n\n\n\n\n\n\nInstallation\n#\n\n\nDownload\n#\n\n\nGithub source\n.\n\n\nLink to RoundCube repository\n\n\nTo install RoundCube OpenID Connect Single Sign On (SSO) Plugin By Gluu via Composer, execute the following command \n\n\n$ composer install `composer require \"gluufederation/roundcube_oxd_plugin\": \"2.4.4\"`\n\n\n\n\n\nConfiguration\n#\n\n\nGeneral\n#\n\n\nIn your RoundCube admin menu panel you should now see the OpenID Connect menu tab. Click the link to navigate to the General configuration  page:\n\n\n \n\n\n\n\nAutomatically login any user with an account in the OpenID Provider: By setting login to automatic, any user with an account in the OP will be able to dynamically login for an account in your Roundcube site. \n\n\nOnly register and allow ongoing access to users with one or more of the following roles in the OP: Using this option you can limit login to users who have a specified role in the OP, for instance \nroundcube\n. This is not configurable in all OP's. It is configurable if you are using a Gluu Server. \nFollow the instructions below\n to limit access based on an OP role. \n\n\nURI of the OpenID Provider: insert the URI of the OpenID Connect Provider.\n\n\nCustom URI after logout: custom URI after logout (for example \"Thank you\" page).\n\n\noxd port: enter the oxd-server port (you can find this in the \noxd-server/conf/oxd-conf.json\n file).\n\n\nClick \nRegister\n to continue.\n\n\n\n\nIf your OpenID Provider supports dynamic registration, no additional steps are required in the general tab and you can navigate to the \nOpenID Connect Configuration\n tab. \n\n\nIf your OpenID Connect Provider doesn't support dynamic registration, you will need to insert your OpenID Provider \nclient_id\n and \nclient_secret\n on the following page.\n\n\n  \n\n\nTo generate your \nclient_id\n and \nclient_secret\n use the redirect uri: \nhttps://{site-base-url}/index.php?option=oxdOpenId\n.\n\n\n\n\nNote\n\n\nIf you are using a Gluu server as your OpenID Provider, you can make sure everything is configured properly by logging into to your Gluu Server, navigate to the OpenID Connect > Clients page. Search for your \noxd id\n.\n\n\n\n\nEnrollment and Access Management\n#\n\n\nNavigate to your Gluu Server admin GUI. Click the \nUsers\n tab in the left hand navigation menu. Select \nManage People\n. Find the person(s) who should have access. Click their user entry. Add the \nUser Permission\n attribute to the person and specify the same value as in the plugin. For instance, if in the plugin you have limit enrollment to user(s) with role = \nroundcube\n, then you should also have \nUser Permission\n = \nroundcube\n in the user entry. Update the user record, and now they are ready for enrollment at your Roundcube site. \n\n\nOpenID Connect Configuration\n#\n\n\n \n\n\nUser Scopes\n#\n\n\nScopes are groups of user attributes that are sent from the OP to the application during login and enrollment. By default, the requested scopes are \nprofile\n, \nimapData\n, \nemail\n, and \nopenid\n.  \n\n\nTo view your OP's available scopes, in a web browser navigate to \nhttps://OpenID-Provider/.well-known/openid-configuration\n.  \n\n\nIf you are using a Gluu server as your OpenID Provider, \nyou can view all available scopes by navigating to the Scopes interface in Gluu CE Server Admin UI\n\n\nOpenID Connect\n > \nScopes\n  \n\n\nIn the plugin interface you can enable, disable and delete scopes. \n\n\n\n\nNote\n\n\nIf you have chosen to limit enrollment to users with specific roles in the OP, you will also need to request the \nPermission\n scope, as shown in the above screenshot. \n\n\n\n\nAttention\n#\n\n\nFor doing login to your RoundCube site, it is very important that your OP supports \nimapData\n scope, which contains your imap connection climes (\nimapHost\n,\nimapPort\n,\nimapUsername\n,\nimapPassword\n).\nThis is not configurable in all OP's. It is configurable if you are using a Gluu Server.\nFor example : \nimapHost\n = \nssl://imap.gmail.com\n ; \nimapPort\n = \n993\n ; \nimapUsername\n = \nusername@gmail.com\n ; \nimapPassword\n = \npassword\n ; \n\n\nAuthentication\n#\n\n\nBypass the local RoundCube login page and send users straight to the OP for authentication\n#\n\n\nCheck this box so that when users attempt to login they are sent straight to the OP, bypassing the local RoundCube login screen.\nWhen it is not checked, it will give proof the following screen.   \n\n\n \n\n\nSelect acr\n#\n\n\nTo signal which type of authentication should be used, an OpenID Connect client may request a specific authentication context class reference value (a.k.a. \"acr\"). The authentication options available will depend on which types of mechanisms the OP has been configured to support. The Gluu Server supports the following authentication mechanisms out-of-the-box: username/password (basic), Duo Security, Super Gluu, and U2F tokens, like Yubikey.  \n\n\nNavigate to your OpenID Provider configuration webpage \nhttps://OpenID-Provider/.well-known/openid-configuration\n to see supported \nacr_values\n. In the \nSelect acr\n section of the plugin page, choose the mechanism which you want for authentication. \n\n\nNote: If the \nSelect acr\n value is \nnone\n, users will be sent to pass the OP's default authentication mechanism.",
            "title": "RoundCube"
        },
        {
            "location": "/plugin/roundcube/#roundcube-openid-connect-single-sign-on-sso-plugin-by-gluu",
            "text": "Gluu's OpenID Connect Single Sign-On (SSO) Roundcube plugin will enable you to \nauthenticate users against any standard OpenID Connect Provider (OP). If you don't already have an OP you can  deploy the free open source Gluu Server .",
            "title": "RoundCube OpenID Connect Single Sign-On (SSO) Plugin By Gluu"
        },
        {
            "location": "/plugin/roundcube/#requirements",
            "text": "In order to use the RoundCube plugin you will need to have a standard OP (like Google or a Gluu Server) and the oxd server.    Compatibility : 0.6.0 <= 10.21 versions    Gluu Server Installation Guide .    oxd Server Installation Guide",
            "title": "Requirements"
        },
        {
            "location": "/plugin/roundcube/#installation",
            "text": "",
            "title": "Installation"
        },
        {
            "location": "/plugin/roundcube/#download",
            "text": "Github source .  Link to RoundCube repository  To install RoundCube OpenID Connect Single Sign On (SSO) Plugin By Gluu via Composer, execute the following command   $ composer install `composer require \"gluufederation/roundcube_oxd_plugin\": \"2.4.4\"`",
            "title": "Download"
        },
        {
            "location": "/plugin/roundcube/#configuration",
            "text": "",
            "title": "Configuration"
        },
        {
            "location": "/plugin/roundcube/#general",
            "text": "In your RoundCube admin menu panel you should now see the OpenID Connect menu tab. Click the link to navigate to the General configuration  page:      Automatically login any user with an account in the OpenID Provider: By setting login to automatic, any user with an account in the OP will be able to dynamically login for an account in your Roundcube site.   Only register and allow ongoing access to users with one or more of the following roles in the OP: Using this option you can limit login to users who have a specified role in the OP, for instance  roundcube . This is not configurable in all OP's. It is configurable if you are using a Gluu Server.  Follow the instructions below  to limit access based on an OP role.   URI of the OpenID Provider: insert the URI of the OpenID Connect Provider.  Custom URI after logout: custom URI after logout (for example \"Thank you\" page).  oxd port: enter the oxd-server port (you can find this in the  oxd-server/conf/oxd-conf.json  file).  Click  Register  to continue.   If your OpenID Provider supports dynamic registration, no additional steps are required in the general tab and you can navigate to the  OpenID Connect Configuration  tab.   If your OpenID Connect Provider doesn't support dynamic registration, you will need to insert your OpenID Provider  client_id  and  client_secret  on the following page.      To generate your  client_id  and  client_secret  use the redirect uri:  https://{site-base-url}/index.php?option=oxdOpenId .   Note  If you are using a Gluu server as your OpenID Provider, you can make sure everything is configured properly by logging into to your Gluu Server, navigate to the OpenID Connect > Clients page. Search for your  oxd id .",
            "title": "General"
        },
        {
            "location": "/plugin/roundcube/#enrollment-and-access-management",
            "text": "Navigate to your Gluu Server admin GUI. Click the  Users  tab in the left hand navigation menu. Select  Manage People . Find the person(s) who should have access. Click their user entry. Add the  User Permission  attribute to the person and specify the same value as in the plugin. For instance, if in the plugin you have limit enrollment to user(s) with role =  roundcube , then you should also have  User Permission  =  roundcube  in the user entry. Update the user record, and now they are ready for enrollment at your Roundcube site.",
            "title": "Enrollment and Access Management"
        },
        {
            "location": "/plugin/roundcube/#openid-connect-configuration",
            "text": "",
            "title": "OpenID Connect Configuration"
        },
        {
            "location": "/plugin/roundcube/#user-scopes",
            "text": "Scopes are groups of user attributes that are sent from the OP to the application during login and enrollment. By default, the requested scopes are  profile ,  imapData ,  email , and  openid .    To view your OP's available scopes, in a web browser navigate to  https://OpenID-Provider/.well-known/openid-configuration .    If you are using a Gluu server as your OpenID Provider, \nyou can view all available scopes by navigating to the Scopes interface in Gluu CE Server Admin UI  OpenID Connect  >  Scopes     In the plugin interface you can enable, disable and delete scopes.    Note  If you have chosen to limit enrollment to users with specific roles in the OP, you will also need to request the  Permission  scope, as shown in the above screenshot.",
            "title": "User Scopes"
        },
        {
            "location": "/plugin/roundcube/#attention",
            "text": "For doing login to your RoundCube site, it is very important that your OP supports  imapData  scope, which contains your imap connection climes ( imapHost , imapPort , imapUsername , imapPassword ).\nThis is not configurable in all OP's. It is configurable if you are using a Gluu Server.\nFor example :  imapHost  =  ssl://imap.gmail.com  ;  imapPort  =  993  ;  imapUsername  =  username@gmail.com  ;  imapPassword  =  password  ;",
            "title": "Attention"
        },
        {
            "location": "/plugin/roundcube/#authentication",
            "text": "",
            "title": "Authentication"
        },
        {
            "location": "/plugin/roundcube/#bypass-the-local-roundcube-login-page-and-send-users-straight-to-the-op-for-authentication",
            "text": "Check this box so that when users attempt to login they are sent straight to the OP, bypassing the local RoundCube login screen.\nWhen it is not checked, it will give proof the following screen.",
            "title": "Bypass the local RoundCube login page and send users straight to the OP for authentication"
        },
        {
            "location": "/plugin/roundcube/#select-acr",
            "text": "To signal which type of authentication should be used, an OpenID Connect client may request a specific authentication context class reference value (a.k.a. \"acr\"). The authentication options available will depend on which types of mechanisms the OP has been configured to support. The Gluu Server supports the following authentication mechanisms out-of-the-box: username/password (basic), Duo Security, Super Gluu, and U2F tokens, like Yubikey.    Navigate to your OpenID Provider configuration webpage  https://OpenID-Provider/.well-known/openid-configuration  to see supported  acr_values . In the  Select acr  section of the plugin page, choose the mechanism which you want for authentication.   Note: If the  Select acr  value is  none , users will be sent to pass the OP's default authentication mechanism.",
            "title": "Select acr"
        },
        {
            "location": "/plugin/shopify/",
            "text": "OpenID Connect Single Sign-On (SSO) Shopify App By Gluu\n#\n\n\n\n\nGluu's OpenID Connect Single Sign-On (SSO) Shopify App will enable you to \nauthenticate users against any standard OpenID Connect Provider (OP). \nIf you don't already have an OP you can use Google or \n\ndeploy the free open source Gluu Server\n.  \n\n\nRequirements\n#\n\n\nIn order to use the Shopify App you will need a standard OP (like Google or a Gluu Server) and the oxd server.\n\n\n\n\n\n\nGluu Server Installation Guide\n.\n\n\n\n\n\n\noxd Webpage\n\n\n\n\n\n\n \n\n\nInstallation\n#\n\n\nDownload\n#\n\n\nGithub source\n.\n\n\nLink to Shopify marketplace\n\n\nUpload\n#\n\n\nOpen your Shopify App Page, e.g. \nhttps://apps.shopify.com/oxd-shopify\n, click on the Get and install in any store.\n\n\nActivate\n#\n\n\nApp Automatic Redirect To Plugin Settings:\n\n\n\n\nGo to \nhttps://{storename}/admin/settings/checkout\n to enable the option to enable the login page.(Account are optional)\nThen you can see login page in shopify\n\n\n\n\nConfiguration\n#\n\n\n\n\nGeneral\n#\n\n\nIn your shopify app store on frontend login page you see the button to login with gluu server\n\n\n \n\n\n\n\nClick on login button with gluu server and iframe will open and login to glu server it automatic create account on shopify same as (social app)",
            "title": "Shopify"
        },
        {
            "location": "/plugin/shopify/#openid-connect-single-sign-on-sso-shopify-app-by-gluu",
            "text": "Gluu's OpenID Connect Single Sign-On (SSO) Shopify App will enable you to \nauthenticate users against any standard OpenID Connect Provider (OP). \nIf you don't already have an OP you can use Google or  deploy the free open source Gluu Server .",
            "title": "OpenID Connect Single Sign-On (SSO) Shopify App By Gluu"
        },
        {
            "location": "/plugin/shopify/#requirements",
            "text": "In order to use the Shopify App you will need a standard OP (like Google or a Gluu Server) and the oxd server.    Gluu Server Installation Guide .    oxd Webpage",
            "title": "Requirements"
        },
        {
            "location": "/plugin/shopify/#installation",
            "text": "",
            "title": "Installation"
        },
        {
            "location": "/plugin/shopify/#download",
            "text": "Github source .  Link to Shopify marketplace",
            "title": "Download"
        },
        {
            "location": "/plugin/shopify/#upload",
            "text": "Open your Shopify App Page, e.g.  https://apps.shopify.com/oxd-shopify , click on the Get and install in any store.",
            "title": "Upload"
        },
        {
            "location": "/plugin/shopify/#activate",
            "text": "App Automatic Redirect To Plugin Settings:   Go to  https://{storename}/admin/settings/checkout  to enable the option to enable the login page.(Account are optional)\nThen you can see login page in shopify",
            "title": "Activate"
        },
        {
            "location": "/plugin/shopify/#configuration",
            "text": "",
            "title": "Configuration"
        },
        {
            "location": "/plugin/shopify/#general",
            "text": "In your shopify app store on frontend login page you see the button to login with gluu server      Click on login button with gluu server and iframe will open and login to glu server it automatic create account on shopify same as (social app)",
            "title": "General"
        },
        {
            "location": "/plugin/nextcloud/",
            "text": "OpenID Connect Single Sign-On (SSO) NextCloud APP by Gluu\n#\n\n\n\n\nGluu's OpenID Connect Single Sign-On (SSO) \nNextCloud APP will enable you to authenticate users against any standard \nOpenID Connect Provider (OP). If you don't already have an OP you can use \nGoogle or \n\ndeploy the free open source Gluu Server\n.  \n\n\nRequirements\n#\n\n\nIn order to use the NextCloud APP you will need a standard OP \n(like Google or a Gluu Server) and the oxd server.\n\n\n\n\n\n\nCompatibility : 11 version\n\n\n\n\n\n\nGluu Server Installation Guide\n.\n\n\n\n\n\n\noxd Webpage\n\n\n\n\n\n\nInstallation\n#\n\n\nDownload\n#\n\n\nGithub source\n.\n\n\nLink to NextCloud marketplace\n\n\nUnzip\n#\n\n\nIf you have already package, unzip it to your NextCloud site root/apps folder.\n\n\nActivate\n#\n\n\nActivate the app by performing the following steps:\n\n\n\n\nGo to \nhttps://{site-base-url}/index.php/settings/apps\n\n\nIn tab \nNot enabled\n find OpenID Connect SSO APP By Gluu and click the \nEnable\n button.\n\n \n\n\nOpen menu tab OpenID Connect SSO\n\n \n\n\n\n\nConfiguration\n#\n\n\nGeneral\n#\n\n\nIn your NextCloud admin menu panel you should now see the OpenID Connect menu tab. Click the link to navigate to the General configuration  page:\n\n\n \n\n\n\n\nAutomatically register any user with an account in the OpenID Provider: By setting registration to automatic, any user with an account in the OP will be able to register for an account in your NextCloud site. They will be assigned the new user default role specified below.\n\n\nOnly register and allow ongoing access to users with one or more of the following roles in the OP: Using this option you can limit registration to users who have a specified role in the OP, for instance \nnextcloud\n. This is not configurable in all OP's. It is configurable if you are using a Gluu Server. \nFollow the instructions below\n to limit access based on an OP role. \n\n\nNew User Default Group: specify which Group to give to new users upon registration.  \n\n\nURI of the OpenID Provider: insert the URI of the OpenID Connect Provider.\n\n\nCustom URI after logout: custom URI after logout (for example \"Thank you\" page).\n\n\noxd port: enter the oxd-server port (you can find this in the \noxd-server/conf/oxd-conf.json\n file).\n\n\nClick \nRegister\n to continue.\n\n\n\n\nIf your OpenID Provider supports dynamic registration, no additional steps are required in the general tab and you can navigate to the \nOpenID Connect Configuration\n tab. \n\n\nIf your OpenID Connect Provider doesn't support dynamic registration, you will need to insert your OpenID Provider \nclient_id\n and \nclient_secret\n on the following page.\n\n\n \n\n\nTo generate your \nclient_id\n and \nclient_secret\n use the redirect uri: \nhttps://{site-base-url}/index.php/apps/gluusso/loginfromopenid\n.\n\n\n\n\nIf you are using a Gluu server as your OpenID Provider, you can make sure everything is configured properly by logging into to your Gluu Server, navigate to the OpenID Connect > Clients page. Search for your \noxd id\n.\n\n\n\n\nEnrollment and Access Management\n#\n\n\n\n\nNavigate to your Gluu Server admin GUI. \n\n\nClick the \nUsers\n tab in the left hand navigation menu. \n\n\nSelect \nManage People\n. \n\n\nFind the person(s) who should have access. \n\n\nClick their user entry. \n\n\nAdd the \nUser Permission\n attribute to the person and specify the same value as in the app. For instance, if in the app you have limit enrollment to user(s) with role = \nnextcloud\n, then you should also have \nUser Permission\n = \nnextcloud\n in the user entry. \nSee a screenshot example\n.\n\n\nUpdate the user record. \n\n\nGo back to the NextCloud APP and make sure the \npermission\n scope is requested (see below). \n\n\nNow they are ready for enrollment at your NextCloud site. \n\n\n\n\nOpenID Connect Configuration\n#\n\n\n\n\nUser Scopes\n#\n\n\nScopes are groups of user attributes that are sent from the OP to the application during login and enrollment. By default, the requested scopes are \nprofile\n, \nemail\n, and \nopenid\n.  \n\n\nTo view your OP's available scopes, open a web browser and navigate to \nhttps://OpenID-Provider/.well-known/openid-configuration\n. For example, here are the scopes you can request if you're using \nGoogle as your OP\n. \n\n\nIf you are using a Gluu server as your OpenID Provider, \nyou can view all available scopes by navigating to the Scopes interface in Gluu CE Server Admin UI\n\n\nOpenID Connect\n > \nScopes\n \n\n\nIn the APP interface you can enable, disable and delete scopes. \n\n\nAuthentication\n#\n\n\nBypass the local NextCloud login page and send users straight to the OP for authentication: Check this box so that when users attempt to login they are sent straight to the OP, bypassing the local NextCloud login screen. When it is not checked, users will see the following screen when trying to login: \n\n\n \n\n\nSelect ACR: To signal which type of authentication should be used, an OpenID Connect client may request a specific authentication context class reference value (a.k.a. \"acr\"). The authentication options available will depend on which types of mechanisms the OP has been configured to support. The Gluu Server supports the following authentication mechanisms out-of-the-box: username/password (basic), Duo Security, Super Gluu, and U2F tokens, like Yubikey.  \n\n\nNavigate to your OpenID Provider configuration webpage \nhttps://OpenID-Provider/.well-known/openid-configuration\n to see supported \nacr_values\n. \n\n\nIn the \nSelect acr\n section of the app page, choose the mechanism which you want for authentication. If the \nSelect acr\n value in the app is \nnone\n, users will be sent to pass the OP's default authentication mechanism.",
            "title": "NextCloud"
        },
        {
            "location": "/plugin/nextcloud/#openid-connect-single-sign-on-sso-nextcloud-app-by-gluu",
            "text": "Gluu's OpenID Connect Single Sign-On (SSO) \nNextCloud APP will enable you to authenticate users against any standard \nOpenID Connect Provider (OP). If you don't already have an OP you can use \nGoogle or  deploy the free open source Gluu Server .",
            "title": "OpenID Connect Single Sign-On (SSO) NextCloud APP by Gluu"
        },
        {
            "location": "/plugin/nextcloud/#requirements",
            "text": "In order to use the NextCloud APP you will need a standard OP \n(like Google or a Gluu Server) and the oxd server.    Compatibility : 11 version    Gluu Server Installation Guide .    oxd Webpage",
            "title": "Requirements"
        },
        {
            "location": "/plugin/nextcloud/#installation",
            "text": "",
            "title": "Installation"
        },
        {
            "location": "/plugin/nextcloud/#download",
            "text": "Github source .  Link to NextCloud marketplace",
            "title": "Download"
        },
        {
            "location": "/plugin/nextcloud/#unzip",
            "text": "If you have already package, unzip it to your NextCloud site root/apps folder.",
            "title": "Unzip"
        },
        {
            "location": "/plugin/nextcloud/#activate",
            "text": "Activate the app by performing the following steps:   Go to  https://{site-base-url}/index.php/settings/apps  In tab  Not enabled  find OpenID Connect SSO APP By Gluu and click the  Enable  button.    Open menu tab OpenID Connect SSO",
            "title": "Activate"
        },
        {
            "location": "/plugin/nextcloud/#configuration",
            "text": "",
            "title": "Configuration"
        },
        {
            "location": "/plugin/nextcloud/#general",
            "text": "In your NextCloud admin menu panel you should now see the OpenID Connect menu tab. Click the link to navigate to the General configuration  page:      Automatically register any user with an account in the OpenID Provider: By setting registration to automatic, any user with an account in the OP will be able to register for an account in your NextCloud site. They will be assigned the new user default role specified below.  Only register and allow ongoing access to users with one or more of the following roles in the OP: Using this option you can limit registration to users who have a specified role in the OP, for instance  nextcloud . This is not configurable in all OP's. It is configurable if you are using a Gluu Server.  Follow the instructions below  to limit access based on an OP role.   New User Default Group: specify which Group to give to new users upon registration.    URI of the OpenID Provider: insert the URI of the OpenID Connect Provider.  Custom URI after logout: custom URI after logout (for example \"Thank you\" page).  oxd port: enter the oxd-server port (you can find this in the  oxd-server/conf/oxd-conf.json  file).  Click  Register  to continue.   If your OpenID Provider supports dynamic registration, no additional steps are required in the general tab and you can navigate to the  OpenID Connect Configuration  tab.   If your OpenID Connect Provider doesn't support dynamic registration, you will need to insert your OpenID Provider  client_id  and  client_secret  on the following page.     To generate your  client_id  and  client_secret  use the redirect uri:  https://{site-base-url}/index.php/apps/gluusso/loginfromopenid .   If you are using a Gluu server as your OpenID Provider, you can make sure everything is configured properly by logging into to your Gluu Server, navigate to the OpenID Connect > Clients page. Search for your  oxd id .",
            "title": "General"
        },
        {
            "location": "/plugin/nextcloud/#enrollment-and-access-management",
            "text": "Navigate to your Gluu Server admin GUI.   Click the  Users  tab in the left hand navigation menu.   Select  Manage People .   Find the person(s) who should have access.   Click their user entry.   Add the  User Permission  attribute to the person and specify the same value as in the app. For instance, if in the app you have limit enrollment to user(s) with role =  nextcloud , then you should also have  User Permission  =  nextcloud  in the user entry.  See a screenshot example .  Update the user record.   Go back to the NextCloud APP and make sure the  permission  scope is requested (see below).   Now they are ready for enrollment at your NextCloud site.",
            "title": "Enrollment and Access Management"
        },
        {
            "location": "/plugin/nextcloud/#openid-connect-configuration",
            "text": "",
            "title": "OpenID Connect Configuration"
        },
        {
            "location": "/plugin/nextcloud/#user-scopes",
            "text": "Scopes are groups of user attributes that are sent from the OP to the application during login and enrollment. By default, the requested scopes are  profile ,  email , and  openid .    To view your OP's available scopes, open a web browser and navigate to  https://OpenID-Provider/.well-known/openid-configuration . For example, here are the scopes you can request if you're using  Google as your OP .   If you are using a Gluu server as your OpenID Provider, \nyou can view all available scopes by navigating to the Scopes interface in Gluu CE Server Admin UI  OpenID Connect  >  Scopes    In the APP interface you can enable, disable and delete scopes.",
            "title": "User Scopes"
        },
        {
            "location": "/plugin/nextcloud/#authentication",
            "text": "Bypass the local NextCloud login page and send users straight to the OP for authentication: Check this box so that when users attempt to login they are sent straight to the OP, bypassing the local NextCloud login screen. When it is not checked, users will see the following screen when trying to login:      Select ACR: To signal which type of authentication should be used, an OpenID Connect client may request a specific authentication context class reference value (a.k.a. \"acr\"). The authentication options available will depend on which types of mechanisms the OP has been configured to support. The Gluu Server supports the following authentication mechanisms out-of-the-box: username/password (basic), Duo Security, Super Gluu, and U2F tokens, like Yubikey.    Navigate to your OpenID Provider configuration webpage  https://OpenID-Provider/.well-known/openid-configuration  to see supported  acr_values .   In the  Select acr  section of the app page, choose the mechanism which you want for authentication. If the  Select acr  value in the app is  none , users will be sent to pass the OP's default authentication mechanism.",
            "title": "Authentication"
        }
    ]
}